{"version":3,"sources":["n2-features/f1-auth/a2-register/Register.module.css","n2-features/f1-auth/a5-profile/Profile.module.css","n2-features/f1-auth/a1-login/Login.module.css","n1-main/m1-ui/common/Input/Input.module.css","n2-features/f1-auth/a3-restore/Restore.module.css","n2-features/f1-auth/a4-new-password/NewPassword.module.css","n1-main/m1-ui/common/NavItem/NavItem.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/Header/Header.module.css","n1-main/m1-ui/Header/Nav/Nav.module.css","n1-main/m1-ui/Main/Main.module.css","n1-main/m2-bll/reducers/profileP-reducer.ts","n1-main/m1-ui/common/NavItem/NavItem.tsx","n1-main/m1-ui/Header/Nav/Nav.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/common/Button/Button.tsx","n2-features/f1-auth/a5-profile/Profile.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/reducers/app-reducer.ts","n1-main/m2-bll/reducers/login-reducer.ts","n1-main/m2-bll/reducers/register-reducer.ts","n2-features/f1-auth/a5-profile/ProfileContainer.tsx","n1-main/m1-ui/common/Input/Input.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a1-login/LoginContainer.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a2-register/RegisterContainer.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n1-main/m2-bll/reducers/restorePassword-reducer.ts","n2-features/f1-auth/a3-restore/RestoreContainer.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m2-bll/reducers/newPassword-reducer.ts","n2-features/f1-auth/a4-new-password/NewPasswordContainer.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","ACTION_TYPE","NavItem","path","title","to","className","classes","navItem","activeClassName","active","Nav","routes","Header","header","Button","React","memo","btnType","btnName","rest","buttonClasses","button","Profile","userData","logout","profile","profile__container","profile__title","profile__info","_id","name","email","created","publicCardPacksCount","profile__buttons","onClick","instance","axios","create","baseURL","withCredentials","authAPI","post","data","delete","initialState","setProfileUserDataAC","type","SET_USER","payload","isLoading","isLoggedSuccess","error","setValueIsLoading","setValueIsLoggedSuccess","setErrorText","initApp","setAppErrorAC","SET_APP_ERROR","setInitAppAC","SET_INIT_APP","ProfileContainer","dispatch","useDispatch","useSelector","state","app","login","useEffect","getState","a","console","log","response","e","Input","label","errorCondition","errorText","input","input__label","input__elem","input__error","inputs__error_text","Login","props","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","handleOnSubmit","handleSubmit","placeholder","touched","getFieldProps","checkbox","checked","btn","disabled","resetForm","infoTextRed","loading","LoginContainer","useCallback","then","res","status","catch","message","setTimeout","logInUserInAppTC","Register","password2","register","register__container","register__form","register__title","register__inputs","register__buttons","isValid","register__error","register__loading","setErrorAC","SET_ERROR","setStatusAC","SET_STATUS","RegisterContainer","onSubmitHandler","Restore","restore","textAfterRequest","isSentSuccess","infoTextGreen","setValueIsSentSuccess","value","setRestoreTextAfterRequest","RestoreContainer","restorePassword","from","success","info","restoreTC","NewPassword","isSetNewPassword","isOk","token","useParams","password1","newPassword","setValueIsSetNewPassword","setValueIsOk","text","NewPasswordContainer","resetPasswordToken","setNewPasswordTC","Routes","render","Main","main","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a2646a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__38-aa\",\"register__container\":\"Register_register__container__3LldD\",\"register__form\":\"Register_register__form__1BUgI\",\"register__title\":\"Register_register__title__3UYHq\",\"register__inputs\":\"Register_register__inputs__39dwI\",\"register__buttons\":\"Register_register__buttons__R6uT6\",\"register__error\":\"Register_register__error__2RoUn\",\"register__loading\":\"Register_register__loading__24EIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1-5kW\",\"profile__container\":\"Profile_profile__container__32E_8\",\"profile__title\":\"Profile_profile__title__184h-\",\"profile__info\":\"Profile_profile__info__205Db\",\"profile__buttons\":\"Profile_profile__buttons__ZYrOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2uauU\",\"loading\":\"Login_loading__DRcVj\",\"checkbox\":\"Login_checkbox__22VNC\",\"infoTextRed\":\"Login_infoTextRed__3D3K3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2b9yi\",\"input__label\":\"Input_input__label__1lDak\",\"input__elem\":\"Input_input__elem__2Zzrh\",\"input__error\":\"Input_input__error__2PMc0\",\"inputs__error_text\":\"Input_inputs__error_text__3FrbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restore\":\"Restore_restore__13Bjf\",\"infoTextGreen\":\"Restore_infoTextGreen__2G6FJ\",\"infoTextRed\":\"Restore_infoTextRed__28a17\",\"loading\":\"Restore_loading__3_QQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__CQJI_\",\"infoTextRed\":\"NewPassword_infoTextRed__2ZvXx\",\"infoTextGreen\":\"NewPassword_infoTextGreen__3C5qD\",\"loading\":\"NewPassword_loading__tsGzL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__3DieS\",\"active\":\"NavItem_active___rzAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ir3Eb\",\"green\":\"Button_green__3fh93\",\"red\":\"Button_red__1bozl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3zo7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Nav_routes__NLzDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2rISc\"};","import {Dispatch} from \"redux\";\r\nimport {authAPI, UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {setAppErrorAC, setInitAppAC} from \"./app-reducer\";\r\nimport {setErrorText, setValueIsLoggedSuccess} from \"./login-reducer\";\r\n\r\n\r\nenum ACTION_TYPE {\r\n    SET_USER = \"Profile/SET_USER\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    userData: null as UserDataType | null\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPE.SET_USER:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nexport const setProfileUserDataAC = (userData: UserDataType | null) => {\r\n    return {type: ACTION_TYPE.SET_USER, payload: {userData}}\r\n}\r\n\r\nexport const logoutUserInAppTC = () =>async (dispatch: Dispatch) => {\r\n    dispatch(setInitAppAC(\"loading\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    try {\r\n        let response = authAPI.logoutUserInApp()\r\n        dispatch(setProfileUserDataAC(null))\r\n        dispatch(setValueIsLoggedSuccess(false))\r\n    } catch (e) {\r\n        dispatch(setErrorText(e.response ? e.response.data.error : \"unknown error\"))\r\n    }\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setProfileUserDataAC>\r\n\r\nexport type ProfileStateType = typeof initialState\r\n\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.css\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n}\r\n\r\nconst NavItem: React.FC<PropsType> = ({path, title}) => {\r\n    return (\r\n            <NavLink to={path} className={classes.navItem} activeClassName={classes.active}>{title}</NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport NavItem from \"../../common/NavItem/NavItem\";\r\nimport classes from \"./Nav.module.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={classes.routes}>\r\n            <NavItem path={\"/profile\"} title={\"Profile\"}/>\r\n            <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            <NavItem path={\"/register\"} title={\"Registration\"}/>\r\n            <NavItem path={\"/restore\"} title={\"Restore password\"}/>\r\n            <NavItem path={\"/newPassword\"} title={\"New password\"}/>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\nimport Nav from \"./Nav/Nav\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={classes.header}>\r\n            <Nav/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const Button = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\ntype PropsType = {\r\n    userData: UserDataType\r\n    logout: () => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({userData, logout}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.profile__container}>\r\n                <div className={classes.profile__title}>\r\n                    <h3>Profile page</h3>\r\n                </div>\r\n\r\n                <div className={classes.profile__info}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>Id:</th>\r\n                            <td>{userData._id}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Username:</th>\r\n                            <td>{userData.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Email:</th>\r\n                            <td>{userData.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Added:</th>\r\n                            <td>{userData.created}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Packs of cards:</th>\r\n                            <td>{userData.publicCardPacksCount}</td>\r\n                        </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n                <div className={classes.profile__buttons}>\r\n                    <Button onClick={logout} btnName={\"Logout\"} btnType={\"red\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<UserDataType>(\"/auth/me\")\r\n    },\r\n    logInUserInApp(data: RequestLogInType) {\r\n        return  instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n    logoutUserInApp() {\r\n        return  instance.delete<UserDataType>(`/auth/me`)\r\n    },\r\n    setNewPassword(data: RequestNewPasswordType) {\r\n        return instance.post<NewPasswordResponseType>(`/auth/set-new-password`, data)\r\n    },\r\n    register (data: RequestRegisterType) {\r\n        return instance.post<RegisterResponseType>(\"/auth/register\", data)\r\n    },\r\n    getLinkForResetPassword(data: RequestResetPasswordType) {\r\n        return  instance.post<NewPasswordResponseType>(`/auth/forgot`, data)\r\n    }\r\n}\r\n\r\nexport type RequestRegisterType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type RequestLogInType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type RequestNewPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type RequestResetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    \"addedUser\": UserDataType\r\n}\r\n\r\ntype NewPasswordResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    avatar: null | string\r\n}\r\n\r\ntype ErrorType = {\r\n    error: string\r\n    email: string\r\n    in: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport { authAPI } from \"../../m3-dal/auth-api\";\r\nimport {RootStateType} from \"../store\";\r\nimport { setValueIsLoggedSuccess } from \"./login-reducer\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_APP_ERROR = \"App/SET_APP_ERROR\",\r\n    SET_INIT_APP = \"App/SET_INIT_APP\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    initApp: \"idle\" as StatusType\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_APP_ERROR:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case ACTION_TYPE.SET_INIT_APP:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_APP_ERROR, payload: {error}}\r\n}\r\nexport const setInitAppAC = (initApp: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_INIT_APP, payload: {initApp}}\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setInitAppAC>\r\n\r\n// thunk\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    dispatch(setInitAppAC(\"succeeded\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    if (getState().app.initApp === \"loading\") console.log(\"loading\")\r\n    try {\r\n        let response = await authAPI.me()\r\n        dispatch(setProfileUserDataAC(response.data))\r\n        dispatch(setValueIsLoggedSuccess(true))\r\n        dispatch(setInitAppAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setInitAppAC(\"failed\"))\r\n    }\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type LoginStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoading: false as boolean,\r\n    isLoggedSuccess: false as boolean,\r\n    error: \"\" as string\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-VALUE-IS-LOGGED-SUCCESS\":\r\n            return {...state, isLoggedSuccess: action.isLoggedSuccess}\r\n        case \"login/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        case \"login/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logInUserInAppTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.logInUserInApp({\r\n        email: email,\r\n        password: password,\r\n        rememberMe: rememberMe\r\n    })\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(setProfileUserDataAC({...res.data}))\r\n                dispatch(setValueIsLoggedSuccess(true))\r\n                dispatch(setValueIsLoading(false))\r\n\r\n            }\r\n        })\r\n        .catch(e => {\r\n            dispatch(setValueIsLoading(false))\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setErrorText(error))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n    })\r\n}\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\nexport const setValueIsLoggedSuccess = (isLoggedSuccess: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOGGED-SUCCESS\", isLoggedSuccess} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"login/SET-ERROR-TEXT\", error} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsLoading>\r\n            | ReturnType<typeof setValueIsLoggedSuccess>\r\n            | ReturnType<typeof setErrorText>\r\n            | ReturnType<typeof setProfileUserDataAC>\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRegisterType} from \"../../m3-dal/auth-api\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_STATUS = \"SET_STATUS\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    status: \"idle\" as StatusType,\r\n}\r\n\r\nexport const registerReducer = (state: RegisterStateType = initialState, action: ActionsType): RegisterStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_ERROR:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_ERROR, payload: {error}}\r\n}\r\nexport const setStatusAC = (status: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_STATUS, payload: {status}}\r\n}\r\n\r\nexport type ActionsType =\r\n    ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setStatusAC>\r\n\r\n// thunk\r\n\r\nexport const addUserTC = (data: RequestRegisterType) => async (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC(\"loading\"))\r\n    dispatch(setErrorAC(\"\"))\r\n    try {\r\n        let response = await authAPI.register(data)\r\n        dispatch(setStatusAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setStatusAC(\"failed\"))\r\n        setTimeout(dispatch, 5000, setErrorAC(\"\"))\r\n    }\r\n}\r\n\r\nexport type RegisterStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {authMeTC, StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport { logoutUserInAppTC } from '../../../n1-main/m2-bll/reducers/profileP-reducer';\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\nconst ProfileContainer = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.profile.userData)\r\n    const initApp = useSelector<RootStateType, StatusType>(state => state.app.initApp)\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n\r\n\r\n    useEffect(() => {\r\n        if (initApp === \"idle\" && !isLoggedSuccess) {\r\n            dispatch(authMeTC())\r\n        }\r\n    }, [initApp, isLoggedSuccess])\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutUserInAppTC())\r\n    }\r\n\r\n    if (!userData || !isLoggedSuccess) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <Profile userData={userData} logout={logoutHandler}/>\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import React, {InputHTMLAttributes} from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\ninterface PropsType extends InputHTMLAttributes<HTMLInputElement> {\r\n    label?: string\r\n    errorText?: string\r\n    errorCondition?: boolean\r\n}\r\n\r\nexport const Input = React.memo(\r\n    ({label, errorCondition, errorText, ...rest }: PropsType) => {\r\n\r\n    return (\r\n            <div className={classes.input}>\r\n                <p className={classes.input__label}>{label}</p>\r\n                <input className={`${classes.input__elem} ${errorCondition ? classes.input__error : \"\"}`}\r\n                       {...rest}/>\r\n                {errorCondition ? <div\r\n                    className={classes.inputs__error_text}>{errorText}</div> : null}\r\n            </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Login.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    isLoggedSuccess: boolean,\r\n    isLoading: boolean,\r\n    error: string,\r\n    handleOnSubmit: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Login = React.memo((props: RestorePropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Field is required!\"\r\n            } else if (values.password.length < 8) {\r\n                errors.password = \"Too short password, min 8 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.email, values.password, values.rememberMe)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>Login page</h3>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}\r\n                />\r\n                <Input\r\n                    label={\"Password\"}\r\n                    type={\"password\"}\r\n                    placeholder={\"Please, put your password\"}\r\n                    errorCondition={!!formik.errors.password && formik.touched.password}\r\n                    errorText={formik.errors.password}\r\n                    {...formik.getFieldProps(\"password\")}\r\n\r\n                />\r\n                <Input\r\n                    className={classes.checkbox}\r\n                    label={\"remember me\"}\r\n                    type={\"checkbox\"}\r\n                    checked={formik.values.rememberMe}\r\n                    {...formik.getFieldProps(\"rememberMe\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Login\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n            </form>\r\n            {props.error && <div className={classes.infoTextRed}>{props.error}</div>}\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Login;\r\n","import React, {useCallback} from 'react';\r\nimport Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {logInUserInAppTC} from \"../../../n1-main/m2-bll/reducers/login-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.login.isLoading)\r\n    const error = useSelector<RootStateType, string>(state => state.login.error)\r\n\r\n    const handleOnSubmit = useCallback((email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInUserInAppTC(email, password,rememberMe))\r\n    }, []\r\n    )\r\n\r\n    if (isLoggedSuccess) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            isLoading={isLoading}\r\n            isLoggedSuccess={isLoggedSuccess}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {Input} from '../../../n1-main/m1-ui/common/Input/Input';\r\nimport classes from \"./Register.module.css\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/register-reducer\";\r\nimport {RequestRegisterType} from \"../../../n1-main/m3-dal/auth-api\";\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: RequestRegisterType) => void\r\n    error: string\r\n    status: StatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    password2?: string\r\n}\r\n\r\nconst Register: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 7) {\r\n                errors.password = \"Must be 7 or more characters\"\r\n            }\r\n            if (values.password !== values.password2) {\r\n                errors.password2 = \"Passwords does not match\"\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            props.onSubmit({email: values.email, password: values.password})\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.register}>\r\n            <div className={classes.register__container}>\r\n                <form className={classes.register__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.register__title}>\r\n                        <h3>Registration</h3>\r\n                    </div>\r\n                    <div className={classes.register__inputs}>\r\n                        <Input label={\"Email\"}\r\n                               errorCondition={!!formik.errors.email && formik.touched.email}\r\n                               placeholder={\"email\"}\r\n                               errorText={formik.errors.email}\r\n                               {...formik.getFieldProps(\"email\")}/>\r\n                        <Input label={\"Password\"}\r\n                               errorCondition={!!formik.errors.password && formik.touched.password}\r\n                               type={\"password\"}\r\n                               placeholder={\"password\"}\r\n                               errorText={formik.errors.password}\r\n                               {...formik.getFieldProps(\"password\")}/>\r\n                        <Input label={\"Repeat password\"}\r\n                               errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                               type={\"password\"}\r\n                               errorText={formik.errors.password2}\r\n                               placeholder={\"confirm password\"}\r\n                               {...formik.getFieldProps(\"password2\")} />\r\n                    </div>\r\n                    <div className={classes.register__buttons}>\r\n                        <Button btnName={\"Join\"} btnType={\"green\"} type={\"submit\"}\r\n                                disabled={!formik.isValid || (props.status === \"loading\")}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    {props.error && <div className={classes.register__error}>{props.error}</div>}\r\n                    {props.status === \"loading\" && <div className={classes.register__loading}>...Loading</div>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Register;\r\n","import React, {useCallback} from 'react';\r\nimport Register from \"./Register\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addUserTC, StatusType} from \"../../../n1-main/m2-bll/reducers/register-reducer\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { RequestRegisterType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\nconst RegisterContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<RootStateType, string>(state => state.register.error)\r\n    const status = useSelector<RootStateType, StatusType>(state => state.register.status)\r\n\r\n\r\n    const onSubmitHandler = useCallback((values: RequestRegisterType) => {\r\n        dispatch(addUserTC(values))\r\n    }, [])\r\n\r\n    if (status===\"succeeded\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <Register onSubmit={onSubmitHandler} error={error} status={status}/>\r\n    );\r\n};\r\n\r\nexport default RegisterContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Restore.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    textAfterRequest: string,\r\n    isSentSuccess: boolean,\r\n    isLoading: boolean,\r\n    handleOnSubmit: (value: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst Restore = React.memo((props: RestorePropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.email)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.restore}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>Restore password page</h3>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Send email\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            </form>\r\n            {props.textAfterRequest && <div className={\r\n                props.isSentSuccess ? classes.infoTextGreen : classes.infoTextRed\r\n            }>{props.textAfterRequest}</div>}\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Restore;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type RestorePasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSentSuccess: false as boolean,\r\n    textAfterRequest: \"\" as string,\r\n    isLoading: false as boolean\r\n}\r\n\r\nexport const restorePasswordReducer = (state = initialState, action: ActionsType): RestorePasswordStateType => {\r\n    switch (action.type) {\r\n        case \"restore/SET-VALUE-IS-SENT-SUCCESS\":\r\n            return {...state, isSentSuccess: action.value}\r\n        case \"restore/SET-TEXT-AFTER-REQUEST\":\r\n            return {...state, textAfterRequest: action.textAfterRequest}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const restoreTC = (value: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.getLinkForResetPassword({\r\n        email: value,\r\n        from: \"admin\",\r\n        message: `<div style=\"background-color: lime; padding: 15px\">\r\n                    password recovery link: \r\n                    <a href=\"https://osbelkz.github.io/cards#/newPassword/$token$\"> \r\n                    link</a>\r\n                </div>` // после полной заливки на ghp, заменить ссылку на страницу new password on ghp\r\n    })\r\n        .then(res => {\r\n            if (res.data.success ) {\r\n                dispatch(setValueIsSentSuccess(true))\r\n                dispatch(setRestoreTextAfterRequest(res.data.info))\r\n                dispatch(setValueIsLoading(false))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setRestoreTextAfterRequest(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setRestoreTextAfterRequest(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSentSuccess = (value: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-SENT-SUCCESS\", value} as const)\r\n\r\nexport const setRestoreTextAfterRequest = (textAfterRequest: string) =>\r\n    ({type: \"restore/SET-TEXT-AFTER-REQUEST\", textAfterRequest} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSentSuccess>\r\n    | ReturnType<typeof setRestoreTextAfterRequest>\r\n    | ReturnType<typeof setValueIsLoading>\r\n\r\n","import React, {useCallback} from 'react';\r\nimport Restore from \"./Restore\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {restoreTC} from \"../../../n1-main/m2-bll/reducers/restorePassword-reducer\";\r\n\r\nconst RestoreContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const textAfterRequest = useSelector<RootStateType, string>(state => state.restorePassword.textAfterRequest)\r\n    const isSentSuccess = useSelector<RootStateType, boolean>(state => state.restorePassword.isSentSuccess)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.restorePassword.isLoading)\r\n\r\n    const handleOnSubmit = useCallback((value: string) => {\r\n        dispatch(restoreTC(value))\r\n        }, []\r\n    )\r\n\r\n    return (\r\n        <Restore\r\n            textAfterRequest={textAfterRequest}\r\n            isSentSuccess={isSentSuccess}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RestoreContainer;\r\n","import React from \"react\";\r\nimport classes from \"./NewPassword.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\ntype NewPasswordPropsType = {\r\n    isSetNewPassword: boolean\r\n    error: string\r\n    isOk: string\r\n    isLoading: boolean\r\n    handleOnSubmit: (value: string, token: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password1?: string\r\n    password2?: string\r\n}\r\n\r\n\r\nconst NewPassword = React.memo((props: NewPasswordPropsType) => {\r\n    console.log(props.isSetNewPassword, props.isOk)\r\n    const {token}  = useParams<{token: string}>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password1: \"\",\r\n            password2: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password1) {\r\n                errors.password1 = \"Field is required!\"\r\n            } else if (values.password1.length < 8) {\r\n                errors.password1 = \"Too short password, min 8 symbols\"\r\n            }\r\n            if (!values.password2) {\r\n                errors.password2 = \"Field is required!\"\r\n            } else if (values.password2.length < 8) {\r\n                errors.password2 = \"Too short password, min 8 symbols\"\r\n            } else if (values.password1 !== values.password2) {\r\n                errors.password2 = \"Both fields must be equal!\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.password1, token)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.newPassword}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>New password page</h3>\r\n                <Input\r\n                    label={\"Password\"}\r\n                    placeholder={\"Please, put new password\"}\r\n                    errorCondition={!!formik.errors.password1 && formik.touched.password1}\r\n                    errorText={formik.errors.password1}\r\n                    {...formik.getFieldProps(\"password1\")}\r\n\r\n                />\r\n                <Input\r\n                    label={\"Password\"}\r\n                    placeholder={\"Put new password again\"}\r\n                    errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                    errorText={formik.errors.password2}\r\n                    {...formik.getFieldProps(\"password2\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Set new password\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            </form>\r\n            {!props.isSetNewPassword && props.error\r\n                ? <div className={classes.infoTextRed}>{props.error}</div>\r\n                : \"\"\r\n            }\r\n            {props.isSetNewPassword && props.isOk\r\n                ? <div className={classes.infoTextGreen}>{props.isOk}</div>\r\n                : \"\"\r\n            }\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default NewPassword;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type NewPasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSetNewPassword: false as boolean,\r\n    error: \"\" as string,\r\n    isOk: \"\" as string,\r\n    isLoading: false as boolean\r\n}\r\n\r\nexport const newPasswordReducer = (state = initialState, action: ActionsType): NewPasswordStateType => {\r\n    switch (action.type) {\r\n        case \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\":\r\n            return {...state, isSetNewPassword: action.value}\r\n        case \"newPassword/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        case \"newPassword/SET-VALUE-IS-OK\":\r\n            return {...state, isOk: action.text}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setNewPasswordTC = (newPassword: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.setNewPassword({\r\n        password: newPassword,\r\n        resetPasswordToken: token\r\n    })\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(setValueIsSetNewPassword(true))\r\n                dispatch(setValueIsOk(res.data.info))\r\n                dispatch(setValueIsLoading(false))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorText(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSetNewPassword = (value: boolean) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\", value} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"newPassword/SET-ERROR-TEXT\", error} as const)\r\n\r\nexport const setValueIsOk = (text: string) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-OK\", text} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSetNewPassword>\r\n                | ReturnType<typeof setErrorText>\r\n                | ReturnType<typeof setValueIsOk>\r\n                | ReturnType<typeof setValueIsLoading>\r\n","import React, {useCallback} from 'react';\r\nimport NewPassword from \"./NewPassword\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {setNewPasswordTC} from \"../../../n1-main/m2-bll/reducers/newPassword-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NewPasswordContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isSetNewPassword = useSelector<RootStateType, boolean>(state => state.newPassword.isSetNewPassword)\r\n    const error = useSelector<RootStateType, string>(state => state.newPassword.error)\r\n    const isOk = useSelector<RootStateType, string>(state => state.newPassword.isOk)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.newPassword.isLoading)\r\n\r\n    const handleOnSubmit = useCallback((newPassword: string, token: string) => {\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }, []\r\n    )\r\n\r\n    if (isSetNewPassword) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <NewPassword\r\n            isSetNewPassword={isSetNewPassword}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isOk={isOk}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPasswordContainer;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport ProfileContainer from \"../../../n2-features/f1-auth/a5-profile/ProfileContainer\";\r\nimport LoginContainer from \"../../../n2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RegisterContainer from \"../../../n2-features/f1-auth/a2-register/RegisterContainer\";\r\nimport RestoreContainer from \"../../../n2-features/f1-auth/a3-restore/RestoreContainer\";\r\nimport NewPasswordContainer from \"../../../n2-features/f1-auth/a4-new-password/NewPasswordContainer\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={\"/profile\"} render={() => <ProfileContainer/>}/>\r\n            <Route path={\"/login\"} render={() => <LoginContainer/>}/>\r\n            <Route path={\"/register\"} render={() => <RegisterContainer/>}/>\r\n            <Route path={\"/restore\"} render={() => <RestoreContainer/>}/>\r\n            <Route path={\"/newPassword/:token\"} render={() => <NewPasswordContainer/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport classes from \"./Main.module.css\";\r\nimport Routes from \"../Routes/Routes\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <div className={classes.main}>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './Main/Main';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {newPasswordReducer} from \"./reducers/newPassword-reducer\";\r\nimport {profileReducer} from \"./reducers/profileP-reducer\";\r\nimport {registerReducer} from \"./reducers/register-reducer\";\r\nimport {restorePasswordReducer} from \"./reducers/restorePassword-reducer\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}