{"version":3,"sources":["n2-features/f1-auth/a2-register/Register.module.css","n2-features/f1-auth/a5-profile/Profile.module.css","n2-features/f1-auth/a1-login/Login.module.css","n1-main/m1-ui/common/Input/Input.module.css","n2-features/f1-auth/a3-restore/Restore.module.css","n2-features/f1-auth/a4-new-password/NewPassword.module.css","n1-main/m1-ui/common/Slider/Slider.module.scss","n2-features/f2-cards/c1-packs/Packs.module.scss","n1-main/m1-ui/common/Table/Table.module.scss","n2-features/f2-cards/c2-cards/Cards.module.scss","n1-main/m1-ui/common/Paginator/Paginator.module.scss","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.module.scss","n1-main/m1-ui/common/NavItem/NavItem.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Preloader/Preloader.module.scss","n1-main/m1-ui/common/Table/EditableTableCell/EditableTableCell.module.scss","n1-main/m1-ui/common/Table/TableButton/TableButton.module.scss","n1-main/m1-ui/common/Search/Search.module.scss","n1-main/m1-ui/Header/Header.module.css","n1-main/m1-ui/Header/Nav/Nav.module.css","n1-main/m1-ui/Main/Main.module.css","n1-main/m2-bll/reducers/app-reducer.ts","n1-main/m1-ui/common/NavItem/NavItem.tsx","n1-main/m1-ui/Header/Nav/Nav.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/common/Button/Button.tsx","n2-features/f1-auth/a5-profile/Profile.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/reducers/login-reducer.ts","n1-main/m2-bll/reducers/profileP-reducer.ts","n1-main/m2-bll/reducers/register-reducer.ts","n2-features/f1-auth/a5-profile/ProfileContainer.tsx","n1-main/m1-ui/common/Input/Input.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a1-login/LoginContainer.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a2-register/RegisterContainer.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n1-main/m2-bll/reducers/restorePassword-reducer.ts","n2-features/f1-auth/a3-restore/RestoreContainer.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m2-bll/reducers/newPassword-reducer.ts","n2-features/f1-auth/a4-new-password/NewPasswordContainer.tsx","n1-main/m1-ui/common/Preloader/Preloader.tsx","n1-main/m1-ui/common/AuthRedirect/AuthRedirect.tsx","n1-main/m2-bll/reducers/packs-reducer.ts","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/Table/TableButton/TableButton.tsx","n1-main/m1-ui/common/Table/EditableTableCell/EditableTableCell.tsx","n1-main/m1-ui/common/Slider/Slider.tsx","n1-main/m1-ui/common/Search/Search.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.tsx","n2-features/f2-cards/c1-packs/Packs.tsx","n1-main/m3-dal/packs-api.ts","n1-main/m2-bll/reducers/cards-reducer.ts","n1-main/m3-dal/cards-api.ts","n2-features/f2-cards/c1-packs/PacksContainer.tsx","n2-features/f2-cards/c2-cards/Cards.tsx","n2-features/f2-cards/c2-cards/CardsContainer.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","ACTION_TYPE","NavItem","path","title","to","className","classes","navItem","activeClassName","active","Nav","routes","Header","header","Button","React","memo","btnType","btnName","rest","buttonClasses","button","Profile","userData","logout","profile","profile__container","profile__title","profile__info","_id","name","email","created","publicCardPacksCount","profile__buttons","onClick","instance","axios","create","baseURL","withCredentials","authAPI","post","data","delete","value","from","message","initialState","isLoading","isLoggedSuccess","error","setValueIsLoading","type","setValueIsLoggedSuccess","setErrorText","initApp","setAppErrorAC","SET_APP_ERROR","payload","setInitAppAC","SET_INIT_APP","setProfileUserDataAC","SET_USER","ProfileContainer","dispatch","useDispatch","useSelector","state","a","e","response","Input","label","errorCondition","errorText","input","input__label","input__elem","input__error","inputs__error_text","Login","props","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","handleOnSubmit","login","handleSubmit","placeholder","touched","getFieldProps","checkbox","checked","btn","disabled","resetForm","infoTextRed","loading","LoginContainer","useCallback","then","res","catch","setTimeout","logInUserInAppTC","Register","password2","register","register__container","register__form","register__title","register__inputs","register__buttons","isValid","status","register__error","register__loading","setErrorAC","SET_ERROR","setStatusAC","SET_STATUS","RegisterContainer","onSubmitHandler","Restore","restore","textAfterRequest","isSentSuccess","infoTextGreen","setValueIsSentSuccess","setRestoreTextAfterRequest","RestoreContainer","restorePassword","info","restoreTC","NewPassword","token","useParams","password1","newPassword","isSetNewPassword","isOk","setValueIsSetNewPassword","setValueIsOk","text","NewPasswordContainer","resetPasswordToken","setNewPasswordTC","Preloader","container","ldsFacebook","ACTION_TYPES","AuthRedirect","app","useEffect","getState","children","Table","model","pageStatus","table","table__loading","table__row_header","map","m","index","dataItem","dataIndex","table__row_data","key","modelIndex","render","TableButton","EditableTableCell","changeText","useState","edit","setEdit","editableText","setEditableText","editable_cell","editable_cell__input","onChange","target","onBlur","autoFocus","onDoubleClick","Slider","leftMin","min","maxValue","leftMax","max","doubleRange","rangeNum","style","left","minValue","step","stepValue","range","currentTarget","setMin","setMax","Search","setName","uniSearch","slider","setSearchParams","Paginator","currentPage","pageNumber","setPageNumber","pageAmount","Math","ceil","itemsTotalCount","pageCount","paginator","leftBlock","itemsName","changePageCount","rightBlock","changePage","ColumnSorting","up","down","Packs","packs","userId","page","setPacksSortColumn","cardPacksTotalCount","createPack","deletePack","updatePack","choosePack","packName","searchParams","testModel","useMemo","i","width","padding","d","user_id","dm","Date","year","getFullYear","month","getMonth","day","getDay","display","alignItems","sort","cardsCount","user_name","textAlign","packs__container","packs__title","packs__body","packsApi","params","get","cardsPack","id","put","undefined","sortPacks","changePageAC","CHANGE_PAGE","setPacksAC","SET_PACKS","setPageStatusAC","SET_IS_LOADING","getPacksTC","selectedPage","cardPacks","minCardsCount","maxCardsCount","alert","cardsApi","card","cardsPack_id","cardsOwner","cards","cardsTotalCount","minGrade","maxGrade","cardQuestion","cardAnswer","sortCards","changeCardsPageAC","setCardsPageStatus","setPackAC","SET_PACK_ID","getCardsTC","SET_CARDS","PacksContainer","history","useHistory","deletePackHandler","deletePackTC","createPackHandler","console","log","createPackTC","updatePackHandler","updatePackTC","changePageHandler","changePageCountHandler","CHANGE_PAGE_COUNT","changePageCountAC","setSearchParamsHandler","searchName","SET_SEARCH_PARAMS","setSearchParamsAC","setPacksSortColumnHandler","SET_SORT_PACKS","setPacksSortColumnAC","choosePackHandler","packId","push","Cards","owner","setSortColumn","createCard","deleteCard","updateCard","question","answer","grade","CardsContainer","cardsPage","deleteCardHandler","cardId","deleteCardTC","createCardHandler","updateCardHandler","changeCardsPageCountAC","setCardsSearchParamsAC","setSortColumnHandler","SET_SORT_COLUMN","setCardsSortColumnParamsAC","Routes","Main","main","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","SET_TOTAL_COUNT","SET_SEARCH_NAME","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,oBAAsB,sCAAsC,eAAiB,iCAAiC,gBAAkB,kCAAkC,iBAAmB,mCAAmC,kBAAoB,oCAAoC,gBAAkB,kCAAkC,kBAAoB,sC,sBCAhZD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,mBAAqB,oCAAoC,eAAiB,gCAAgC,cAAgB,+BAA+B,iBAAmB,oC,gBCAjOD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,QAAU,uBAAuB,SAAW,wBAAwB,YAAc,6B,gBCAjID,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,YAAc,2BAA2B,aAAe,4BAA4B,mBAAqB,oC,gBCAnMD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,QAAU,2B,gBCAzJD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,cAAgB,mCAAmC,QAAU,+B,gBCA7KD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,yB,gBCAvID,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,iBAAmB,gCAAgC,aAAe,8B,gBCAjHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,eAAiB,8BAA8B,kBAAoB,iCAAiC,gBAAkB,iC,gBCArKD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,iBAAmB,gCAAgC,aAAe,8B,qBCAjHD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,UAAY,6BAA6B,WAAa,gC,gBCAjHD,EAAOC,QAAU,CAAC,UAAY,iCAAiC,GAAK,0BAA0B,KAAO,8B,iBCArGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,mBCA9DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,sB,kBCAtFD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,YAAc,iC,gBCAzED,EAAOC,QAAU,CAAC,cAAgB,yCAAyC,qBAAuB,kD,gBCAlGD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,MAAQ,2BAA2B,IAAM,2B,gBCAhGD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,OAAS,yB,yBCAjED,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,sB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,4ICKpBC,E,yFCSUC,EANsB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACzC,OACQ,kBAAC,IAAD,CAASC,GAAIF,EAAMG,UAAWC,IAAQC,QAASC,gBAAiBF,IAAQG,QAASN,I,iBCK9EO,EAZH,WACR,OACI,yBAAKL,UAAWC,IAAQK,QACpB,kBAAC,EAAD,CAAST,KAAM,WAAYC,MAAO,YAClC,kBAAC,EAAD,CAASD,KAAM,SAAUC,MAAO,UAChC,kBAAC,EAAD,CAASD,KAAM,YAAaC,MAAO,iBACnC,kBAAC,EAAD,CAASD,KAAM,WAAYC,MAAO,qBAClC,kBAAC,EAAD,CAASD,KAAM,SAAUC,MAAO,YCC7BS,EARA,WACX,OACI,yBAAKP,UAAWC,IAAQO,QACpB,kBAAC,EAAD,Q,kECCCC,EAASC,IAAMC,MAAK,YAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,QAAYC,EAAqB,qCAErEC,EAAa,UAAMd,IAAQe,OAAd,YAAwBf,IAAQW,IAEjD,OACQ,0CAAQZ,UAAWe,GAAmBD,GACjCD,MCyCFI,EA5CsB,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAE7C,OACI,yBAAKnB,UAAWC,IAAQmB,SACpB,yBAAKpB,UAAWC,IAAQoB,oBACpB,yBAAKrB,UAAWC,IAAQqB,gBACpB,6CAGJ,yBAAKtB,UAAWC,IAAQsB,eACpB,+BACI,+BACA,4BACI,mCACA,4BAAKL,EAASM,MAElB,4BACI,yCACA,4BAAKN,EAASO,OAElB,4BACI,sCACA,4BAAKP,EAASQ,QAElB,4BACI,sCACA,4BAAKR,EAASS,UAElB,4BACI,+CACA,4BAAKT,EAASU,0BAM1B,yBAAK5B,UAAWC,IAAQ4B,kBACpB,kBAACpB,EAAD,CAAQqB,QAASX,EAAQN,QAAS,SAAUD,QAAS,Y,sDC3CnEmB,EAAWC,IAAMC,OAAO,CAC1BC,QAHa,sCAIbC,iBAAiB,IAGRC,EAAU,WAEf,OAAOL,EAASM,KAAmB,aAF9BD,EAAU,SAIJE,GACX,OAAQP,EAASM,KAAT,cAA2CC,IAL9CF,EAAU,WAQf,OAAQL,EAASQ,OAAT,aARHH,EAAU,SAUJE,GACX,OAAOP,EAASM,KAAT,yBAAiEC,IAXnEF,EAAU,SAaTE,GACN,OAAOP,EAASM,KAA2B,iBAAkBC,IAdxDF,EAAU,SAgBKI,GACpB,OAAQT,EAASM,KAAT,eAAuD,CAC3DX,MAAOc,EACPC,KAAM,QACNC,QAAQ,mPCxBdC,EAAe,CACjBC,WAAW,EACXC,iBAAiB,EACjBC,MAAO,IAoCEC,EAAoB,SAACH,GAAD,MAC5B,CAACI,KAAM,6BAA8BJ,cAE7BK,EAA0B,SAACJ,GAAD,MAClC,CAACG,KAAM,oCAAqCH,oBAEpCK,EAAe,SAACJ,GAAD,MACvB,CAACE,KAAM,uBAAwBF,W,SP9C/BnD,K,kCAAAA,E,iCAAAA,M,KAKL,IQLKA,ERKCgD,EAAe,CACjBG,MAAO,GACPK,QAAS,QAmBAC,EAAgB,SAACN,GAC1B,MAAO,CAACE,KAAMrD,EAAY0D,cAAeC,QAAS,CAACR,WAE1CS,EAAe,SAACJ,GACzB,MAAO,CAACH,KAAMrD,EAAY6D,aAAcF,QAAS,CAACH,c,SQ9BjDxD,K,6BAAAA,M,KAKL,ICPKA,EDOCgD,EAAe,CACjBzB,SAAU,MAkBDuC,EAAuB,SAACvC,GACjC,MAAO,CAAC8B,KAAMrD,EAAY+D,SAAUJ,QAAS,CAACpC,cEPnCyC,EAjBU,WAGrB,IAAMC,EAAWC,cACX3C,EAAW4C,aAAgD,SAAAC,GAAK,OAAIA,EAAM3C,QAAQF,YAQxF,OAAIA,EAEG,kBAAC,EAAD,CAASA,SAAUA,EAAUC,OANd,WAClByC,EFkByB,uCAAK,WAAOA,GAAP,SAAAI,EAAA,sDAClCJ,EAASL,EAAa,YACtBK,EAASR,EAAc,KACvB,IACmBhB,IACfwB,EAASH,EAAqB,OAC9BG,EAASX,GAAwB,IACjCW,EAASL,EAAa,cACxB,MAAOU,GACLL,EAASL,EAAa,WACtBK,EAASV,EAAae,EAAEC,SAAWD,EAAEC,SAAS5B,KAAKQ,MAAQ,kBAV7B,2CAAL,0DEfR,+B,wCCVZqB,GAAQzD,IAAMC,MACvB,YAA8D,IAA5DyD,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,UAAcxD,EAAsB,sDAE7D,OACQ,yBAAKd,UAAWC,KAAQsE,OACpB,uBAAGvE,UAAWC,KAAQuE,cAAeJ,GACrC,yCAAOpE,UAAS,UAAKC,KAAQwE,YAAb,YAA4BJ,EAAiBpE,KAAQyE,aAAe,KACzE5D,IACVuD,EAAiB,yBACdrE,UAAWC,KAAQ0E,oBAAqBL,GAAmB,S,SCsEhEM,GAtEDlE,IAAMC,MAAK,SAACkE,GAEtB,IAAMC,EAASC,aAAU,CACrBC,cAAe,CACXtD,MAAO,GACPuD,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAO1D,MAEA,4CAA4C4D,KAAKF,EAAO1D,SAChE2D,EAAO3D,MAAQ,yBAFf2D,EAAO3D,MAAQ,qBAId0D,EAAOH,SAEDG,EAAOH,SAASM,OAAS,IAChCF,EAAOJ,SAAW,qCAFlBI,EAAOJ,SAAW,qBAIfI,GAEXG,SAAU,SAAAJ,GACNP,EAAMY,eAAeL,EAAO1D,MAAO0D,EAAOH,SAAUG,EAAOF,eAInE,OACI,yBAAKlF,UAAWC,KAAQyF,OACpB,0BAAMF,SAAUV,EAAOa,cACnB,0CACA,kBAACxB,GAAD,eACIC,MAAO,QACPwB,YAAa,yBACbvB,iBAAkBS,EAAOO,OAAO3D,OAASoD,EAAOe,QAAQnE,MACxD4C,UAAWQ,EAAOO,OAAO3D,OACrBoD,EAAOgB,cAAc,WAE7B,kBAAC3B,GAAD,eACIC,MAAO,WACPpB,KAAM,WACN4C,YAAa,4BACbvB,iBAAkBS,EAAOO,OAAOJ,UAAYH,EAAOe,QAAQZ,SAC3DX,UAAWQ,EAAOO,OAAOJ,UACrBH,EAAOgB,cAAc,cAG7B,kBAAC3B,GAAD,eACInE,UAAWC,KAAQ8F,SACnB3B,MAAO,cACPpB,KAAM,WACNgD,QAASlB,EAAOM,OAAOF,YACnBJ,EAAOgB,cAAc,gBAE7B,yBAAK9F,UAAWC,KAAQgG,KACpB,kBAACxF,EAAD,CACIuC,KAAM,SACNnC,QAAS,QACTqF,SAAUrB,EAAMjC,UAChBhC,QAAS,UAEb,kBAACH,EAAD,CAAQI,QAAS,QAASiB,QAAS,kBAAMgD,EAAOqB,iBAGvDtB,EAAM/B,OAAS,yBAAK9C,UAAWC,KAAQmG,aAAcvB,EAAM/B,OAC3D+B,EAAMjC,WAAa,yBAAK5C,UAAWC,KAAQoG,SAAxB,kBClDjBC,GA1BQ,WACnB,IAAM1C,EAAWC,cAEXhB,EAAkBiB,aAAoC,SAAAC,GAAK,OAAIA,EAAM2B,MAAM7C,mBAC3ED,EAAYkB,aAAoC,SAAAC,GAAK,OAAIA,EAAM2B,MAAM9C,aACrEE,EAAQgB,aAAmC,SAAAC,GAAK,OAAIA,EAAM2B,MAAM5C,SAEhE2C,EAAiBc,uBAAY,SAAC7E,EAAeuD,EAAkBC,GACjEtB,ENUwB,SAAClC,EAAeuD,EAAkBC,GAAlC,OAA0D,SAACtB,GACvFA,EAASb,GAAkB,IAC3BX,EAAuB,CACnBV,MAAOA,EACPuD,SAAUA,EACVC,WAAYA,IAEXsB,MAAK,SAAAC,GACF7C,EAASH,EAAqB,eAAIgD,EAAInE,QACtCsB,EAASX,GAAwB,IACjCW,EAASb,GAAkB,OAE9B2D,OAAM,SAAAzC,GACHL,EAASb,GAAkB,IAC3B,IAAMD,EAAQmB,EAAEC,SAAWD,EAAEC,SAAS5B,KAAKQ,MAASmB,EAAEvB,QAAU,gCAChEkB,EAASV,EAAaJ,IACtB6D,WAAW/C,EAAU,IAAMV,EAAa,SM1BnC0D,CAAiBlF,EAAOuD,EAASC,MAC3C,IAGH,OAAIrC,EACO,kBAAC,IAAD,CAAU9C,GAAI,aAIrB,kBAAC,GAAD,CACI6C,UAAWA,EACXC,gBAAiBA,EACjBC,MAAOA,EACP2C,eAAgBA,K,oBC4DboB,GApEuBnG,IAAMC,MAAK,SAACkE,GAE9C,IAAMC,EAASC,aAAU,CACrBC,cAAe,CACXtD,MAAO,GACPuD,SAAU,GACV6B,UAAW,IAEf3B,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAXKD,EAAO1D,MAEA,4CAA4C4D,KAAKF,EAAO1D,SAChE2D,EAAO3D,MAAQ,yBAFf2D,EAAO3D,MAAQ,aAId0D,EAAOH,UAAYG,EAAOH,SAASM,OAAS,KAC7CF,EAAOJ,SAAW,gCAElBG,EAAOH,WAAaG,EAAO0B,YAC3BzB,EAAOyB,UAAY,4BAEhBzB,GAGXG,SAAU,SAACJ,GACPP,EAAMW,SAAS,CAAC9D,MAAO0D,EAAO1D,MAAOuD,SAAUG,EAAOH,cAI9D,OACI,yBAAKjF,UAAWC,KAAQ8G,UACpB,yBAAK/G,UAAWC,KAAQ+G,qBACpB,0BAAMhH,UAAWC,KAAQgH,eAAgBzB,SAAUV,EAAOa,cACtD,yBAAK3F,UAAWC,KAAQiH,iBACpB,6CAEJ,yBAAKlH,UAAWC,KAAQkH,kBACpB,kBAAChD,GAAD,eAAOC,MAAO,QACPC,iBAAkBS,EAAOO,OAAO3D,OAASoD,EAAOe,QAAQnE,MACxDkE,YAAa,QACbtB,UAAWQ,EAAOO,OAAO3D,OACrBoD,EAAOgB,cAAc,WAChC,kBAAC3B,GAAD,eAAOC,MAAO,WACPC,iBAAkBS,EAAOO,OAAOJ,UAAYH,EAAOe,QAAQZ,SAC3DjC,KAAM,WACN4C,YAAa,WACbtB,UAAWQ,EAAOO,OAAOJ,UACrBH,EAAOgB,cAAc,cAChC,kBAAC3B,GAAD,eAAOC,MAAO,kBACPC,iBAAkBS,EAAOO,OAAOyB,WAAahC,EAAOe,QAAQiB,UAC5D9D,KAAM,WACNsB,UAAWQ,EAAOO,OAAOyB,UACzBlB,YAAa,oBACTd,EAAOgB,cAAc,gBAEpC,yBAAK9F,UAAWC,KAAQmH,mBACpB,kBAAC3G,EAAD,CAAQI,QAAS,OAAQD,QAAS,QAASoC,KAAM,SACzCkD,UAAWpB,EAAOuC,SAA6B,YAAjBxC,EAAMyC,SAC5C,kBAAC7G,EAAD,CAAQI,QAAS,QAASmC,KAAM,QAASlB,QAAS,kBAAMgD,EAAOqB,gBAElEtB,EAAM/B,OAAS,yBAAK9C,UAAWC,KAAQsH,iBAAkB1C,EAAM/B,OAC9C,YAAjB+B,EAAMyC,QAAwB,yBAAKtH,UAAWC,KAAQuH,mBAAxB,qB,SL7E9C7H,K,sBAAAA,E,yBAAAA,M,KAKL,IAAMgD,GAAe,CACjBG,MAAO,GACPwE,OAAQ,QAgBCG,GAAa,SAAC3E,GACvB,MAAO,CAACE,KAAMrD,EAAY+H,UAAWpE,QAAS,CAACR,WAEtC6E,GAAc,SAACL,GACxB,MAAO,CAACtE,KAAMrD,EAAYiI,WAAYtE,QAAS,CAACgE,YMFrCO,GApBW,WAEtB,IAAMjE,EAAWC,cACXf,EAAQgB,aAAmC,SAAAC,GAAK,OAAIA,EAAMgD,SAASjE,SACnEwE,EAASxD,aAAuC,SAAAC,GAAK,OAAIA,EAAMgD,SAASO,UAGxEQ,EAAkBvB,uBAAY,SAACnB,GNwBhB,IAAC9C,EMvBlBsB,GNuBkBtB,EMvBC8C,ENuBF,uCAA+B,WAAOxB,GAAP,SAAAI,EAAA,6DACpDJ,EAAS+D,GAAY,YACrB/D,EAAS6D,GAAW,KAFgC,kBAI3BrF,EAAiBE,GAJU,cAKhDsB,EAAS+D,GAAY,cAL2B,gDAOhD/D,EAAS6D,GAAW,KAAEvD,SAAW,KAAEA,SAAS5B,KAAKQ,MAAQ,kBACzDc,EAAS+D,GAAY,WACrBhB,WAAW/C,EAAU,IAAM6D,GAAW,KATU,yDAA/B,0DMtBlB,IAEH,MAAa,cAATH,EACO,kBAAC,IAAD,CAAUvH,GAAI,WAIrB,kBAAC,GAAD,CAAUyF,SAAUsC,EAAiBhF,MAAOA,EAAOwE,OAAQA,K,oBC2CpDS,GAlDCrH,IAAMC,MAAK,SAACkE,GAExB,IAAMC,EAASC,aAAU,CACrBC,cAAe,CACXtD,MAAO,IAEXyD,SAAU,SAACC,GACP,IAAMC,EAA0B,GAMhC,OALKD,EAAO1D,MAEA,4CAA4C4D,KAAKF,EAAO1D,SAChE2D,EAAO3D,MAAQ,yBAFf2D,EAAO3D,MAAQ,qBAIZ2D,GAEXG,SAAU,SAAAJ,GACNP,EAAMY,eAAeL,EAAO1D,UAIpC,OACI,yBAAK1B,UAAWC,KAAQ+H,SACpB,0BAAMxC,SAAUV,EAAOa,cACnB,qDACA,kBAACxB,GAAD,eACIC,MAAO,QACPwB,YAAa,yBACbvB,iBAAkBS,EAAOO,OAAO3D,OAASoD,EAAOe,QAAQnE,MACxD4C,UAAWQ,EAAOO,OAAO3D,OACrBoD,EAAOgB,cAAc,WAE7B,yBAAK9F,UAAWC,KAAQgG,KACpB,kBAACxF,EAAD,CACIuC,KAAM,SACNnC,QAAS,aACTqF,SAAUrB,EAAMjC,UAChBhC,QAAS,UAEb,kBAACH,EAAD,CAAQI,QAAS,QAASiB,QAAS,kBAAMgD,EAAOqB,gBAEpD,kBAAC,EAAD,CAAStG,KAAM,SAAUC,MAAO,WAEnC+E,EAAMoD,kBAAoB,yBAAKjI,UAC5B6E,EAAMqD,cAAgBjI,KAAQkI,cAAgBlI,KAAQmG,aACvDvB,EAAMoD,kBACRpD,EAAMjC,WAAa,yBAAK5C,UAAWC,KAAQoG,SAAxB,kBC1D1B1D,GAAe,CACjBuF,eAAe,EACfD,iBAAkB,GAClBrF,WAAW,GA+BFwF,GAAwB,SAAC5F,GAAD,MAChC,CAACQ,KAAM,oCAAqCR,UAEpC6F,GAA6B,SAACJ,GAAD,MACrC,CAACjF,KAAM,iCAAkCiF,qBAEjClF,GAAoB,SAACH,GAAD,MAC5B,CAACI,KAAM,+BAAgCJ,cCnB7B0F,GArBU,WACrB,IAAM1E,EAAWC,cACXoE,EAAmBnE,aAAmC,SAAAC,GAAK,OAAIA,EAAMwE,gBAAgBN,oBACrFC,EAAgBpE,aAAoC,SAAAC,GAAK,OAAIA,EAAMwE,gBAAgBL,iBACnFtF,EAAYkB,aAAoC,SAAAC,GAAK,OAAIA,EAAMwE,gBAAgB3F,aAE/E6C,EAAiBc,uBAAY,SAAC/D,GAChCoB,EDWiB,SAACpB,GAAD,OAAmB,SAACoB,GACzCA,EAASb,IAAkB,IAC3BX,EAAgCI,GAC3BgE,MAAK,SAAAC,GACF7C,EAASwE,IAAsB,IAC/BxE,EAASyE,GAA2B5B,EAAInE,KAAKkG,OAC7C5E,EAASb,IAAkB,OAE9B2D,OAAM,SAAC5D,GACJc,EAASyE,GAA2BvF,EAAMoB,SAAS5B,KAAKQ,QACxDc,EAASb,IAAkB,IAC3B4D,WAAW/C,EAAU,IAAMyE,GAA2B,SCtBjDI,CAAUjG,MAChB,IAGP,OACI,kBAAC,GAAD,CACIyF,iBAAkBA,EAClBC,cAAeA,EACfzC,eAAgBA,EAChB7C,UAAWA,K,oBCyER8F,GAzEKhI,IAAMC,MAAK,SAACkE,GAAgC,IAErD8D,EAAUC,cAAVD,MAED7D,EAASC,aAAU,CACrBC,cAAe,CACX6D,UAAW,GACX/B,UAAW,IAEf3B,SAAU,SAACC,GACP,IAAMC,EAA0B,GAahC,OAZKD,EAAOyD,UAEDzD,EAAOyD,UAAUtD,OAAS,IACjCF,EAAOwD,UAAY,qCAFnBxD,EAAOwD,UAAY,qBAIlBzD,EAAO0B,UAED1B,EAAO0B,UAAUvB,OAAS,EACjCF,EAAOyB,UAAY,oCACZ1B,EAAOyD,YAAczD,EAAO0B,YACnCzB,EAAOyB,UAAY,8BAJnBzB,EAAOyB,UAAY,qBAMhBzB,GAEXG,SAAU,SAAAJ,GACNP,EAAMY,eAAeL,EAAOyD,UAAWF,MAI/C,OACI,yBAAK3I,UAAWC,KAAQ6I,aACpB,0BAAMtD,SAAUV,EAAOa,cACnB,iDACA,kBAACxB,GAAD,eACIC,MAAO,WACPwB,YAAa,2BACbvB,iBAAkBS,EAAOO,OAAOwD,WAAa/D,EAAOe,QAAQgD,UAC5DvE,UAAWQ,EAAOO,OAAOwD,WACrB/D,EAAOgB,cAAc,eAG7B,kBAAC3B,GAAD,eACIC,MAAO,WACPwB,YAAa,yBACbvB,iBAAkBS,EAAOO,OAAOyB,WAAahC,EAAOe,QAAQiB,UAC5DxC,UAAWQ,EAAOO,OAAOyB,WACrBhC,EAAOgB,cAAc,eAE7B,yBAAK9F,UAAWC,KAAQgG,KACpB,kBAACxF,EAAD,CACIuC,KAAM,SACNnC,QAAS,mBACTqF,SAAUrB,EAAMjC,UAChBhC,QAAS,UAEb,kBAACH,EAAD,CAAQI,QAAS,QAASiB,QAAS,kBAAMgD,EAAOqB,gBAEpD,kBAAC,EAAD,CAAStG,KAAM,SAAUC,MAAO,YAElC+E,EAAMkE,kBAAoBlE,EAAM/B,MAC5B,yBAAK9C,UAAWC,KAAQmG,aAAcvB,EAAM/B,OAC5C,GAEL+B,EAAMkE,kBAAoBlE,EAAMmE,KAC3B,yBAAKhJ,UAAWC,KAAQkI,eAAgBtD,EAAMmE,MAC9C,GAELnE,EAAMjC,WAAa,yBAAK5C,UAAWC,KAAQoG,SAAxB,kBCrF1B1D,GAAe,CACjBoG,kBAAkB,EAClBjG,MAAO,GACPkG,KAAM,GACNpG,WAAW,GAoCFqG,GAA2B,SAACzG,GAAD,MACnC,CAACQ,KAAM,4CAA6CR,UAE5CU,GAAe,SAACJ,GAAD,MACvB,CAACE,KAAM,6BAA8BF,UAE7BoG,GAAe,SAACC,GAAD,MACvB,CAACnG,KAAM,8BAA+BmG,SAE9BpG,GAAoB,SAACH,GAAD,MAC5B,CAACI,KAAM,+BAAgCJ,cCrB7BwG,GA3Bc,WACzB,IAAMxF,EAAWC,cACXkF,EAAmBjF,aAAoC,SAAAC,GAAK,OAAIA,EAAM+E,YAAYC,oBAClFjG,EAAQgB,aAAmC,SAAAC,GAAK,OAAIA,EAAM+E,YAAYhG,SACtEkG,EAAOlF,aAAmC,SAAAC,GAAK,OAAIA,EAAM+E,YAAYE,QACrEpG,EAAYkB,aAAoC,SAAAC,GAAK,OAAIA,EAAM+E,YAAYlG,aAE3E6C,EAAiBc,uBAAY,SAACuC,EAAqBH,GACrD/E,EDYwB,SAACkF,EAAqBH,GAAtB,OAAwC,SAAC/E,GACrEA,EAASb,IAAkB,IAC3BX,EAAuB,CACnB6C,SAAU6D,EACVO,mBAAoBV,IAEnBnC,MAAK,SAAAC,GACF7C,EAASqF,IAAyB,IAClCrF,EAASsF,GAAazC,EAAInE,KAAKkG,OAC/B5E,EAASb,IAAkB,OAE9B2D,OAAM,SAAA5D,GACHc,EAASV,GAAaJ,EAAMoB,SAAS5B,KAAKQ,QAC1Cc,EAASb,IAAkB,IAC3B4D,WAAW/C,EAAU,IAAMV,GAAa,SC1BnCoG,CAAiBR,EAAaH,MACxC,IAGH,OAAII,EACO,kBAAC,IAAD,CAAUhJ,GAAI,WAIrB,kBAAC,GAAD,CACIgJ,iBAAkBA,EAClBjG,MAAOA,EACP2C,eAAgBA,EAChBuD,KAAMA,EACNpG,UAAWA,K,oBC1BhB,SAAS2G,KACZ,OACI,yBAAKvJ,UAAWC,KAAQuJ,WACpB,yBAAKxJ,UAAWC,KAAQwJ,aACpB,8BAAW,8BAAW,gCCAtC,ICDKC,GD2BUC,GA1BgB,SAAC9E,GAC5B,IAAMjB,EAAWC,cACXV,EAAUW,aAAuC,SAAAC,GAAK,OAAIA,EAAM6F,IAAIzG,WACpEN,EAAkBiB,aAAoC,SAAAC,GAAK,OAAIA,EAAM2B,MAAM7C,mBASjF,OANAgH,qBAAU,WACU,SAAZ1G,GAAuBN,GACvBe,EvB4BY,uCAAM,WAAOA,EAAoBkG,GAA3B,eAAA9F,EAAA,6DAC1BJ,EAASL,EAAa,YACtBK,EAASR,EAAc,KAFG,kBAIDhB,IAJC,OAIlB8B,EAJkB,OAKtBN,EAASH,EAAqBS,EAAS5B,OACvCsB,EAASX,GAAwB,IACjCW,EAASL,EAAa,cAPA,kDAStBK,EAASR,EAAc,KAAEc,SAAW,KAAEA,SAAS5B,KAAKQ,MAAQ,kBAC5Dc,EAASL,EAAa,WACtBK,EAASV,EAAa,KAAEgB,SAAW,KAAEA,SAAS5B,KAAKQ,MAAQ,kBAXrC,0DAAN,2DuB1BjB,CAACK,EAASN,IAEG,YAAZM,GAAqC,SAAZA,EAClB,kBAACoG,GAAD,MAEN1G,EAKD,6BACKgC,EAAMkF,UALJ,kBAAC,IAAD,CAAUhK,GAAI,Y,wCEediK,GAtBsBtJ,IAAMC,MAAK,YAAgC,IAA9BsJ,EAA6B,EAA7BA,MAAO3H,EAAsB,EAAtBA,KAAM4H,EAAgB,EAAhBA,WAI3D,OACI,2BAAOlK,UAAS,UAAKC,KAAQkK,MAAb,YAAmC,YAAbD,EAAyBjK,KAAQmK,eAAiB,KACpF,+BACA,wBAAIpK,UAAWC,KAAQoK,mBAClBJ,EAAMK,KAAI,SAACC,EAAgBC,GAAjB,OAAmCD,EAAEzK,MAAM0K,QAG1D,+BACClI,EAAKgI,KAAI,SAACG,EAAeC,GAAhB,OACN,wBAAI1K,UAAWC,KAAQ0K,gBAAiBC,IAAKH,EAASjJ,KACjDyI,EAAMK,KAAI,SAACC,EAAGM,GAAJ,OAAmBN,EAAEO,OAAOL,EAAUI,EAAYH,e,iDCtBpEK,GAAcrK,IAAMC,MAAK,YAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,QAAYC,EAAqB,qCAE1EC,EAAa,UAAMd,KAAQe,OAAd,YAAwBf,KAAQW,IAEjD,OACQ,0CAAQZ,UAAWe,GAAmBD,GACjCD,MC0BFmK,GA9B+B,SAAC,GAAwB,IAAvB7B,EAAsB,EAAtBA,KAAM8B,EAAgB,EAAhBA,WAAgB,EAE1CC,oBAAS,GAFiC,oBAE3DC,EAF2D,KAErDC,EAFqD,OAG1BF,mBAAS/B,GAHiB,oBAG3DkC,EAH2D,KAG7CC,EAH6C,KAalE,OACI,yBAAKtL,UAAWC,KAAQsL,eACnBJ,EACK,2BAAOnL,UAAWC,KAAQuL,qBACxBxI,KAAK,OACAyI,SAAU,SAACxH,GAAD,OAAKqH,EAAgBrH,EAAEyH,OAAOlJ,QACxCmJ,OAdK,WACtBP,GAAQ,GACJjC,IAASkC,GACTJ,EAAWI,IAYEO,WAAS,EACTpJ,MAAO6I,IAEd,yBAAKQ,cAAe,kBAAIT,GAAQ,KAAQC,GAE9C,kBAACN,GAAD,CAAalK,QAAS,OAAQiB,QAAS,kBAAIsJ,GAAQ,Q,wCCtBlDU,GAAS,SAACjH,GAEnB,IAgBIkH,EAAUlH,EAAMmH,KAAOnH,EAAMoH,SAAS,KAAO,IAC7CC,EAAUrH,EAAMsH,KAAOtH,EAAMoH,SAAS,KAAO,IAEjD,OAAO,yBAAKjM,UAAWC,KAAQmM,aAC3B,6BACI,yBACIpM,UAAWC,KAAQoM,SACnBC,MAAO,CAACC,KAAK,GAAD,OAAKR,EAAL,OAEXlH,EAAMmH,KAEX,2BACIhJ,KAAM,QACNgJ,IAAKnH,EAAM2H,SACXL,IAAKtH,EAAMoH,SACXQ,KAAM5H,EAAM6H,UACZlK,MAAOqC,EAAMmH,IACbhM,UAAWC,KAAQ0M,MACnBlB,SAlCU,SAACxH,GACnB,IAAIzB,GAASyB,EAAE2I,cAAcpK,MAC7BqC,EAAMgI,OAAOrK,GACTqC,EAAMsH,KAAO3J,GACbqC,EAAMiI,OAAOtK,OAkCjB,yBACIxC,UAAWC,KAAQoM,SACnBC,MAAO,CAACC,KAAK,GAAD,OAAKL,EAAL,OAEXrH,EAAMsH,KAEX,2BACInJ,KAAM,QACNgJ,IAAKnH,EAAM2H,SACXL,IAAKtH,EAAMoH,SACXQ,KAAM5H,EAAM6H,UACZlK,MAAOqC,EAAMsH,IACbnM,UAAWC,KAAQ0M,MACnBlB,SA3Cc,SAACxH,GACnB,IAAIzB,GAASyB,EAAE2I,cAAcpK,MAC7BqC,EAAMiI,OAAOtK,GACTqC,EAAMmH,KAAOxJ,GACbqC,EAAMgI,OAAOrK,QCZZuK,GAAS,SAAClI,GAA4B,IAAD,EAEtBqG,mBAASrG,EAAMpD,MAFO,oBAEvCA,EAFuC,KAEjCuL,EAFiC,OAGxB9B,mBAASrG,EAAM2H,UAHS,oBAGvCR,EAHuC,KAGlCa,EAHkC,OAIxB3B,mBAASrG,EAAMoH,UAJS,oBAIvCE,EAJuC,KAIlCW,EAJkC,KAU9C,OAAO,yBAAK9M,UAAWC,KAAQgN,WAC3B,4BAAKpI,EAAMT,OACX,kBAACD,GAAD,CACI3B,MAAOf,EACPgK,SATqB,SAACxH,GAC1B+I,EAAQ/I,EAAE2I,cAAcpK,UAUxB,yBAAKxC,UAAWC,KAAQiN,QACpB,kBAAC,GAAD,CACIL,OAAQA,EACRC,OAAQA,EACRd,IAAKA,EACLG,IAAKA,EACLK,SAAU3H,EAAM2H,SAChBP,SAAUpH,EAAMoH,SAChBS,UAAW7H,EAAM6H,aAGrB,kBAACjM,EAAD,CACII,QAAS,SACTiB,QAAS,WACL+C,EAAMsI,gBAAgB1L,EAAMuK,EAAKG,Q,oBC/BxCiB,GAAY,SAACvI,GAA+B,IAAD,EAChBqG,mBAASrG,EAAMwI,aADC,oBAC7CC,EAD6C,KACjCC,EADiC,KAEhDC,EAAaC,KAAKC,KAAK7I,EAAM8I,gBAAkB9I,EAAM+I,WA6BzD,OAAO,yBAAK5N,UAAWC,KAAQ4N,WAC3B,yBAAK7N,UAAWC,KAAQ6N,WAAxB,gBACcjJ,EAAMkJ,UADpB,aACkClJ,EAAM8I,gBADxC,aAC4D9I,EAAMkJ,UADlE,cAEI,4BAAQtC,SA9Be,SAACxH,GAC5B,IAAIzB,GAASyB,EAAE2I,cAAcpK,MAC7BqC,EAAMmJ,gBAAgBxL,IA4BwBA,MAAOqC,EAAM+I,WACnD,sCACA,sCACA,sCACA,yCAGR,yBAAK5N,UAAWC,KAAQgO,YACpB,kBAACxN,EAAD,CACII,QAAO,OACPiB,QApCY,WACpB+C,EAAMqJ,WAAWZ,EAAa,GAC9BC,EAAcD,EAAa,IAmCnBpH,SAAUrB,EAAMwI,YAAc,IAJtC,SAOKC,EAAa,EACd,kBAACnJ,GAAD,CAAOnB,KAAM,SACNR,MAAO8K,EACPb,KAAM,EAAGT,IAAK,EACdG,IAAKqB,EACL/B,SAzCW,SAACxH,GACvBsJ,GAAetJ,EAAE2I,cAAcpK,QAyCpBmJ,OAvCQ,WACf2B,EAAa,GACbzI,EAAMqJ,WAAW,GACjBX,EAAc,IACPD,EAAaE,GACpB3I,EAAMqJ,WAAWV,GACjBD,EAAcC,IAEd3I,EAAMqJ,WAAWZ,MAkBrB,MAeQE,EACJ,kBAAC/M,EAAD,CACII,QAAO,OACPiB,QAjCQ,WAChB+C,EAAMqJ,WAAWZ,EAAa,GAC9BC,EAAcD,EAAa,IAgCnBpH,SAAUrB,EAAMwI,cAAgBG,O,oBClEnCW,GAAgB,SAACtJ,GAQ1B,OAAO,yBAAK7E,UAAWC,KAAQuJ,WAC3B,kBAAC/I,EAAD,CACII,QAAS,SACTb,UAAWC,KAAQmO,GACnBtM,QAXgB,WACpB+C,EAAM/C,QAAQ,MAYd,kBAACrB,EAAD,CACII,QAAS,SACTb,UAAWC,KAAQoO,KACnBvM,QAbkB,WACtB+C,EAAM/C,QAAQ,QC0HPwM,GAtGoB5N,IAAMC,MAAK,SAACkE,GAAW,IACjD0J,EAKD1J,EALC0J,MAAOC,EAKR3J,EALQ2J,OAAQC,EAKhB5J,EALgB4J,KAAMC,EAKtB7J,EALsB6J,mBACtBd,EAIA/I,EAJA+I,UAAWe,EAIX9J,EAJW8J,oBAAqBC,EAIhC/J,EAJgC+J,WAChCC,EAGAhK,EAHAgK,WAAYC,EAGZjK,EAHYiK,WAAYZ,EAGxBrJ,EAHwBqJ,WAAYa,EAGpClK,EAHoCkK,WACpCf,EAEAnJ,EAFAmJ,gBAAiBb,EAEjBtI,EAFiBsI,gBAAiBjD,EAElCrF,EAFkCqF,WAClC8B,EACAnH,EADAmH,IAAKG,EACLtH,EADKsH,IAAoB6C,EACzBnK,EADUoK,aAAeD,SAIvBE,EAA2BC,mBAAQ,iBAAO,CAC5C,CACIrP,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,oBAAqB1E,IAAKwE,GAChF,uCAEJtE,OAAQ,SAACyE,EAAiBH,GAAlB,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,uBAAwB1E,IAAKwE,GAExDZ,IAAWe,EAAEC,QACP,kBAAC,GAAD,CAAmBrG,KAAMoG,EAAE9N,KAAMwJ,WAAY,SAAC9B,GAAD,OAAU2F,EAAW3F,EAAMoG,EAAE/N,QAC1E,8BAAO+N,EAAE9N,SAI/B,CACI3B,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GACtE,wCAEJtE,OAAQ,SAACyE,EAAiBH,GAEtB,IAAIK,EAAK,IAAIC,KAAKH,EAAE5N,SAChBgO,EAAOF,EAAGG,cACVC,EAAQJ,EAAGK,WAAa,GAAK,IAAML,EAAGK,WAAaL,EAAGK,WACtDC,EAAMN,EAAGO,SAAW,GAAK,IAAMP,EAAGO,SAAWP,EAAGO,SAEpD,OAAO,wBAAI1D,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAnD,UAA0DO,EAA1D,YAAkEE,EAAlE,YAA2EE,MAI1F,CACIjQ,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,SAAUW,QAAS,OAAQC,WAAY,UAAWtF,IAAKwE,GAC7G,4CACA,kBAAC,GAAD,CAAetN,QAAS,SAACqO,GAAD,OAAQzB,EAAmByB,EAAK,mBAE5DrF,OAAQ,SAACyE,EAAiBH,GAAlB,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAIG,EAAEa,cAEjE,CACItQ,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAnD,UACvBtE,OAAQ,SAACyE,EAAiBH,GAAlB,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAIG,EAAEc,aAEjE,CACIvQ,MAAO,SAACsP,GAAD,OACH,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,mBAAoBgB,UAAW,SAAU1F,IAAKwE,GAC7E,kBAACrE,GAAD,CAAalK,QAAS,IAAKD,QAAS,QAASkB,QAAS,kBAAM8M,EAAW,aAC1D1I,SAAyB,YAAfgE,MAG/BY,OAAQ,SAACyE,EAAiBH,GACtB,OAAO,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,mBAAoBgB,UAAW,SAAU1F,IAAKwE,GACpF,kBAACrE,GAAD,CAAalK,QAAS,OAASiB,QAAS,kBAAMiN,EAAWQ,EAAE/N,IAAK+N,EAAEC,UACrDtJ,SAAyB,YAAfgE,IACvB,kBAACa,GAAD,CAAalK,QAAS,IAAKD,QAAS,MAAQkB,QAAS,kBAAM+M,EAAWU,EAAE/N,MAChE0E,SAAUsI,IAAWe,EAAEC,SAA0B,YAAftF,UAKtD,CAACA,IAEL,OACI,yBAAKlK,UAAWC,KAAQsO,OACpB,yBAAKvO,UAAWC,KAAQsQ,kBAEpB,yBAAKvQ,UAAWC,KAAQuQ,cACpB,sCAEJ,yBAAKxQ,UAAWC,KAAQwQ,aACpB,kBAAC,GAAD,CAAQhP,KAAMuN,EACN5K,MAAO,SACPoI,SAAUR,GAAQ,EAClBC,SAAUE,GAAQ,EAClBO,UAAW,EACXS,gBAAiBA,IACzB,kBAAC,GAAD,CAAO7K,KAAMiM,EACNtE,MAAOiF,EACPhF,WAAYA,KAEvB,6BACI,kBAAC,GAAD,CAAWmD,YAAaoB,EACbd,gBAAiBgB,EACjBf,UAAWA,EACXM,WAAYA,EACZF,gBAAiBA,EACjBD,UAAW,gBC1HpChM,GAAWC,IAAMC,OAAO,CAC1BC,QAJa,sCAKbC,iBAAiB,IAGRuO,GAAW,SACXC,GACL,OAAO5O,GAAS6O,IAAuB,cAAe,CAACD,YAFlDD,GAAW,SAITG,GACP,OAAO9O,GAASM,KAAqC,cAAe,CAACwO,eALhEH,GAAW,SAOTI,GACP,OAAO/O,GAASQ,OAA2C,aAAc,CAACoO,OAAQ,CAACG,SAR9EJ,GAAW,SAUTG,GACP,OAAO9O,GAASgP,IAAwC,cAAe,CAACF,gB,STf3EnH,K,gCAAAA,E,4CAAAA,E,wCAAAA,E,4BAAAA,E,wCAAAA,E,4CAAAA,E,sCAAAA,E,uCAAAA,Q,KAYL,IUZKA,GVYC/G,GAAe,CACjB4L,MAAO,KACPI,oBAAqB,EACrBF,KAAM,EACNb,UAAW,GACX5B,SAAKgF,EACL7E,SAAK6E,EACL9G,WAAY,OACZ+E,aAAc,CACVD,SAAU,GACViC,UAAW,GACXjF,SAAKgF,EACL7E,SAAK6E,IA+BAE,GAAe,SAACzC,GACzB,MAAO,CAACzL,KAAM0G,GAAayH,YAAa7N,QAAS,CAACmL,UAQhD2C,GAAa,SAAC7C,EAA4BI,EAA6B3C,EAAaG,EAAajC,GACnG,MAAO,CAAClH,KAAM0G,GAAa2H,UAAW/N,QAAS,CAACiL,QAAOI,sBAAqB3C,MAAKG,MAAKjC,gBAQ7EoH,GAAkB,SAACpH,GAC5B,MAAO,CAAClH,KAAM0G,GAAa6H,eAAgBjO,QAAS,CAAC4G,gBAS5CsH,GAAa,SAACC,GAAD,8CAA2B,WAAO7N,EAAoBkG,GAA3B,+BAAA9F,EAAA,+DACwB8F,IAAWyE,MAA7EE,EAD0C,EAC1CA,KAAMb,EADoC,EACpCA,UADoC,IACzBqB,aAAeD,EADU,EACVA,SAAUhD,EADA,EACAA,IAAKG,EADL,EACKA,IAAK8E,EADV,EACUA,UAC3DrN,EAAS0N,GAAgB,YAFwB,kBAItBZ,GAAkB,CAACjC,KAAMgD,GAAgBhD,EAAMb,YAAWoB,WAAUhD,MAAKG,MAAK8E,cAJxD,OAIvC/M,EAJuC,OAK7CN,EAASwN,GAAWlN,EAAS5B,KAAKoP,UAC9BxN,EAAS5B,KAAKqM,oBACdzK,EAAS5B,KAAKqP,cACdzN,EAAS5B,KAAKsP,cACd,cACJH,GAAgB7N,EAASsN,GAAaO,IAVO,kDAY7CI,MAAM,KAAE3N,SAAS5B,KAAKQ,OACtBc,EAAS0N,GAAgB,WAboB,sGAA3B,yDWpFpBvP,GAAWC,IAAMC,OAAO,CAC1BC,QAJa,sCAKbC,iBAAiB,IAGR2P,GAAW,SACZnB,GACJ,OAAO5O,GAAS6O,IAAuB,cAAe,CAACD,YAFlDmB,GAAW,SAITC,GACP,OAAOhQ,GAASM,KAA4B,cAAe,CAAC0P,UALvDD,GAAW,SAOThB,GACP,OAAO/O,GAASQ,OAAkC,cAAe,CAACoO,OAAQ,CAACG,SARtEgB,GAAW,SAUTC,GACP,OAAOhQ,GAASgP,IAA+B,cAAe,CAACgB,W,SDflErI,K,gCAAAA,E,4CAAAA,E,4BAAAA,E,wCAAAA,E,4CAAAA,E,sCAAAA,E,gCAAAA,E,yCAAAA,Q,KAYL,IAAM/G,GAAe,CACjBqP,aAAc,GACdC,WAAY,GACZC,MAAO,KACPC,gBAAiB,EACjB1D,KAAM,EACNb,UAAW,GACXwE,cAAUpB,EACVqB,cAAUrB,EACV9G,WAAY,OACZ+E,aAAc,CACVqD,aAAc,GACdC,WAAY,GACZC,UAAW,GACXxG,SAAKgF,EACL7E,SAAK6E,IA+BAyB,GAAoB,SAAChE,GAC9B,MAAO,CAACzL,KAAM0G,GAAayH,YAAa7N,QAAS,CAACmL,UAczCiE,GAAqB,SAACxI,GAC/B,MAAO,CAAClH,KAAM0G,GAAa6H,eAAgBjO,QAAS,CAAC4G,gBAE5CyI,GAAY,SAACX,EAAsBC,GAC5C,MAAO,CAACjP,KAAM0G,GAAakJ,YAAatP,QAAS,CAAC0O,eAAcC,gBASvDY,GAAa,SAACpB,GAAD,8CAA4B,WAAO7N,EAAoBkG,GAA3B,iCAAA9F,EAAA,+DACyC8F,IAAWoI,MAA/FF,EAD2C,EAC3CA,aAAcvD,EAD6B,EAC7BA,KAAMb,EADuB,EACvBA,UADuB,IACZqB,aAAeqD,EADH,EACGA,aAActG,EADjB,EACiBA,IAAKG,EADtB,EACsBA,IAAKqG,EAD3B,EAC2BA,UAC7E5O,EAAS8O,GAAmB,YAFsB,kBAIvBZ,GAAiB,CAACE,eAAcvD,KAAMgD,GAAgBhD,EAAMb,YAAW0E,eAActG,MAAKG,MAAKqG,cAJxE,OAIxCtO,EAJwC,OAM9CN,GA5BYsO,EA4BQhO,EAAS5B,KAAK4P,MA5BEC,EA6BhCjO,EAAS5B,KAAK6P,gBA7B2CC,EA8BzDlO,EAAS5B,KAAK8P,SA9B6DC,EA+B3EnO,EAAS5B,KAAK+P,SA/B+EnI,EAgC7F,YA/BD,CAAClH,KAAM0G,GAAaoJ,UAAWxP,QAAS,CAAC4O,QAAOC,kBAAiBC,WAAUC,WAAUnI,iBAgCxFuH,GAAgB7N,EAAS6O,GAAkBhB,IAXG,kDAe9CI,MAAM,KAAE3N,SAAS5B,KAAKQ,OACtBc,EAAS8O,GAAmB,WAhBkB,wEAtBnC,IAACR,EAAwBC,EAAyBC,EAAkBC,EAAkBnI,IAsBnD,2BAA5B,yDEFX6I,GAvEQrS,IAAMC,MAAK,WAG9B,IAAMqS,EAAUC,cACVrP,EAAWC,cACX0K,EAAQzK,aAAuD,SAAAC,GAAK,OAAIA,EAAMwK,MAAMA,SACpFE,EAAO3K,aAAmC,SAAAC,GAAK,OAAIA,EAAMwK,MAAME,QAC/Db,EAAY9J,aAAmC,SAAAC,GAAK,OAAIA,EAAMwK,MAAMX,aACpEe,EAAsB7K,aAAmC,SAAAC,GAAK,OAAIA,EAAMwK,MAAMI,uBAC9E3C,EAAMlI,aAA+C,SAAAC,GAAK,OAAIA,EAAMwK,MAAMvC,OAC1EG,EAAMrI,aAA+C,SAAAC,GAAK,OAAIA,EAAMwK,MAAMpC,OAC1EqC,EAAS1K,aAA+C,SAAAC,GAAK,uBAAIA,EAAM3C,QAAQF,gBAAlB,aAAI,EAAwBM,OACzF0I,EAAapG,aAAuC,SAAAC,GAAK,OAAIA,EAAMwK,MAAMrE,cACzE+E,EAAgBnL,aAA6C,SAAAC,GAAK,OAAIA,EAAMwK,MAAMU,gBAElFiE,EAAoB3M,uBAAY,SAACuK,GACnClN,EZwEoB,SAACkN,GAAD,8CAAgB,WAAOlN,GAAP,SAAAI,EAAA,6DACxCJ,EAAS0N,GAAgB,YADe,kBAGbZ,GAAoBI,GAHP,cAIpClN,EAAS4N,MAJ2B,gDAMpCK,MAAM,KAAE3N,SAAS5B,KAAKQ,OANc,yDAAhB,sDYxEXqQ,CAAarC,MACvB,IACGsC,EAAoB7M,uBAAY,SAAC9E,GACnCmC,EZ8EoB,SAACnC,GAAD,8CAAkB,WAAOmC,GAAP,SAAAI,EAAA,6DAC1CJ,EAAS0N,GAAgB,YADiB,kBAGfZ,GAAoB,CAACjP,SAHN,cAItCmC,EAAS4N,GAAW,IAJkB,gDAMtC6B,QAAQC,IAAI,aACZzB,MAAM,KAAE3N,SAAS5B,KAAKQ,OAPgB,yDAAlB,sDY9EXyQ,CAAa9R,MACvB,IACG+R,EAAoBjN,uBAAY,SAAC9E,EAAcqP,GACjDlN,EZsFoB,SAACnC,EAAcD,GAAf,8CAA+B,WAAOoC,GAAP,SAAAI,EAAA,6DACvDJ,EAAS0N,GAAgB,YAD8B,kBAG5BZ,GAAoB,CAACjP,OAAMD,QAHC,cAInDoC,EAAS4N,GAAW,IAJ+B,gDAMnDK,MAAM,KAAE3N,SAAS5B,KAAKQ,OAN6B,yDAA/B,sDYtFX2Q,CAAahS,EAAMqP,MAC7B,IACG4C,EAAoBnN,uBAAY,SAACkI,GACnC7K,EAASsN,GAAazC,MACvB,IACGkF,EAAyBpN,uBAAY,SAACqH,GACxChK,EZiByB,SAACgK,GAC9B,MAAO,CAAC5K,KAAM0G,GAAakK,kBAAmBtQ,QAAS,CAACsK,cYlB3CiG,CAAkBjG,MAC5B,IACGkG,EAAyBvN,uBAAY,SAACwN,EAAqB/H,EAAcG,GAC3EvI,EZ0ByB,SAACoL,EAAmBhD,EAAcG,GAC/D,MAAO,CAACnJ,KAAM0G,GAAasK,kBAAmB1Q,QAAS,CAAC0L,WAAUhD,MAAKG,QY3B1D8H,CAAkBF,EAAY/H,EAAKG,MAC7C,IACG+H,EAA4B3N,uBAAY,SAAC0K,GAC3CrN,EZ6B4B,SAACqN,GACjC,MAAO,CAACjO,KAAM0G,GAAayK,eAAgB7Q,QAAS,CAAC2N,cY9BxCmD,CAAqBnD,MAC/B,IACGoD,EAAoB9N,uBAAY,SAAC+N,EAAgBrC,GACnDrO,EAAS+O,GAAU2B,EAAQrC,IAC3Be,EAAQuB,KAAR,iBAAuBD,MACxB,IAMH,OAJAzK,qBAAU,WACNjG,EAAS4N,QACV,CAAC/C,EAAMb,EAAWqB,IAEhBV,GAAsB,SAAbrE,EAKV,kBAAC,GAAD,CAAOqE,MAAOA,EACPC,OAAQA,EACRC,KAAMA,EACNzC,IAAKA,EACLG,IAAKA,EACLyB,UAAWA,EACXqB,aAAcA,EACdN,oBAAqBA,EACrBC,WAAYwE,EACZvE,WAAYqE,EACZpE,WAAY0E,EACZtF,WAAYwF,EACZ3E,WAAYsF,EACZ3F,mBAAoBwF,EACpBlG,gBAAiB2F,EACjBxG,gBAAiB2G,EACjB5J,WAAYA,IApBZ,kBAACX,GAAD,S,oBCmEAiL,GArGoB9T,IAAMC,MAAK,SAACkE,GAAW,IAElDqN,EAKArN,EALAqN,MAAOzD,EAKP5J,EALO4J,KAAMgG,EAKb5P,EALa4P,MAAOC,EAKpB7P,EALoB6P,cACpB9G,EAIA/I,EAJA+I,UAAWuE,EAIXtN,EAJWsN,gBACXwC,EAGA9P,EAHA8P,WAAYC,EAGZ/P,EAHY+P,WAAYC,EAGxBhQ,EAHwBgQ,WAAY3G,EAGpCrJ,EAHoCqJ,WACpCF,EAEAnJ,EAFAmJ,gBAAiBb,EAEjBtI,EAFiBsI,gBAAiBjD,EAElCrF,EAFkCqF,WAClC8B,EACAnH,EADAmH,IAAKG,EACLtH,EADKsH,IAAoBmG,EACzBzN,EADUoK,aAAeqD,aAIvBpD,EAA2BC,mBAAQ,iBAAO,CAC5C,CACIrP,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,oBAAqB1E,IAAKwE,GAChF,4CAEJtE,OAAQ,SAACyE,EAAaH,GAAd,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,uBAAwB1E,IAAKwE,GAExDqF,EACM,kBAAC,GAAD,CAAmBtL,KAAMoG,EAAEuF,SAAU7J,WAAY,SAAC9B,GAAD,OAAU0L,EAAW1L,EAAMoG,EAAE/N,QAC9E,8BAAO+N,EAAEuF,aAI/B,CACIhV,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAnD,WACvBtE,OAAQ,SAACyE,EAAaH,GAAd,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAIG,EAAEwF,UAEjE,CACIjV,MAAO,SAACsP,GAAD,OAAgB,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GACtE,yCAEJtE,OAAQ,SAACyE,EAAaH,GAElB,IAAIK,EAAK,IAAIC,KAAKH,EAAE5N,SAChBgO,EAAOF,EAAGG,cACVC,EAAQJ,EAAGK,WAAa,GAAK,IAAML,EAAGK,WAAaL,EAAGK,WACtDC,EAAMN,EAAGO,SAAW,GAAK,IAAMP,EAAGO,SAAWP,EAAGO,SAEpD,OAAO,wBAAI1D,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAnD,UAA0DO,EAA1D,YAAkEE,EAAlE,YAA2EE,MAI1F,CACIjQ,MAAO,SAACsP,GAAD,OACH,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,SAAUW,QAAS,OAAQC,WAAY,UAAWtF,IAAKwE,GACtF,sCACA,kBAAC,GAAD,CAAetN,QAAS,SAACqO,GAAD,OAAQuE,EAAcvE,EAAO,cAE7DrF,OAAQ,SAACyE,EAAaH,GAAd,OACJ,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,UAAW1E,IAAKwE,GAAIG,EAAEyF,SAEjE,CACIlV,MAAO,SAACsP,GAAD,OACH,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,mBAAoBgB,UAAW,SAAU1F,IAAKwE,GAC7E,kBAACrE,GAAD,CAAalK,QAAS,IAAKD,QAAS,QAASkB,QAAS,kBAAM6S,EAAW,aAC1DzO,UAAWuO,GAAwB,YAAfvK,MAGzCY,OAAQ,SAACyE,EAAaH,GAClB,OAAO,wBAAI9C,MAAO,CAAC+C,MAAO,MAAOC,QAAS,mBAAoBgB,UAAW,SAAU1F,IAAKwE,GACpF,kBAACrE,GAAD,CAAalK,QAAS,IAAKD,QAAS,MAAOkB,QAAS,kBAAM8S,EAAWrF,EAAE/N,MAC1D0E,UAAWuO,GAAwB,YAAfvK,UAK7C,CAACA,EAAYuK,IAEjB,OACI,yBAAKzU,UAAWC,KAAQsO,OACpB,yBAAKvO,UAAWC,KAAQsQ,kBAEpB,yBAAKvQ,UAAWC,KAAQuQ,cACpB,sCAEJ,yBAAKxQ,UAAWC,KAAQwQ,aACpB,kBAAC,GAAD,CAAQhP,KAAM6Q,EACNlO,MAAO,SACPoI,SAAUR,GAAY,EACtBC,SAAUE,GAAY,EACtBO,UAAW,EACXS,gBAAiBA,IACzB,kBAAC,GAAD,CAAO7K,KAAM4P,EACNjI,MAAOiF,EACPhF,WAAYA,KAEvB,6BACI,kBAAC,GAAD,CAAWmD,YAAaoB,EACbd,gBAAiBwE,EACjBvE,UAAWA,EACXM,WAAYA,EACZF,gBAAiBA,EACjBD,UAAW,gBCtC3BkH,GAxEQvU,IAAMC,MAAK,WAI9B,IAAMiD,EAAWC,cACXqO,EAAQpO,aAAmD,SAAAC,GAAK,OAAIA,EAAMmO,MAAMA,SAChFF,EAAelO,aAAmC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMF,gBACvEkD,EAAYpR,aAAmC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMzD,QACpEb,EAAY9J,aAAmC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMtE,aACpEuE,EAAkBrO,aAAmC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMC,mBAC1EnG,EAAMlI,aAA+C,SAAAC,GAAK,OAAIA,EAAMmO,MAAME,YAC1EjG,EAAMrI,aAA+C,SAAAC,GAAK,OAAIA,EAAMmO,MAAMG,YAC1E7D,EAAS1K,aAA+C,SAAAC,GAAK,uBAAIA,EAAM3C,QAAQF,gBAAlB,aAAI,EAAwBM,OACzF0I,EAAapG,aAAuC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMhI,cACzE+E,EAAenL,aAAkD,SAAAC,GAAK,OAAIA,EAAMmO,MAAMjD,gBACtFgD,EAAanO,aAAmC,SAAAC,GAAK,OAAIA,EAAMmO,MAAMD,cAEtEqC,EAAU1L,cAAV0L,OACDtC,IAAiBsC,GACjB1Q,EAAS+O,GAAU2B,EAAQ,KAG/B,IAAMa,EAAoB5O,uBAAY,SAAC6O,GACnCxR,EJ4EoB,SAACwR,GAAD,8CACxB,WAAOxR,GAAP,SAAAI,EAAA,6DACAJ,EAAS8O,GAAmB,YAD5B,kBAG2BZ,GAAoBsD,GAH/C,cAIIxR,EAASiP,MAJb,gDAMIhB,MAAM,KAAE3N,SAAS5B,KAAKQ,OAN1B,yDADwB,sDI5EXuS,CAAaD,MACvB,IACGE,EAAoB/O,uBAAY,SAACuO,GJoFf,IAAC/C,EInFrBnO,GJmFqBmO,EInFC,CAAC+C,YJmFH,uCACxB,WAAOlR,EAAyDkG,GAAhE,eAAA9F,EAAA,6DACAJ,EAAS8O,GAAmB,YACvBV,EAAgBlI,IAAWoI,MAA3BF,aAFL,kBAI2BF,GAAA,eAAwBC,EAAxB,CAA8BC,kBAJzD,cAKIpO,EAASiP,GAAW,IALxB,gDAQIhB,MAAM,KAAE3N,SAAS5B,KAAKQ,OAR1B,yDADwB,4DIlFrB,IACGyS,EAAoBhP,uBAAY,SAAC6O,EAAgBN,GJ8F/B,IAAC/C,EI7FrBnO,GJ6FqBmO,EI7FC,CAAC+C,WAAUtT,IAAK4T,GJ6FlB,uCACxB,WAAOxR,GAAP,SAAAI,EAAA,6DACAJ,EAAS8O,GAAmB,YAD5B,kBAG2BZ,GAAoBC,GAH/C,cAIInO,EAASiP,GAAW,IAJxB,gDAMIhB,MAAM,KAAE3N,SAAS5B,KAAKQ,OAN1B,yDADwB,0DI5FrB,IACG4Q,EAAoBnN,uBAAY,SAACkI,GACnC7K,EAAS6O,GAAkBhE,MAC5B,IACGkF,EAAyBpN,uBAAY,SAACqH,GACxChK,EJiB8B,SAACgK,GACnC,MAAO,CAAC5K,KAAM0G,GAAakK,kBAAmBtQ,QAAS,CAACsK,cIlB3C4H,CAAuB5H,MACjC,IACGkG,EAAyBvN,uBAAY,SAAC+L,EAAuBtG,EAAcG,GAC7EvI,EJuB8B,SAAC0O,EAAuBtG,EAAcG,GACxE,MAAO,CAACnJ,KAAM0G,GAAasK,kBAAmB1Q,QAAS,CAACgP,eAActG,MAAKG,QIxB9DsJ,CAAuBnD,EAActG,EAAKG,MACpD,IACGuJ,EAAuBnP,uBAAY,SAACiM,GACtC5O,EJ6BkC,SAAC4O,GACvC,MAAO,CAACxP,KAAM0G,GAAaiM,gBAAiBrS,QAAS,CAACkP,cI9BzCoD,CAA2BpD,MACrC,IAMH,OAJA3I,qBAAU,WACNjG,EAASiP,QACV,CAACqC,EAAWtH,EAAWqB,EAAc+C,IAEnCA,GAAiBE,GAAwB,SAAfhI,EAI3B,kBAAC,GAAD,CAAOgI,MAAOA,EACPzD,KAAMyG,EACNT,MAAOxC,IAAazD,EACpBxC,IAAKA,EACLG,IAAKA,EACLyB,UAAWA,EACXqB,aAAcA,EACdkD,gBAAiBA,EACjBwC,WAAYW,EACZV,WAAYO,EACZN,WAAYU,EACZrH,WAAYwF,EACZgB,cAAegB,EACf1H,gBAAiB2F,EACjBxG,gBAAiB2G,EACjB5J,WAAYA,IAlBZ,kBAACX,GAAD,SCtCAsM,GAfA,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOhW,KAAM,WAAYiL,OAAQ,kBAAM,kBAAC,GAAD,KAAc,kBAAC,EAAD,UACrD,kBAAC,IAAD,CAAOjL,KAAM,SAAUiL,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOjL,KAAM,YAAaiL,OAAQ,kBAAM,kBAAC,GAAD,SACxC,kBAAC,IAAD,CAAOjL,KAAM,WAAYiL,OAAQ,kBAAM,kBAAC,GAAD,SACvC,kBAAC,IAAD,CAAOjL,KAAM,sBAAuBiL,OAAQ,kBAAM,kBAAC,GAAD,SAClD,kBAAC,IAAD,CAAOjL,KAAM,SAAUiL,OAAQ,kBAAM,kBAAC,GAAD,KAAc,kBAAC,GAAD,UACnD,kBAAC,IAAD,CAAOjL,KAAM,iBAAkBiL,OAAQ,kBAAM,kBAAC,GAAD,KAAc,kBAAC,GAAD,UAC3D,kBAAC,IAAD,CAAOjL,KAAM,IAAKiL,OAAQ,kBAAM,kBAAC,GAAD,KAAc,kBAAC,EAAD,YCP3CgL,GATQ,WACnB,OACI,yBAAK9V,UAAWC,IAAQ8V,MACpB,kBAAC,EAAD,MACA,kBAAC,GAAD,QCOGC,GAXH,WAESnS,cAEjB,OACI,yBAAK7D,UAAU,OACX,kBAAC,GAAD,QCCQiW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCNOC,GAAcC,aAAgB,CACvC7Q,MpCDwB,WAAgE,IAA/D3B,EAA8D,uDAAtDpB,EAAc6T,EAAwC,uCACvF,OAAQA,EAAOxT,MACX,IAAK,oCACD,OAAO,eAAIe,EAAX,CAAkBlB,gBAAiB2T,EAAO3T,kBAC9C,IAAK,6BACD,OAAO,eAAIkB,EAAX,CAAkBnB,UAAW4T,EAAO5T,YACxC,IAAK,uBACD,OAAO,eAAImB,EAAX,CAAkBjB,MAAO0T,EAAO1T,QACpC,QACI,OAAOiB,IoCPfgD,SlCA2B,WAAsF,IAArFhD,EAAoF,uDAAzDpB,GAAc6T,EAA2C,uCAChH,OAAQA,EAAOxT,MACX,KAAKrD,EAAY+H,UACjB,KAAK/H,EAAYiI,WACb,OAAO,eACA7D,EADP,GACiByS,EAAOlT,SAE5B,QACI,OAAOS,IkCPfwE,gB1BJkC,WAA0E,IAAzExE,EAAwE,uDAAhEpB,GAAc6T,EAAkD,uCAC3G,OAAQA,EAAOxT,MACX,IAAK,oCACD,OAAO,eAAIe,EAAX,CAAkBmE,cAAesO,EAAOhU,QAC5C,IAAK,iCACD,OAAO,eAAIuB,EAAX,CAAkBkE,iBAAkBuO,EAAOvO,mBAC/C,IAAK,+BACD,OAAO,eAAIlE,EAAX,CAAkBnB,UAAW4T,EAAO5T,YACxC,QACI,OAAOmB,I0BJf+E,YvBJ8B,WAAsE,IAArE/E,EAAoE,uDAA5DpB,GAAc6T,EAA8C,uCACnG,OAAQA,EAAOxT,MACX,IAAK,4CACD,OAAO,eAAIe,EAAX,CAAkBgF,iBAAkByN,EAAOhU,QAC/C,IAAK,6BACD,OAAO,eAAIuB,EAAX,CAAkBjB,MAAO0T,EAAO1T,QACpC,IAAK,8BACD,OAAO,eAAIiB,EAAX,CAAkBiF,KAAMwN,EAAOrN,OACnC,IAAK,+BACD,OAAO,eAAIpF,EAAX,CAAkBnB,UAAW4T,EAAO5T,YACxC,QACI,OAAOmB,IuBNf3C,QnCF0B,WAAoF,IAAnF2C,EAAkF,uDAAxDpB,EAAc6T,EAA0C,uCAC7G,OAAQA,EAAOxT,MAEX,KAAKrD,EAAY+D,SACb,OAAO,eACAK,EADP,GACiByS,EAAOlT,SAG5B,QACI,OAAOS,ImCNfwK,MnBgBwB,WAAgF,IAA/ExK,EAA8E,uDAAtDpB,GAAc6T,EAAwC,uCACvG,OAAQA,EAAOxT,MACX,KAAK0G,GAAayH,YAClB,KAAKzH,GAAakK,kBAClB,KAAKlK,GAAa+M,gBAClB,KAAK/M,GAAa2H,UAClB,KAAK3H,GAAa6H,eACd,OAAO,eACAxN,EADP,GACiByS,EAAOlT,SAE5B,KAAKoG,GAAagN,gBACd,OAAO,eACA3S,EADP,CACckL,aAAa,eAAKlL,EAAMkL,aAAZ,CAA0BD,SAAUwH,EAAOlT,QAAQ0L,aAEjF,KAAKtF,GAAayK,eAClB,KAAKzK,GAAasK,kBACd,OAAO,eACAjQ,EADP,CACckL,aAAa,eAAKlL,EAAMkL,aAAZ,GAA4BuH,EAAOlT,WAEjE,QACI,OAAOS,ImBnCfmO,MTkBwB,WAAgF,IAA/EnO,EAA8E,uDAAtDpB,GAAc6T,EAAwC,uCACvG,OAAQA,EAAOxT,MACX,KAAK0G,GAAayH,YAClB,KAAKzH,GAAakK,kBAClB,KAAKlK,GAAa6H,eAClB,KAAK7H,GAAakJ,YAClB,KAAKlJ,GAAaoJ,UACd,OAAO,eACA/O,EADP,GACiByS,EAAOlT,SAE5B,KAAKoG,GAAagN,gBACd,OAAO,eACA3S,EADP,CACckL,aAAa,eAAKlL,EAAMkL,aAAZ,CAA0BqD,aAAckE,EAAOlT,QAAQwR,aAErF,KAAKpL,GAAasK,kBAClB,KAAKtK,GAAaiM,gBACd,OAAO,eACA5R,EADP,CACckL,aAAa,eAAKlL,EAAMkL,aAAZ,GAA6BuH,EAAOlT,WAElE,QACI,OAAOS,ISrCf6F,I3CJsB,WAA4E,IAA3E7F,EAA0E,uDAApDpB,EAAc6T,EAAsC,uCACjG,OAAQA,EAAOxT,MACX,KAAKrD,EAAY0D,cAIjB,KAAK1D,EAAY6D,aACb,OAAO,eACAO,EADP,GACiByS,EAAOlT,SAE5B,QACI,OAAOS,M2CHN4S,GAAQC,aAAYN,GAAaO,aAAgBC,OCf9DC,IAASjM,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU6L,MAAOA,IACb,kBAAC,IAAMK,WAAP,KACI,kBAAC,GAAD,SAKdC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7Q,MAAK,SAAA8Q,GACJA,EAAaC,gBAEd7Q,OAAM,SAAA5D,GACLuQ,QAAQvQ,MAAMA,EAAMJ,c","file":"static/js/main.9313a964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__38-aa\",\"register__container\":\"Register_register__container__3LldD\",\"register__form\":\"Register_register__form__1BUgI\",\"register__title\":\"Register_register__title__3UYHq\",\"register__inputs\":\"Register_register__inputs__39dwI\",\"register__buttons\":\"Register_register__buttons__R6uT6\",\"register__error\":\"Register_register__error__2RoUn\",\"register__loading\":\"Register_register__loading__24EIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1-5kW\",\"profile__container\":\"Profile_profile__container__32E_8\",\"profile__title\":\"Profile_profile__title__184h-\",\"profile__info\":\"Profile_profile__info__205Db\",\"profile__buttons\":\"Profile_profile__buttons__ZYrOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2uauU\",\"loading\":\"Login_loading__DRcVj\",\"checkbox\":\"Login_checkbox__22VNC\",\"infoTextRed\":\"Login_infoTextRed__3D3K3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2b9yi\",\"input__label\":\"Input_input__label__1lDak\",\"input__elem\":\"Input_input__elem__2Zzrh\",\"input__error\":\"Input_input__error__2PMc0\",\"inputs__error_text\":\"Input_inputs__error_text__3FrbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restore\":\"Restore_restore__13Bjf\",\"infoTextGreen\":\"Restore_infoTextGreen__2G6FJ\",\"infoTextRed\":\"Restore_infoTextRed__28a17\",\"loading\":\"Restore_loading__3_QQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__CQJI_\",\"infoTextRed\":\"NewPassword_infoTextRed__2ZvXx\",\"infoTextGreen\":\"NewPassword_infoTextGreen__3C5qD\",\"loading\":\"NewPassword_loading__tsGzL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doubleRange\":\"Slider_doubleRange__FWpuu\",\"rangeNum\":\"Slider_rangeNum__3-whB\",\"range\":\"Slider_range__2pAqR\",\"range2\":\"Slider_range2__1YSEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__4Z6yr\",\"packs__container\":\"Packs_packs__container__10omq\",\"packs__title\":\"Packs_packs__title__2-FHM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2tyvk\",\"table__loading\":\"Table_table__loading__qsfzN\",\"table__row_header\":\"Table_table__row_header__3I7da\",\"table__row_data\":\"Table_table__row_data__3i-oQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Cards_packs__167TP\",\"packs__container\":\"Cards_packs__container__1nr1B\",\"packs__title\":\"Cards_packs__title__1LFQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2-To7\",\"leftBlock\":\"Paginator_leftBlock__2JUGx\",\"rightBlock\":\"Paginator_rightBlock__2ATkU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColumnSorting_container__zEKkb\",\"up\":\"ColumnSorting_up__2wXZ2\",\"down\":\"ColumnSorting_down__204t9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__3DieS\",\"active\":\"NavItem_active___rzAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ir3Eb\",\"green\":\"Button_green__3fh93\",\"red\":\"Button_red__1bozl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__2_C5R\",\"ldsFacebook\":\"Preloader_ldsFacebook__RYldd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editable_cell\":\"EditableTableCell_editable_cell__3n6DE\",\"editable_cell__input\":\"EditableTableCell_editable_cell__input__1S_rh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"TableButton_button__imyMp\",\"green\":\"TableButton_green__3URIo\",\"red\":\"TableButton_red__2SmU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniSearch\":\"Search_uniSearch__2Iavf\",\"slider\":\"Search_slider__1Od3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3zo7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Nav_routes__NLzDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2rISc\"};","import {Dispatch} from \"redux\";\r\nimport { authAPI } from \"../../m3-dal/auth-api\";\r\nimport {RootStateType} from \"../store\";\r\nimport {setErrorText, setValueIsLoggedSuccess } from \"./login-reducer\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_APP_ERROR = \"App/SET_APP_ERROR\",\r\n    SET_INIT_APP = \"App/SET_INIT_APP\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    initApp: \"idle\" as StatusType\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_APP_ERROR:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case ACTION_TYPE.SET_INIT_APP:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_APP_ERROR, payload: {error}}\r\n}\r\nexport const setInitAppAC = (initApp: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_INIT_APP, payload: {initApp}}\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setInitAppAC>\r\n\r\n// thunk\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    dispatch(setInitAppAC(\"loading\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    try {\r\n        let response = await authAPI.me()\r\n        dispatch(setProfileUserDataAC(response.data))\r\n        dispatch(setValueIsLoggedSuccess(true))\r\n        dispatch(setInitAppAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setAppErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setInitAppAC(\"failed\"))\r\n        dispatch(setErrorText(e.response ? e.response.data.error : \"unknown error\"))\r\n    }\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.css\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n}\r\n\r\nconst NavItem: React.FC<PropsType> = ({path, title}) => {\r\n    return (\r\n            <NavLink to={path} className={classes.navItem} activeClassName={classes.active}>{title}</NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport NavItem from \"../../common/NavItem/NavItem\";\r\nimport classes from \"./Nav.module.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={classes.routes}>\r\n            <NavItem path={\"/profile\"} title={\"Profile\"}/>\r\n            <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            <NavItem path={\"/register\"} title={\"Registration\"}/>\r\n            <NavItem path={\"/restore\"} title={\"Restore password\"}/>\r\n            <NavItem path={\"/packs\"} title={\"Packs\"}/>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\nimport Nav from \"./Nav/Nav\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={classes.header}>\r\n            <Nav/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const Button = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\n\r\ntype PropsType = {\r\n    userData: UserDataType\r\n    logout: () => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({userData, logout}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.profile__container}>\r\n                <div className={classes.profile__title}>\r\n                    <h3>Profile page</h3>\r\n                </div>\r\n\r\n                <div className={classes.profile__info}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>Id:</th>\r\n                            <td>{userData._id}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Username:</th>\r\n                            <td>{userData.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Email:</th>\r\n                            <td>{userData.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Added:</th>\r\n                            <td>{userData.created}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Packs of cards:</th>\r\n                            <td>{userData.publicCardPacksCount}</td>\r\n                        </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n                <div className={classes.profile__buttons}>\r\n                    <Button onClick={logout} btnName={\"Logout\"} btnType={\"red\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import axios from \"axios\"\r\n\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<UserDataType>(\"/auth/me\")\r\n    },\r\n    logInUserInApp(data: RequestLogInType) {\r\n        return  instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n    logoutUserInApp() {\r\n        return  instance.delete<UserDataType>(`/auth/me`)\r\n    },\r\n    setNewPassword(data: RequestNewPasswordType) {\r\n        return instance.post<NewPasswordResponseType>(`/auth/set-new-password`, data)\r\n    },\r\n    register (data: RequestRegisterType) {\r\n        return instance.post<RegisterResponseType>(\"/auth/register\", data)\r\n    },\r\n    getLinkForResetPassword(value: string) {\r\n        return  instance.post<NewPasswordResponseType>(`/auth/forgot`, {\r\n            email: value,\r\n            from: \"admin\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                    password recovery link: \r\n                    <a href=\"https://osbelkz.github.io/cards#/newPassword/$token$\"> \r\n                    link</a>\r\n                </div>` // после полной заливки на ghp, заменить ссылку на страницу new password on ghp\r\n        })\r\n    }\r\n}\r\n\r\nexport type RequestRegisterType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type RequestLogInType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type RequestNewPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type RequestResetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    \"addedUser\": UserDataType\r\n}\r\n\r\ntype NewPasswordResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    avatar: null | string\r\n}\r\n\r\ntype ErrorType = {\r\n    error: string\r\n    email: string\r\n    in: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type LoginStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoading: false as boolean,\r\n    isLoggedSuccess: false as boolean,\r\n    error: \"\" as string\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-VALUE-IS-LOGGED-SUCCESS\":\r\n            return {...state, isLoggedSuccess: action.isLoggedSuccess}\r\n        case \"login/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        case \"login/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logInUserInAppTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.logInUserInApp({\r\n        email: email,\r\n        password: password,\r\n        rememberMe: rememberMe\r\n    })\r\n        .then(res => {\r\n            dispatch(setProfileUserDataAC({...res.data}))\r\n            dispatch(setValueIsLoggedSuccess(true))\r\n            dispatch(setValueIsLoading(false))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setValueIsLoading(false))\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setErrorText(error))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\nexport const setValueIsLoggedSuccess = (isLoggedSuccess: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOGGED-SUCCESS\", isLoggedSuccess} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"login/SET-ERROR-TEXT\", error} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsLoading>\r\n    | ReturnType<typeof setValueIsLoggedSuccess>\r\n    | ReturnType<typeof setErrorText>\r\n    | ReturnType<typeof setProfileUserDataAC>\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {setAppErrorAC, setInitAppAC} from \"./app-reducer\";\r\nimport {setErrorText, setValueIsLoggedSuccess} from \"./login-reducer\";\r\n\r\n\r\nenum ACTION_TYPE {\r\n    SET_USER = \"Profile/SET_USER\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    userData: null as UserDataType | null\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPE.SET_USER:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nexport const setProfileUserDataAC = (userData: UserDataType | null) => {\r\n    return {type: ACTION_TYPE.SET_USER, payload: {userData}}\r\n}\r\n\r\nexport const logoutUserInAppTC = () =>async (dispatch: Dispatch) => {\r\n    dispatch(setInitAppAC(\"loading\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    try {\r\n        let response = authAPI.logoutUserInApp()\r\n        dispatch(setProfileUserDataAC(null))\r\n        dispatch(setValueIsLoggedSuccess(false))\r\n        dispatch(setInitAppAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setInitAppAC(\"failed\"))\r\n        dispatch(setErrorText(e.response ? e.response.data.error : \"unknown error\"))\r\n    }\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setProfileUserDataAC>\r\n\r\nexport type ProfileStateType = typeof initialState\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRegisterType} from \"../../m3-dal/auth-api\";\r\nimport { StatusType } from \"./app-reducer\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_STATUS = \"SET_STATUS\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    status: \"idle\" as StatusType,\r\n}\r\n\r\nexport const registerReducer = (state: RegisterStateType = initialState, action: ActionsType): RegisterStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_ERROR:\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_ERROR, payload: {error}}\r\n}\r\nexport const setStatusAC = (status: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_STATUS, payload: {status}}\r\n}\r\n\r\nexport type ActionsType =\r\n    ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setStatusAC>\r\n\r\n// thunk\r\n\r\nexport const addUserTC = (data: RequestRegisterType) => async (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC(\"loading\"))\r\n    dispatch(setErrorAC(\"\"))\r\n    try {\r\n        let response = await authAPI.register(data)\r\n        dispatch(setStatusAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setStatusAC(\"failed\"))\r\n        setTimeout(dispatch, 5000, setErrorAC(\"\"))\r\n    }\r\n}\r\n\r\nexport type RegisterStateType = typeof initialState\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { logoutUserInAppTC } from '../../../n1-main/m2-bll/reducers/profileP-reducer';\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\nconst ProfileContainer = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.profile.userData)\r\n\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutUserInAppTC())\r\n    }\r\n\r\n    if(!userData) return <div></div>\r\n\r\n    return <Profile userData={userData} logout={logoutHandler}/>\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import React, {InputHTMLAttributes} from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\ninterface PropsType extends InputHTMLAttributes<HTMLInputElement> {\r\n    label?: string\r\n    errorText?: string\r\n    errorCondition?: boolean\r\n}\r\n\r\nexport const Input = React.memo(\r\n    ({label, errorCondition, errorText, ...rest }: PropsType) => {\r\n\r\n    return (\r\n            <div className={classes.input}>\r\n                <p className={classes.input__label}>{label}</p>\r\n                <input className={`${classes.input__elem} ${errorCondition ? classes.input__error : \"\"}`}\r\n                       {...rest}/>\r\n                {errorCondition ? <div\r\n                    className={classes.inputs__error_text}>{errorText}</div> : null}\r\n            </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Login.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    isLoggedSuccess: boolean,\r\n    isLoading: boolean,\r\n    error: string,\r\n    handleOnSubmit: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Login = React.memo((props: RestorePropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Field is required!\"\r\n            } else if (values.password.length < 8) {\r\n                errors.password = \"Too short password, min 8 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.email, values.password, values.rememberMe)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>Login page</h3>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}\r\n                />\r\n                <Input\r\n                    label={\"Password\"}\r\n                    type={\"password\"}\r\n                    placeholder={\"Please, put your password\"}\r\n                    errorCondition={!!formik.errors.password && formik.touched.password}\r\n                    errorText={formik.errors.password}\r\n                    {...formik.getFieldProps(\"password\")}\r\n\r\n                />\r\n                <Input\r\n                    className={classes.checkbox}\r\n                    label={\"remember me\"}\r\n                    type={\"checkbox\"}\r\n                    checked={formik.values.rememberMe}\r\n                    {...formik.getFieldProps(\"rememberMe\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Login\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n            </form>\r\n            {props.error && <div className={classes.infoTextRed}>{props.error}</div>}\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Login;\r\n","import React, {useCallback} from 'react';\r\nimport Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {logInUserInAppTC} from \"../../../n1-main/m2-bll/reducers/login-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.login.isLoading)\r\n    const error = useSelector<RootStateType, string>(state => state.login.error)\r\n\r\n    const handleOnSubmit = useCallback((email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInUserInAppTC(email, password,rememberMe))\r\n    }, []\r\n    )\r\n\r\n    if (isLoggedSuccess) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            isLoading={isLoading}\r\n            isLoggedSuccess={isLoggedSuccess}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {Input} from '../../../n1-main/m1-ui/common/Input/Input';\r\nimport classes from \"./Register.module.css\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {RequestRegisterType} from \"../../../n1-main/m3-dal/auth-api\";\r\nimport { StatusType } from '../../../n1-main/m2-bll/reducers/app-reducer';\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: RequestRegisterType) => void\r\n    error: string\r\n    status: StatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    password2?: string\r\n}\r\n\r\nconst Register: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 7) {\r\n                errors.password = \"Must be 7 or more characters\"\r\n            }\r\n            if (values.password !== values.password2) {\r\n                errors.password2 = \"Passwords does not match\"\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            props.onSubmit({email: values.email, password: values.password})\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.register}>\r\n            <div className={classes.register__container}>\r\n                <form className={classes.register__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.register__title}>\r\n                        <h3>Registration</h3>\r\n                    </div>\r\n                    <div className={classes.register__inputs}>\r\n                        <Input label={\"Email\"}\r\n                               errorCondition={!!formik.errors.email && formik.touched.email}\r\n                               placeholder={\"email\"}\r\n                               errorText={formik.errors.email}\r\n                               {...formik.getFieldProps(\"email\")}/>\r\n                        <Input label={\"Password\"}\r\n                               errorCondition={!!formik.errors.password && formik.touched.password}\r\n                               type={\"password\"}\r\n                               placeholder={\"password\"}\r\n                               errorText={formik.errors.password}\r\n                               {...formik.getFieldProps(\"password\")}/>\r\n                        <Input label={\"Repeat password\"}\r\n                               errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                               type={\"password\"}\r\n                               errorText={formik.errors.password2}\r\n                               placeholder={\"confirm password\"}\r\n                               {...formik.getFieldProps(\"password2\")} />\r\n                    </div>\r\n                    <div className={classes.register__buttons}>\r\n                        <Button btnName={\"Join\"} btnType={\"green\"} type={\"submit\"}\r\n                                disabled={!formik.isValid || (props.status === \"loading\")}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    {props.error && <div className={classes.register__error}>{props.error}</div>}\r\n                    {props.status === \"loading\" && <div className={classes.register__loading}>...Loading</div>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Register;\r\n","import React, {useCallback} from 'react';\r\nimport Register from \"./Register\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addUserTC} from \"../../../n1-main/m2-bll/reducers/register-reducer\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { RequestRegisterType } from '../../../n1-main/m3-dal/auth-api';\r\nimport { StatusType } from '../../../n1-main/m2-bll/reducers/app-reducer';\r\n\r\nconst RegisterContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<RootStateType, string>(state => state.register.error)\r\n    const status = useSelector<RootStateType, StatusType>(state => state.register.status)\r\n\r\n\r\n    const onSubmitHandler = useCallback((values: RequestRegisterType) => {\r\n        dispatch(addUserTC(values))\r\n    }, [])\r\n\r\n    if (status===\"succeeded\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <Register onSubmit={onSubmitHandler} error={error} status={status}/>\r\n    );\r\n};\r\n\r\nexport default RegisterContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Restore.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    textAfterRequest: string,\r\n    isSentSuccess: boolean,\r\n    isLoading: boolean,\r\n    handleOnSubmit: (value: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst Restore = React.memo((props: RestorePropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.email)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.restore}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>Restore password page</h3>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Send email\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            </form>\r\n            {props.textAfterRequest && <div className={\r\n                props.isSentSuccess ? classes.infoTextGreen : classes.infoTextRed\r\n            }>{props.textAfterRequest}</div>}\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Restore;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type RestorePasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSentSuccess: false as boolean,\r\n    textAfterRequest: \"\" as string,\r\n    isLoading: false as boolean\r\n}\r\n\r\nexport const restorePasswordReducer = (state = initialState, action: ActionsType): RestorePasswordStateType => {\r\n    switch (action.type) {\r\n        case \"restore/SET-VALUE-IS-SENT-SUCCESS\":\r\n            return {...state, isSentSuccess: action.value}\r\n        case \"restore/SET-TEXT-AFTER-REQUEST\":\r\n            return {...state, textAfterRequest: action.textAfterRequest}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const restoreTC = (value: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.getLinkForResetPassword(value)\r\n        .then(res => {\r\n            dispatch(setValueIsSentSuccess(true))\r\n            dispatch(setRestoreTextAfterRequest(res.data.info))\r\n            dispatch(setValueIsLoading(false))\r\n        })\r\n        .catch((error: {response: {data: {error: string}}})=> {\r\n            dispatch(setRestoreTextAfterRequest(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setRestoreTextAfterRequest(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSentSuccess = (value: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-SENT-SUCCESS\", value} as const)\r\n\r\nexport const setRestoreTextAfterRequest = (textAfterRequest: string) =>\r\n    ({type: \"restore/SET-TEXT-AFTER-REQUEST\", textAfterRequest} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSentSuccess>\r\n    | ReturnType<typeof setRestoreTextAfterRequest>\r\n    | ReturnType<typeof setValueIsLoading>\r\n\r\n","import React, {useCallback} from 'react';\r\nimport Restore from \"./Restore\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {restoreTC} from \"../../../n1-main/m2-bll/reducers/restorePassword-reducer\";\r\n\r\nconst RestoreContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const textAfterRequest = useSelector<RootStateType, string>(state => state.restorePassword.textAfterRequest)\r\n    const isSentSuccess = useSelector<RootStateType, boolean>(state => state.restorePassword.isSentSuccess)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.restorePassword.isLoading)\r\n\r\n    const handleOnSubmit = useCallback((value: string) => {\r\n        dispatch(restoreTC(value))\r\n        }, []\r\n    )\r\n\r\n    return (\r\n        <Restore\r\n            textAfterRequest={textAfterRequest}\r\n            isSentSuccess={isSentSuccess}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RestoreContainer;\r\n","import React from \"react\";\r\nimport classes from \"./NewPassword.module.css\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\ntype NewPasswordPropsType = {\r\n    isSetNewPassword: boolean\r\n    error: string\r\n    isOk: string\r\n    isLoading: boolean\r\n    handleOnSubmit: (value: string, token: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password1?: string\r\n    password2?: string\r\n}\r\n\r\n\r\nconst NewPassword = React.memo((props: NewPasswordPropsType) => {\r\n    // console.log(props.isSetNewPassword, props.isOk)\r\n    const {token}  = useParams<{token: string}>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password1: \"\",\r\n            password2: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password1) {\r\n                errors.password1 = \"Field is required!\"\r\n            } else if (values.password1.length < 8) {\r\n                errors.password1 = \"Too short password, min 8 symbols\"\r\n            }\r\n            if (!values.password2) {\r\n                errors.password2 = \"Field is required!\"\r\n            } else if (values.password2.length < 8) {\r\n                errors.password2 = \"Too short password, min 8 symbols\"\r\n            } else if (values.password1 !== values.password2) {\r\n                errors.password2 = \"Both fields must be equal!\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.handleOnSubmit(values.password1, token)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.newPassword}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <h3>New password page</h3>\r\n                <Input\r\n                    label={\"Password\"}\r\n                    placeholder={\"Please, put new password\"}\r\n                    errorCondition={!!formik.errors.password1 && formik.touched.password1}\r\n                    errorText={formik.errors.password1}\r\n                    {...formik.getFieldProps(\"password1\")}\r\n\r\n                />\r\n                <Input\r\n                    label={\"Password\"}\r\n                    placeholder={\"Put new password again\"}\r\n                    errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                    errorText={formik.errors.password2}\r\n                    {...formik.getFieldProps(\"password2\")}\r\n                />\r\n                <div className={classes.btn}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Set new password\"}\r\n                        disabled={props.isLoading}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            </form>\r\n            {!props.isSetNewPassword && props.error\r\n                ? <div className={classes.infoTextRed}>{props.error}</div>\r\n                : \"\"\r\n            }\r\n            {props.isSetNewPassword && props.isOk\r\n                ? <div className={classes.infoTextGreen}>{props.isOk}</div>\r\n                : \"\"\r\n            }\r\n            {props.isLoading && <div className={classes.loading}>...Loading</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default NewPassword;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type NewPasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSetNewPassword: false as boolean,\r\n    error: \"\" as string,\r\n    isOk: \"\" as string,\r\n    isLoading: false as boolean\r\n}\r\n\r\nexport const newPasswordReducer = (state = initialState, action: ActionsType): NewPasswordStateType => {\r\n    switch (action.type) {\r\n        case \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\":\r\n            return {...state, isSetNewPassword: action.value}\r\n        case \"newPassword/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        case \"newPassword/SET-VALUE-IS-OK\":\r\n            return {...state, isOk: action.text}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setNewPasswordTC = (newPassword: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.setNewPassword({\r\n        password: newPassword,\r\n        resetPasswordToken: token\r\n    })\r\n        .then(res => {\r\n            dispatch(setValueIsSetNewPassword(true))\r\n            dispatch(setValueIsOk(res.data.info))\r\n            dispatch(setValueIsLoading(false))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorText(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSetNewPassword = (value: boolean) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\", value} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"newPassword/SET-ERROR-TEXT\", error} as const)\r\n\r\nexport const setValueIsOk = (text: string) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-OK\", text} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSetNewPassword>\r\n    | ReturnType<typeof setErrorText>\r\n    | ReturnType<typeof setValueIsOk>\r\n    | ReturnType<typeof setValueIsLoading>\r\n","import React, {useCallback} from 'react';\r\nimport NewPassword from \"./NewPassword\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {setNewPasswordTC} from \"../../../n1-main/m2-bll/reducers/newPassword-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NewPasswordContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isSetNewPassword = useSelector<RootStateType, boolean>(state => state.newPassword.isSetNewPassword)\r\n    const error = useSelector<RootStateType, string>(state => state.newPassword.error)\r\n    const isOk = useSelector<RootStateType, string>(state => state.newPassword.isOk)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.newPassword.isLoading)\r\n\r\n    const handleOnSubmit = useCallback((newPassword: string, token: string) => {\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }, []\r\n    )\r\n\r\n    if (isSetNewPassword) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <NewPassword\r\n            isSetNewPassword={isSetNewPassword}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isOk={isOk}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPasswordContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Preloader.module.scss\";\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.ldsFacebook}>\r\n                <div></div><div></div><div></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n//\r\n","import React, {useEffect} from 'react';\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../m2-bll/store\";\r\nimport {authMeTC, StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\nconst AuthRedirect: React.FC = (props) => {\r\n    const dispatch = useDispatch();\r\n    const initApp = useSelector<RootStateType, StatusType>(state => state.app.initApp)\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n\r\n\r\n    useEffect(() => {\r\n        if (initApp === \"idle\" && !isLoggedSuccess) {\r\n            dispatch(authMeTC())\r\n        }\r\n    }, [initApp, isLoggedSuccess])\r\n\r\n    if (initApp === \"loading\" || initApp === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthRedirect;\r\n","import {CardPackType, packsApi} from \"../../m3-dal/packs-api\"\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\n\r\nenum ACTION_TYPES {\r\n    CHANGE_PAGE = \"packs/CHANGE_PAGE\",\r\n    CHANGE_PAGE_COUNT = \"packs/CHANGE_PAGE_COUNT\",\r\n    SET_TOTAL_COUNT = \"packs/SET_TOTAL_COUNT\",\r\n    SET_PACKS = \"packs/SET_PACKS\",\r\n    SET_SEARCH_NAME = \"packs/SET_SEARCH_NAME\",\r\n    SET_SEARCH_PARAMS = \"packs/SET_SEARCH_PARAMS\",\r\n    SET_IS_LOADING = \"packs/SET_IS_LOADING\",\r\n    SET_SORT_PACKS = \"packs/SET_SORT_PACKS\"\r\n}\r\n\r\n\r\nconst initialState = {\r\n    packs: null as Array<CardPackType> | null,\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    min: undefined as undefined | number,\r\n    max: undefined as undefined | number,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        packName: \"\" as string | undefined,\r\n        sortPacks: \"\" as string | undefined,\r\n        min: undefined as undefined | number,\r\n        max: undefined as undefined | number,\r\n    }\r\n}\r\n\r\nexport const packsReducer = (state: PacksStateType = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.CHANGE_PAGE:\r\n        case ACTION_TYPES.CHANGE_PAGE_COUNT:\r\n        case ACTION_TYPES.SET_TOTAL_COUNT:\r\n        case ACTION_TYPES.SET_PACKS:\r\n        case ACTION_TYPES.SET_IS_LOADING:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_NAME:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, packName: action.payload.packName}\r\n            }\r\n        case ACTION_TYPES.SET_SORT_PACKS:\r\n        case ACTION_TYPES.SET_SEARCH_PARAMS:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams,...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport const changePageAC = (page: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE, payload: {page}} as const\r\n}\r\nexport const changePageCountAC = (pageCount: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE_COUNT, payload: {pageCount}} as const\r\n}\r\nconst setTotalCountAC = (cardPacksTotalCount: number) => {\r\n    return {type: ACTION_TYPES.SET_TOTAL_COUNT, payload: {cardPacksTotalCount}} as const\r\n}\r\nconst setPacksAC = (packs: Array<CardPackType>, cardPacksTotalCount: number, min: number, max: number, pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_PACKS, payload: {packs, cardPacksTotalCount, min, max, pageStatus}} as const\r\n}\r\nexport const setSearchNameAC = (packName: string) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_NAME, payload: {packName}} as const\r\n}\r\nexport const setSearchParamsAC = (packName?: string, min?: number, max?: number) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_PARAMS, payload: {packName, min, max}} as const\r\n}\r\nexport const setPageStatusAC = (pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_IS_LOADING, payload: {pageStatus}} as const\r\n}\r\nexport const setPacksSortColumnAC = (sortPacks: string) => {\r\n    return {type: ACTION_TYPES.SET_SORT_PACKS, payload: {sortPacks}} as const\r\n}\r\n\r\n\r\n// thunks\r\n\r\nexport const getPacksTC = (selectedPage?: number) => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    const {page, pageCount, searchParams: {packName, min, max, sortPacks}} = getState().packs\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.getPacks({page: selectedPage || page, pageCount, packName, min, max, sortPacks})\r\n        dispatch(setPacksAC(response.data.cardPacks,\r\n            response.data.cardPacksTotalCount,\r\n            response.data.minCardsCount,\r\n            response.data.maxCardsCount,\r\n            \"succeeded\"))\r\n        selectedPage && dispatch(changePageAC(selectedPage))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n        dispatch(setPageStatusAC(\"failed\"))\r\n    } finally {\r\n\r\n    }\r\n}\r\nexport const deletePackTC = (id: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.deletePack(id)\r\n        dispatch(getPacksTC())\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\nexport const createPackTC = (name: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.createPack({name})\r\n        dispatch(getPacksTC(1))\r\n    } catch (e) {\r\n        console.log(\"create tc\")\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\n//under construction\r\nexport const updatePackTC = (name: string, _id: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.updatePack({name, _id})\r\n        dispatch(getPacksTC(1))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\n\r\ntype PacksStateType = typeof initialState\r\nexport type SearchParamsType = typeof initialState.searchParams\r\n\r\n\r\ntype ActionsType = ReturnType<typeof changePageAC>\r\n    | ReturnType<typeof changePageCountAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setSearchNameAC>\r\n    | ReturnType<typeof setSearchParamsAC>\r\n    | ReturnType<typeof setPageStatusAC>\r\n    | ReturnType<typeof setPacksSortColumnAC>\r\n","import React, {ReactNode} from 'react';\r\nimport classes from \"./Table.module.scss\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\n\r\nexport interface ITableModel {\r\n    title: (index: number) => JSX.Element;\r\n    render: (dataItem: any, modelIndex: number, dataIndex: number) => JSX.Element;\r\n}\r\n\r\ninterface ITableProps {\r\n    model: ITableModel[];\r\n    data: any;\r\n    pageStatus: StatusType\r\n}\r\n\r\nconst Table: React.FC<ITableProps> = React.memo(({model, data, pageStatus}) => {\r\n\r\n    // console.log(\"table\")\r\n\r\n    return (\r\n        <table className={`${classes.table} ${pageStatus===\"loading\" ? classes.table__loading : \"\"}`}>\r\n            <thead>\r\n            <tr className={classes.table__row_header}>\r\n                {model.map((m: ITableModel, index: number) => m.title(index))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {data.map((dataItem: any, dataIndex: number) => (\r\n                <tr className={classes.table__row_data} key={dataItem._id}>\r\n                    {model.map((m, modelIndex) => m.render(dataItem, modelIndex, dataIndex))}\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n})\r\n\r\nexport default Table;\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./TableButton.module.scss\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const TableButton = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import classes from './EditableTableCell.module.scss';\r\nimport React, {useState} from 'react';\r\nimport { TableButton } from '../TableButton/TableButton';\r\n\r\n\r\ntype PropsType = {\r\n    text: string\r\n    changeText: (text: string) => void\r\n}\r\n\r\nconst EditableTableCell:React.FC<PropsType> = ({text, changeText}) => {\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [editableText, setEditableText] = useState(text)\r\n\r\n    const changeTextHandler = () => {\r\n        setEdit(false)\r\n        if (text !== editableText) {\r\n            changeText(editableText)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.editable_cell}>\r\n            {edit\r\n                ? <input className={classes.editable_cell__input}\r\n                    type=\"text\"\r\n                         onChange={(e)=>setEditableText(e.target.value)}\r\n                         onBlur={changeTextHandler}\r\n                         autoFocus\r\n                         value={editableText}\r\n                />\r\n                : <div onDoubleClick={()=>setEdit(true)}>{editableText}</div>\r\n            }\r\n            <TableButton btnName={\"edit\"} onClick={()=>setEdit(true)}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditableTableCell;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Slider.module.scss\";\r\n\r\ntype SliderPropsType = {\r\n    setMin:(value: number) => void\r\n    setMax:(value: number) => void\r\n    min: number\r\n    max: number\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n}\r\n\r\nexport const Slider = (props: SliderPropsType) => {\r\n\r\n    const rangeHandler1 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMin(value)\r\n        if (props.max <= value) {\r\n            props.setMax(value)\r\n        }\r\n    }\r\n\r\n    const rangeHandler2 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMax(value)\r\n        if (props.min >= value) {\r\n            props.setMin(value)\r\n        }\r\n    }\r\n\r\n    let leftMin = props.min / (props.maxValue/100) - 2.5\r\n    let leftMax = props.max / (props.maxValue/100) - 2.5\r\n\r\n    return <div className={classes.doubleRange}>\r\n        <div>\r\n            <div\r\n                className={classes.rangeNum}\r\n                style={{left: `${leftMin}%`}}\r\n            >\r\n                {props.min}\r\n            </div>\r\n            <input\r\n                type={\"range\"}\r\n                min={props.minValue}\r\n                max={props.maxValue}\r\n                step={props.stepValue}\r\n                value={props.min}\r\n                className={classes.range}\r\n                onChange={rangeHandler1}\r\n            />\r\n        </div>\r\n\r\n        <div\r\n            className={classes.rangeNum}\r\n            style={{left: `${leftMax}%`}}\r\n        >\r\n            {props.max}\r\n        </div>\r\n        <input\r\n            type={\"range\"}\r\n            min={props.minValue}\r\n            max={props.maxValue}\r\n            step={props.stepValue}\r\n            value={props.max}\r\n            className={classes.range}\r\n            onChange={rangeHandler2}\r\n        />\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./Search.module.scss\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Slider} from \"../Slider/Slider\";\r\n\r\ntype SearchPropsType = {\r\n    name: string | undefined\r\n    label: string\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n    setSearchParams: (searchName?: string, min?: number, max?: number) => void\r\n}\r\n\r\nexport const Search = (props: SearchPropsType) => {\r\n\r\n    const [name, setName] = useState(props.name)\r\n    const [min, setMin] = useState(props.minValue)\r\n    const [max, setMax] = useState(props.maxValue)\r\n    const inputOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return <div className={classes.uniSearch}>\r\n        <h3>{props.label}</h3>\r\n        <Input\r\n            value={name}\r\n            onChange={inputOnChangeHandler}\r\n        />\r\n        <div className={classes.slider}>\r\n            <Slider\r\n                setMin={setMin}\r\n                setMax={setMax}\r\n                min={min}\r\n                max={max}\r\n                minValue={props.minValue}\r\n                maxValue={props.maxValue}\r\n                stepValue={props.stepValue}\r\n            />\r\n        </div>\r\n            <Button\r\n                btnName={\"Search\"}\r\n                onClick={() => {\r\n                    props.setSearchParams(name, min, max)\r\n                }}\r\n            />\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./Paginator.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    itemsTotalCount: number\r\n    pageCount: number\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    itemsName: string\r\n}\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    const [pageNumber, setPageNumber] = useState(props.currentPage)\r\n    let pageAmount = Math.ceil(props.itemsTotalCount / props.pageCount)\r\n\r\n    const pageCountChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.changePageCount(value)\r\n    }\r\n    const onePreviousPage = () => {\r\n        props.changePage(pageNumber - 1)\r\n        setPageNumber(pageNumber - 1)\r\n    }\r\n    const pageChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPageNumber(+e.currentTarget.value)\r\n    }\r\n    const pageSetHandler = () => {\r\n        if (pageNumber < 1) {\r\n            props.changePage(1)\r\n            setPageNumber(1)\r\n        } else if (pageNumber > pageAmount) {\r\n            props.changePage(pageAmount)\r\n            setPageNumber(pageAmount)\r\n        } else {\r\n            props.changePage(pageNumber)\r\n        }\r\n    }\r\n    const oneNextPage = () => {\r\n        props.changePage(pageNumber + 1)\r\n        setPageNumber(pageNumber + 1)\r\n    }\r\n\r\n    return <div className={classes.paginator}>\r\n        <div className={classes.leftBlock}>\r\n            {`Total ${props.itemsName}: ${props.itemsTotalCount}. ${props.itemsName} per page:`}\r\n            <select onChange={pageCountChangeHandler} value={props.pageCount}>\r\n                <option>10</option>\r\n                <option>20</option>\r\n                <option>50</option>\r\n                <option>100</option>\r\n            </select>\r\n        </div>\r\n        <div className={classes.rightBlock}>\r\n            <Button\r\n                btnName={`Prev`}\r\n                onClick={onePreviousPage}\r\n                disabled={props.currentPage < 2}\r\n            />\r\n            {`Page: `}\r\n            {pageNumber < 1}\r\n            <Input type={\"number\"}\r\n                   value={pageNumber}\r\n                   step={1} min={1}\r\n                   max={pageAmount}\r\n                   onChange={pageChangeHandler}\r\n                   onBlur={pageSetHandler}\r\n            />\r\n            of {pageAmount}\r\n            <Button\r\n                btnName={`Next`}\r\n                onClick={oneNextPage}\r\n                disabled={props.currentPage === pageAmount}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./ColumnSorting.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype ColumnSortingPropsType = {\r\n    onClick: (value: number) => void\r\n}\r\n\r\nexport const ColumnSorting = (props: ColumnSortingPropsType) => {\r\n    const upChangeHandler = () => {\r\n        props.onClick(1)\r\n    }\r\n    const downChangeHandler = () => {\r\n        props.onClick(0)\r\n    }\r\n\r\n    return <div className={classes.container}>\r\n        <Button\r\n            btnName={\"⇑\"}\r\n            className={classes.up}\r\n            onClick={upChangeHandler}\r\n        />\r\n        <Button\r\n            btnName={\"⇓\"}\r\n            className={classes.down}\r\n            onClick={downChangeHandler}\r\n        />\r\n    </div>\r\n}\r\n","import classes from './Packs.module.scss';\r\nimport React, {useMemo} from 'react';\r\nimport {CardPackType} from \"../../../n1-main/m3-dal/packs-api\";\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport EditableTableCell from '../../../n1-main/m1-ui/common/Table/EditableTableCell/EditableTableCell';\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport { TableButton } from '../../../n1-main/m1-ui/common/Table/TableButton/TableButton';\r\nimport {SearchParamsType} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\nimport CardsContainer from \"../c2-cards/CardsContainer\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\n\r\ntype PropsType = {\r\n    packs: Array<CardPackType> | null\r\n    userId: string | undefined\r\n    page: number\r\n    pageCount: number\r\n    min: number | undefined\r\n    max: number | undefined\r\n    cardPacksTotalCount: number\r\n    searchParams: SearchParamsType\r\n    deletePack: (id: string) => void\r\n    createPack: (name: string) => void\r\n    updatePack: (name: string, id: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName?: string, min?: number, max?: number) => void\r\n    choosePack: (packId: string, cardsOwner: string) => void\r\n    setPacksSortColumn: (sortPacks: string) => void\r\n    pageStatus: StatusType\r\n}\r\n\r\nconst Packs: React.FC<PropsType> = React.memo((props) => {\r\n    let {packs, userId, page, setPacksSortColumn,\r\n        pageCount, cardPacksTotalCount, createPack,\r\n        deletePack, updatePack, changePage, choosePack,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {packName}\r\n    } = props\r\n    // console.log(\"packs\")\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", padding: \"10px 0 10px 20px\"}} key={i}>\r\n                <div>Name</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"30%\", padding: \"10px 10px 10px 20px\"}} key={i}>\r\n                    {\r\n                        userId === d.user_id\r\n                            ? <EditableTableCell text={d.name} changeText={(text) => updatePack(text, d._id)}/>\r\n                            : <span>{d.name}</span>\r\n                    }\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\", padding: \"10px 0\"}} key={i}>\r\n                <div>Added</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => {\r\n\r\n                let dm = new Date(d.created)\r\n                let year = dm.getFullYear()\r\n                let month = dm.getMonth() < 10 ? \"0\" + dm.getMonth() : dm.getMonth()\r\n                let day = dm.getDay() < 10 ? \"0\" + dm.getDay() : dm.getDay()\r\n\r\n                return <td style={{width: \"15%\", padding: \"10px 0\"}} key={i}>{`${year}-${month}-${day}`}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"10%\", padding: \"10px 0\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                <div>Cards count</div>\r\n                <ColumnSorting onClick={(sort)=>setPacksSortColumn(sort+\"cardsCount\")}/>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"10%\", padding: \"10px 0\"}} key={i}>{d.cardsCount}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"25%\", padding: \"10px 0\"}} key={i}>Owner</th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"25%\", padding: \"10px 0\"}} key={i}>{d.user_name}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", padding: \"10px 20px 10px 0\", textAlign: \"right\"}} key={i}>\r\n                    <TableButton btnName={\"+\"} btnType={\"green\"} onClick={() => createPack(\"new pack\")}\r\n                                 disabled={pageStatus === \"loading\"}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardPackType, i: number) => {\r\n                return <td style={{width: \"15%\", padding: \"10px 20px 10px 0\", textAlign: \"right\"}} key={i}>\r\n                    <TableButton btnName={\"open\"}  onClick={() => choosePack(d._id, d.user_id)}\r\n                                 disabled={pageStatus === \"loading\"}/>\r\n                    <TableButton btnName={\"x\"} btnType={\"red\"}  onClick={() => deletePack(d._id)}\r\n                            disabled={userId !== d.user_id || pageStatus === \"loading\"}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus]);\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n\r\n                <div className={classes.packs__title}>\r\n                    <h3>Packs</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Search name={packName}\r\n                            label={\"Search\"}\r\n                            minValue={min?min:0}\r\n                            maxValue={max?max:0}\r\n                            stepValue={1}\r\n                            setSearchParams={setSearchParams}/>\r\n                    <Table data={packs}\r\n                           model={testModel}\r\n                           pageStatus={pageStatus}/>\r\n                </div>\r\n                <div>\r\n                    <Paginator currentPage={page}\r\n                               itemsTotalCount={cardPacksTotalCount}\r\n                               pageCount={pageCount}\r\n                               changePage={changePage}\r\n                               changePageCount={changePageCount}\r\n                               itemsName={\"packs\"} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Packs;\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const packsApi = {\r\n    getPacks(params: QueryParamsPacksType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/pack\", {params})\r\n    },\r\n    createPack(cardsPack: CreateCardPackType) {\r\n        return instance.post<{ newCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete<{ deletedCardsPack: CardPackType }>(\"cards/pack\", {params: {id}})\r\n    },\r\n    updatePack(cardsPack: {name: string, _id: string}) {\r\n        return instance.put<{ updatedCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    }\r\n}\r\n\r\ntype QueryParamsPacksType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n\r\n}\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string // папка\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: \"pack\" | \"folder\" // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    cardsCount: number\r\n    more_id: string\r\n    private: boolean\r\n    user_name: string\r\n}\r\n\r\ntype CreateCardPackType = {\r\n    name?: string // если не отправить будет таким\r\n    path?: string // если не отправить будет такой\r\n    grade?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    deckCover?: string // не обязателен\r\n    private?: boolean // если не отправить будет такой\r\n    type?: \"pack\" | \"folder\" // если не отправить будет таким\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport {cardsApi, CardType, CreateCardType} from \"../../m3-dal/cards-api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nenum ACTION_TYPES {\r\n    CHANGE_PAGE = \"cards/CHANGE_PAGE\",\r\n    CHANGE_PAGE_COUNT = \"cards/CHANGE_PAGE_COUNT\",\r\n    SET_CARDS = \"cards/SET_CARDS\",\r\n    SET_SEARCH_NAME = \"cards/SET_SEARCH_NAME\",\r\n    SET_SEARCH_PARAMS = \"cards/SET_SEARCH_PARAMS\",\r\n    SET_IS_LOADING = \"cards/SET_IS_LOADING\",\r\n    SET_PACK_ID =  \"cards/SET_PACK_ID\",\r\n    SET_SORT_COLUMN =  \"cards/SET_SORT_COLUMN\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    cardsPack_id: \"\" as string,\r\n    cardsOwner: \"\",\r\n    cards: null as Array<CardType> | null,\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    minGrade: undefined as undefined | number,\r\n    maxGrade: undefined as undefined | number,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        cardQuestion: \"\" as undefined | string,\r\n        cardAnswer: \"\" as undefined | string,\r\n        sortCards: \"\" as undefined | string,\r\n        min: undefined as undefined | number,\r\n        max: undefined as undefined | number,\r\n    }\r\n}\r\n\r\nexport const cardsReducer = (state: CardsStateType = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.CHANGE_PAGE:\r\n        case ACTION_TYPES.CHANGE_PAGE_COUNT:\r\n        case ACTION_TYPES.SET_IS_LOADING:\r\n        case ACTION_TYPES.SET_PACK_ID:\r\n        case ACTION_TYPES.SET_CARDS:\r\n            return {\r\n                ...state, ...action.payload,\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_NAME:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, cardQuestion: action.payload.question}\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_PARAMS:\r\n        case ACTION_TYPES.SET_SORT_COLUMN:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, ...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport const changeCardsPageAC = (page: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE, payload: {page}} as const\r\n}\r\nexport const changeCardsPageCountAC = (pageCount: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE_COUNT, payload: {pageCount}} as const\r\n}\r\nconst setCardsAC = (cards: Array<CardType>, cardsTotalCount: number, minGrade: number, maxGrade: number, pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_CARDS, payload: {cards, cardsTotalCount, minGrade, maxGrade, pageStatus}} as const\r\n}\r\nexport const setCardsSearchQuestionAC = (question: string) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_NAME, payload: {question}} as const\r\n}\r\nexport const setCardsSearchParamsAC = (cardQuestion?: string, min?: number, max?: number) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_PARAMS, payload: {cardQuestion, min, max}} as const\r\n}\r\nexport const setCardsPageStatus = (pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_IS_LOADING, payload: {pageStatus}} as const\r\n}\r\nexport const setPackAC = (cardsPack_id: string, cardsOwner: string) => {\r\n    return {type: ACTION_TYPES.SET_PACK_ID, payload: {cardsPack_id, cardsOwner}} as const\r\n}\r\nexport const setCardsSortColumnParamsAC = (sortCards: string) => {\r\n    return {type: ACTION_TYPES.SET_SORT_COLUMN, payload: {sortCards}} as const\r\n}\r\n\r\n\r\n// thunks\r\n\r\nexport const getCardsTC = (selectedPage?: number ) => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    const {cardsPack_id, page, pageCount, searchParams: {cardQuestion, min, max, sortCards}} = getState().cards\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.getPack({cardsPack_id, page: selectedPage || page, pageCount, cardQuestion, min, max, sortCards})\r\n        // console.log(response.data)\r\n        dispatch(setCardsAC(response.data.cards,\r\n            response.data.cardsTotalCount,\r\n            response.data.minGrade,\r\n            response.data.maxGrade,\r\n            \"succeeded\"))\r\n        selectedPage && dispatch(changeCardsPageAC(selectedPage))\r\n        // console.log(getState().cards)\r\n    } catch (e) {\r\n        // console.log(\"get packs tc\")\r\n        alert(e.response.data.error)\r\n        dispatch(setCardsPageStatus(\"failed\"))\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (cardId: string) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.deleteCard(cardId)\r\n        dispatch(getCardsTC())\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\nexport const createCardTC = (card: CreateCardType) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>, getState: () => RootStateType) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    let {cardsPack_id} = getState().cards\r\n    try {\r\n        const response = await cardsApi.createCard({...card, cardsPack_id})\r\n        dispatch(getCardsTC(1))\r\n    } catch (e) {\r\n        // console.log(\"create tc\")\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\n//under construction\r\nexport const updateCardTC = (card: { question: string, _id: string }) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.updateCard(card)\r\n        dispatch(getCardsTC(1))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\n\r\ntype CardsStateType = typeof initialState\r\nexport type CardsSearchParamsType = typeof initialState.searchParams\r\n\r\n\r\ntype ActionsType = ReturnType<typeof changeCardsPageAC>\r\n    | ReturnType<typeof changeCardsPageCountAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCardsSearchQuestionAC>\r\n    | ReturnType<typeof setCardsSearchParamsAC>\r\n    | ReturnType<typeof setCardsPageStatus>\r\n    | ReturnType<typeof setPackAC>\r\n    | ReturnType<typeof setCardsSortColumnParamsAC>\r\n\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsApi = {\r\n    getPack(params: QueryParamsCardsType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/card\", {params})\r\n    },\r\n    createCard(card: CreateCardType) {\r\n        return instance.post<{ newCard: CardType }>(\"/cards/card\", {card})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<{ deletedCard: CardType }>(\"/cards/card\", {params: {id}})\r\n    },\r\n    updateCard(card: UpdateCardType) {\r\n        return instance.put<{ updatedCard: CardType }>(\"/cards/card\", {card})\r\n    }\r\n}\r\n\r\ntype QueryParamsCardsType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    sortCards?: string\r\n    min?: number\r\n    max?: number\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    \"cards\": CardType[],\r\n    \"cardsTotalCount\": number,\r\n    \"minGrade\": number,\r\n    \"maxGrade\": number,\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n    \"token\": string,\r\n    \"tokenDeathTime\": number\r\n\r\n}\r\nexport type CardType = {\r\n    _id: string\r\n    user_id: string\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    \"type\": \"card\"\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    more_id: string\r\n    cardsPack_id: string,\r\n    answer: string,\r\n    question: string,\r\n    comments: string,\r\n}\r\n\r\nexport type CreateCardType = {\r\n    cardsPack_id?: string\r\n    question?: string // если не отправить будет таким\r\n    answer?: string // если не отправить будет таким\r\n    grade?: number // 0..5, не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    answerImg?: string // не обязателен\r\n    questionImg?: string // не обязателен\r\n    questionVideo?: string // не обязателен\r\n    answerVideo?: string // не обязателен\r\n    type?: \"card\"\r\n}\r\nexport type UpdateCardType = {\r\n    question?: string,\r\n    answer?: string,\r\n    _id: string\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Packs from \"./Packs\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {CardPackType} from \"../../../n1-main/m3-dal/packs-api\";\r\nimport {\r\n    changePageAC,\r\n    changePageCountAC,\r\n    createPackTC,\r\n    deletePackTC,\r\n    getPacksTC, SearchParamsType, setPacksSortColumnAC, setSearchParamsAC,\r\n    updatePackTC\r\n} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {setPackAC} from \"../../../n1-main/m2-bll/reducers/cards-reducer\";\r\nimport {useHistory, useParams } from 'react-router-dom';\r\n\r\n\r\nconst PacksContainer = React.memo(() => {\r\n\r\n    // console.log(\"packs container\")\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<RootStateType, Array<CardPackType> | null>(state => state.packs.packs)\r\n    const page = useSelector<RootStateType, number>(state => state.packs.page)\r\n    const pageCount = useSelector<RootStateType, number>(state => state.packs.pageCount)\r\n    const cardPacksTotalCount = useSelector<RootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const min = useSelector<RootStateType, number | undefined>(state => state.packs.min)\r\n    const max = useSelector<RootStateType, number | undefined>(state => state.packs.max)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.profile.userData?._id)\r\n    const pageStatus = useSelector<RootStateType, StatusType>(state => state.packs.pageStatus)\r\n    const searchParams  = useSelector<RootStateType, SearchParamsType>(state => state.packs.searchParams)\r\n\r\n    const deletePackHandler = useCallback((id: string) => {\r\n        dispatch(deletePackTC(id))\r\n    }, [])\r\n    const createPackHandler = useCallback((name: string) => {\r\n        dispatch(createPackTC(name))\r\n    }, [])\r\n    const updatePackHandler = useCallback((name: string, id: string) => {\r\n        dispatch(updatePackTC(name, id))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changePageAC(page))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changePageCountAC(pageCount))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((searchName?: string, min?: number, max?: number) => {\r\n        dispatch(setSearchParamsAC(searchName, min, max))\r\n    }, [])\r\n    const setPacksSortColumnHandler = useCallback((sortPacks: string) => {\r\n        dispatch(setPacksSortColumnAC(sortPacks))\r\n    }, [])\r\n    const choosePackHandler = useCallback((packId: string, cardsOwner: string) => {\r\n        dispatch(setPackAC(packId, cardsOwner))\r\n        history.push(`/cards/${packId}`)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [page, pageCount, searchParams])\r\n\r\n    if (!packs || pageStatus===\"idle\") {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Packs packs={packs}\r\n               userId={userId}\r\n               page={page}\r\n               min={min}\r\n               max={max}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardPacksTotalCount={cardPacksTotalCount}\r\n               createPack={createPackHandler}\r\n               deletePack={deletePackHandler}\r\n               updatePack={updatePackHandler}\r\n               changePage={changePageHandler}\r\n               choosePack={choosePackHandler}\r\n               setPacksSortColumn={setPacksSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n        />\r\n    );\r\n})\r\n\r\nexport default PacksContainer;\r\n","import classes from './Cards.module.scss';\r\nimport React, {useMemo} from 'react';\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport EditableTableCell from '../../../n1-main/m1-ui/common/Table/EditableTableCell/EditableTableCell';\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport {TableButton} from '../../../n1-main/m1-ui/common/Table/TableButton/TableButton';\r\nimport {CardsSearchParamsType} from '../../../n1-main/m2-bll/reducers/cards-reducer';\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\n\r\ntype PropsType = {\r\n    cards: Array<CardType> | null\r\n    owner: boolean\r\n    page: number\r\n    pageCount: number\r\n    min: number | undefined\r\n    max: number | undefined\r\n    cardsTotalCount: number\r\n    searchParams: CardsSearchParamsType\r\n    deleteCard: (id: string) => void\r\n    createCard: (question: string) => void\r\n    updateCard: (cardId: string, question: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName?: string, min?: number, max?: number) => void\r\n    pageStatus: StatusType\r\n    setSortColumn: (sortCards: string) => void\r\n}\r\n\r\nconst Cards: React.FC<PropsType> = React.memo((props) => {\r\n    let {\r\n        cards, page, owner, setSortColumn,\r\n        pageCount, cardsTotalCount,\r\n        createCard, deleteCard, updateCard, changePage,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {cardQuestion}\r\n    } = props\r\n    // console.log(\"packs\")\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", padding: \"10px 0 10px 20px\"}} key={i}>\r\n                <span>Question</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\", padding: \"10px 10px 10px 20px\"}} key={i}>\r\n                    {\r\n                        owner\r\n                            ? <EditableTableCell text={d.question} changeText={(text) => updateCard(text, d._id)}/>\r\n                            : <span>{d.question}</span>\r\n                    }\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", padding: \"10px 0\"}} key={i}>Answer</th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\", padding: \"10px 0\"}} key={i}>{d.answer}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\", padding: \"10px 0\"}} key={i}>\r\n                <span>Added</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => {\r\n\r\n                let dm = new Date(d.created)\r\n                let year = dm.getFullYear()\r\n                let month = dm.getMonth() < 10 ? \"0\" + dm.getMonth() : dm.getMonth()\r\n                let day = dm.getDay() < 10 ? \"0\" + dm.getDay() : dm.getDay()\r\n\r\n                return <td style={{width: \"15%\", padding: \"10px 0\"}} key={i}>{`${year}-${month}-${day}`}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", padding: \"10px 0\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                    <div>Grade</div>\r\n                    <ColumnSorting onClick={(sort)=>setSortColumn(sort + \"grade\")}/>\r\n                </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"15%\", padding: \"10px 0\"}} key={i}>{d.grade}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", padding: \"10px 20px 10px 0\", textAlign: \"right\"}} key={i}>\r\n                    <TableButton btnName={\"+\"} btnType={\"green\"} onClick={() => createCard(\"new card\")}\r\n                                 disabled={!owner || pageStatus === \"loading\"}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardType, i: number) => {\r\n                return <td style={{width: \"10%\", padding: \"10px 20px 10px 0\", textAlign: \"right\"}} key={i}>\r\n                    <TableButton btnName={\"x\"} btnType={\"red\"} onClick={() => deleteCard(d._id)}\r\n                                 disabled={!owner || pageStatus === \"loading\"}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus, owner]);\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n\r\n                <div className={classes.packs__title}>\r\n                    <h3>Cards</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Search name={cardQuestion}\r\n                            label={\"Search\"}\r\n                            minValue={min ? min : 0}\r\n                            maxValue={max ? max : 0}\r\n                            stepValue={1}\r\n                            setSearchParams={setSearchParams}/>\r\n                    <Table data={cards}\r\n                           model={testModel}\r\n                           pageStatus={pageStatus}/>\r\n                </div>\r\n                <div>\r\n                    <Paginator currentPage={page}\r\n                               itemsTotalCount={cardsTotalCount}\r\n                               pageCount={pageCount}\r\n                               changePage={changePage}\r\n                               changePageCount={changePageCount}\r\n                               itemsName={\"cards\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Cards;\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Cards from \"./Cards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {\r\n    CardsSearchParamsType, changeCardsPageAC, changeCardsPageCountAC, createCardTC,\r\n    deleteCardTC,\r\n    getCardsTC, setCardsSearchParamsAC, setCardsSortColumnParamsAC, setPackAC, updateCardTC\r\n} from \"../../../n1-main/m2-bll/reducers/cards-reducer\";\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CardsContainer = React.memo(() => {\r\n\r\n    // console.log(\"cards container\")\r\n\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<RootStateType, Array<CardType> | null>(state => state.cards.cards)\r\n    const cardsPack_id = useSelector<RootStateType, string>(state => state.cards.cardsPack_id)\r\n    const cardsPage = useSelector<RootStateType, number>(state => state.cards.page)\r\n    const pageCount = useSelector<RootStateType, number>(state => state.cards.pageCount)\r\n    const cardsTotalCount = useSelector<RootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const min = useSelector<RootStateType, number | undefined>(state => state.cards.minGrade)\r\n    const max = useSelector<RootStateType, number | undefined>(state => state.cards.maxGrade)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.profile.userData?._id)\r\n    const pageStatus = useSelector<RootStateType, StatusType>(state => state.cards.pageStatus)\r\n    const searchParams = useSelector<RootStateType, CardsSearchParamsType>(state => state.cards.searchParams)\r\n    const cardsOwner = useSelector<RootStateType, string>(state => state.cards.cardsOwner)\r\n\r\n    let {packId} = useParams<{packId: string}>()\r\n    if (cardsPack_id !== packId) {\r\n        dispatch(setPackAC(packId, \"\"))\r\n    }\r\n    // console.log(cardsOwner, userId)\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCardTC(cardId))\r\n    }, [])\r\n    const createCardHandler = useCallback((question: string) => {\r\n        dispatch(createCardTC({question}))\r\n    }, [])\r\n    const updateCardHandler = useCallback((cardId: string, question: string) => {\r\n        dispatch(updateCardTC({question, _id: cardId}))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changeCardsPageAC(page))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changeCardsPageCountAC(pageCount))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((cardQuestion?: string, min?: number, max?: number) => {\r\n        dispatch(setCardsSearchParamsAC(cardQuestion, min, max))\r\n    }, [])\r\n    const setSortColumnHandler = useCallback((sortCards: string) => {\r\n        dispatch(setCardsSortColumnParamsAC(sortCards))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC())\r\n    }, [cardsPage, pageCount, searchParams, cardsPack_id])\r\n\r\n    if (!cardsPack_id || !cards || pageStatus === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <Cards cards={cards}\r\n               page={cardsPage}\r\n               owner={cardsOwner===userId}\r\n               min={min}\r\n               max={max}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardsTotalCount={cardsTotalCount}\r\n               createCard={createCardHandler}\r\n               deleteCard={deleteCardHandler}\r\n               updateCard={updateCardHandler}\r\n               changePage={changePageHandler}\r\n               setSortColumn={setSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n        />\r\n    );\r\n})\r\n\r\nexport default CardsContainer;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport ProfileContainer from \"../../../n2-features/f1-auth/a5-profile/ProfileContainer\";\r\nimport LoginContainer from \"../../../n2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RegisterContainer from \"../../../n2-features/f1-auth/a2-register/RegisterContainer\";\r\nimport RestoreContainer from \"../../../n2-features/f1-auth/a3-restore/RestoreContainer\";\r\nimport NewPasswordContainer from \"../../../n2-features/f1-auth/a4-new-password/NewPasswordContainer\";\r\nimport AuthRedirect from \"../common/AuthRedirect/AuthRedirect\";\r\nimport PacksContainer from \"../../../n2-features/f2-cards/c1-packs/PacksContainer\";\r\nimport CardsContainer from \"../../../n2-features/f2-cards/c2-cards/CardsContainer\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={\"/profile\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n            <Route path={\"/login\"} render={() => <LoginContainer/>}/>\r\n            <Route path={\"/register\"} render={() => <RegisterContainer/>}/>\r\n            <Route path={\"/restore\"} render={() => <RestoreContainer/>}/>\r\n            <Route path={\"/newPassword/:token\"} render={() => <NewPasswordContainer/>}/>\r\n            <Route path={\"/packs\"} render={() => <AuthRedirect><PacksContainer/></AuthRedirect>}/>\r\n            <Route path={\"/cards/:packId\"} render={() => <AuthRedirect><CardsContainer/></AuthRedirect>}/>\r\n            <Route path={\"/\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport classes from \"./Main.module.css\";\r\nimport Routes from \"../Routes/Routes\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <div className={classes.main}>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './Main/Main';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {newPasswordReducer} from \"./reducers/newPassword-reducer\";\r\nimport {profileReducer} from \"./reducers/profileP-reducer\";\r\nimport {registerReducer} from \"./reducers/register-reducer\";\r\nimport {restorePasswordReducer} from \"./reducers/restorePassword-reducer\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {packsReducer} from \"./reducers/packs-reducer\";\r\nimport { cardsReducer } from \"./reducers/cards-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}