{"version":3,"sources":["n2-features/f1-auth/a1-login/Login.module.scss","n2-features/f3-learn/l1-practice/Practice.module.scss","n2-features/f1-auth/a3-restore/Restore.module.scss","n2-features/f1-auth/a4-new-password/NewPassword.module.scss","n2-features/f1-auth/a2-register/Register.module.scss","n1-main/m1-ui/common/ModalWindows/Modal.module.scss","n1-main/m1-ui/common/Table/GeneralBTN/GeneralBTN.module.scss","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Slider/Slider.module.scss","n1-main/m1-ui/Header/Nav/Nav.module.css","n2-features/f1-auth/a5-profile/Profile.module.css","n2-features/f2-cards/c1-packs/Packs.module.scss","n1-main/m1-ui/common/Table/Table.module.scss","n2-features/f2-cards/c2-cards/Cards.module.scss","n1-main/m1-ui/common/Paginator/Paginator.module.scss","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.module.scss","n1-main/m1-ui/common/Page404/PageNotFound.module.css","n1-main/m1-ui/common/NavItem/NavItem.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Preloader/Preloader.module.scss","n1-main/m1-ui/common/Search/Search.module.scss","n1-main/m1-ui/common/Table/TableButton/TableButton.module.scss","n1-main/m1-ui/common/ModalWindows/OneInputModal/OneInputModal.module.scss","n1-main/m1-ui/common/ModalWindows/ThreeInputModal/ThreeInputModal.module.scss","n1-main/m1-ui/Main/Main.module.css","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModal.module.scss","n3-assets/Pencil-Outline.svg","n3-assets/Folder-Outline.svg","n3-assets/Fitness_Fill.svg","n3-assets/Trash-Outline.svg","n1-main/m1-ui/common/Checkbox/Checkbox.module.scss","n1-main/m2-bll/reducers/app-reducer.ts","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/reducers/login-reducer.ts","n1-main/m2-bll/reducers/profileP-reducer.ts","n1-main/m2-bll/reducers/register-reducer.ts","n1-main/m1-ui/common/NavItem/NavItem.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/Header/Nav/Nav.tsx","n1-main/m1-ui/Header/Header.tsx","n2-features/f1-auth/a5-profile/Profile.tsx","n2-features/f1-auth/a5-profile/ProfileContainer.tsx","n1-main/m1-ui/common/Input/Input.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a1-login/LoginContainer.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a2-register/RegisterContainer.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n1-main/m2-bll/reducers/restorePassword-reducer.ts","n2-features/f1-auth/a3-restore/RestoreContainer.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m2-bll/reducers/newPassword-reducer.ts","n2-features/f1-auth/a4-new-password/NewPasswordContainer.tsx","n1-main/m1-ui/common/Preloader/Preloader.tsx","n1-main/m1-ui/common/AuthRedirect/AuthRedirect.tsx","n1-main/m2-bll/reducers/packs-reducer.ts","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/Slider/Slider.tsx","n1-main/m1-ui/common/Search/Search.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.tsx","n1-main/m1-ui/common/ModalWindows/Modal.tsx","n1-main/m1-ui/common/Table/TableButton/TableButton.tsx","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModal.tsx","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModalContainer.tsx","n1-main/m1-ui/common/ModalWindows/OneInputModal/OneInputModal.tsx","n1-main/m1-ui/common/Table/GeneralBTN/GeneralBTN.tsx","n1-main/m1-ui/common/Table/PackButtonsBlock.tsx","n1-main/m1-ui/common/Table/AddPackBlock.tsx","n1-main/m1-ui/common/Checkbox/Checkbox.tsx","n2-features/f2-cards/c1-packs/Packs.tsx","n1-main/m3-dal/packs-api.ts","n1-main/m2-bll/reducers/cards-reducer.ts","n1-main/m3-dal/cards-api.ts","n1-main/m2-bll/reducers/practice-reducer.tsx","n2-features/f2-cards/c1-packs/PacksContainer.tsx","n1-main/m1-ui/common/ModalWindows/ThreeInputModal/ThreeInputModal.tsx","n1-main/m1-ui/common/Table/CardButtonsBlock.tsx","n1-main/m1-ui/common/Table/AddCardBlock.tsx","n2-features/f2-cards/c2-cards/Cards.tsx","n2-features/f2-cards/c2-cards/CardsContainer.tsx","n1-main/m1-ui/common/Page404/PageNotFound.tsx","n2-features/f3-learn/l1-practice/Practice.tsx","n2-features/f3-learn/l1-practice/PracticeContainer.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","ACTION_TYPE","instance","axios","create","baseURL","withCredentials","authAPI","post","data","delete","value","email","from","message","initialState","isLoading","isLoggedSuccess","error","setValueIsLoading","type","setValueIsLoggedSuccess","setErrorText","initApp","setAppErrorAC","SET_APP_ERROR","payload","setInitAppAC","SET_INIT_APP","userData","setProfileUserDataAC","SET_USER","NavItem","path","title","to","className","classes","navItem","activeClassName","active","Button","React","memo","btnType","btnName","rest","buttonClasses","button","NavLogOut","logOut","NavLogIn","logout","logIn","links","onClick","Header","dispatch","useDispatch","useSelector","state","profile","logoutHandler","useCallback","a","e","response","profile__container","profile__title","profile__info","_id","name","created","publicCardPacksCount","ProfileContainer","Input","label","errorCondition","errorText","input","input__label","input__elem","input__error","inputs__error_text","Login","handleOnSubmit","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","login","login__container","login__form","handleSubmit","login__title","login__inputs","placeholder","touched","getFieldProps","login__checkbox","id","checkbox","checked","htmlFor","login__buttons","disabled","isValid","resetForm","infoTextRed","loading","LoginContainer","then","res","catch","setTimeout","logInUserInAppTC","Register","status","password2","register","register__container","register__form","register__title","register__inputs","register__buttons","register__error","register__loading","setErrorAC","SET_ERROR","setStatusAC","SET_STATUS","RegisterContainer","onSubmitHandler","Restore","isSentSuccess","textAfterRequest","restore","restore__container","restore__form","restore__title","restore__inputs","restore__buttons","infoTextGreen","setValueIsSentSuccess","setRestoreTextAfterRequest","RestoreContainer","restorePassword","info","restoreTC","NewPassword","isOk","isSetNewPassword","token","useParams","password1","newPassword","newPassword__container","newPassword__form","newPassword__title","newPassword__inputs","newPassword__buttons","setValueIsSetNewPassword","setValueIsOk","text","NewPasswordContainer","resetPasswordToken","setNewPasswordTC","Preloader","container","ldsFacebook","ACTION_TYPES","AuthRedirect","props","app","useEffect","getState","children","Table","model","table","table__loading","table__row_header","map","m","index","dataItem","dataIndex","table__row_data","key","modelIndex","render","Slider","leftMin","min","maxValue","leftMax","max","doubleRange","rangeNum","style","left","minValue","step","stepValue","range","onChange","currentTarget","setMin","setMax","Search","setSearchParams","useState","searchValue","setSearchValue","inputOnChangeHandler","onSearchClick","uniSearch","slider","Paginator","currentPage","pageCount","changePageCount","changePage","itemsName","itemsTotalCount","pageNumber","setPageNumber","pageAmount","Math","ceil","pageSetHandler","paginator","leftBlock","rightBlock","onBlur","onKeyPress","ColumnSorting","pageStatus","up","down","Modal","setActive","modal","modalContent","modalContentActive","stopPropagation","TableButton","QuestionModal","setAnswerY","setAnswerN","questionModal","right","QuestionModalContainer","activate","setActivate","OneInputModal","closeButton","inputModal","marginLeft","setValues","GeneralBTN","svg","editSVG","openSVG","trainSVG","green","removeSVG","red","src","alt","PackButtonsBlock","updatePack","choosePack","startLearn","deletePack","owner","pack","showEditModal","setShowEditModal","showDeletePackModal","setShowDeletePackModal","cardsCount","user_id","AddPackBlock","createPack","showCreatePackModal","setShowCreatePackModal","Checkbox","Packs","packs","userId","page","setPacksSortColumn","cardPacksTotalCount","searchParams","packName","setGettingMyPacks","sortCardsCount","sort","testModel","useMemo","i","width","paddingLeft","whiteSpace","d","moment","format","display","alignItems","user_name","paddingRight","textAlign","minHeight","packs__container","packs__title","packs__body","packsApi","params","get","cardsPack","put","getMyPacks","sortPacks","changePageAC","CHANGE_PAGE","setPacksAC","SET_PACKS","setPageStatusAC","SET_IS_LOADING","setUserIdAC","SET_USER_ID","getPacksTC","selectedPage","cardPacks","minCardsCount","maxCardsCount","alert","cardsApi","card","cardsPack_id","cardsOwner","cards","cardsTotalCount","minGrade","maxGrade","cardQuestion","cardAnswer","sortCards","changeCardsPageAC","setCardsPageStatus","setPackAC","SET_PACK_ID","getCardsTC","SET_CARDS","PacksContainer","history","useHistory","deletePackHandler","deletePackTC","createPackHandler","createPackTC","updatePackHandler","updatePackTC","changePageHandler","changePageCountHandler","CHANGE_PAGE_COUNT","changePageCountAC","setSearchParamsHandler","searchName","SET_SEARCH_PARAMS","setSearchParamsAC","setPacksSortColumnHandler","SET_SORT_PACKS","setPacksSortColumnAC","choosePackHandler","packId","push","startLearnHandler","checkboxValue","ThreeInputModal","firstInputValue","secondInputValue","thirdInputValue","console","log","question","answer","comment","CardButtonsBlock","deleteCard","updateCard","showDeleteModal","setShowDeleteModal","comments","AddCardBlock","createCard","showCreateModal","setShowCreateModal","Cards","setSortColumn","sortGrade","grade","toFixed","CardsContainer","deleteCardHandler","cardId","deleteCardTC","createCardHandler","updateCardHandler","changeCardsPageCountAC","setCardsSearchParamsAC","setSortColumnHandler","SET_SORT_COLUMN","setCardsSortColumnParamsAC","PageNotFound","wrap","subtitle","grades","Practice","gradeCard","onNext","isChecked","setIsChecked","onGradeButtonHandler","practice","practice__container","transform","card__inner","card__front","card__text","card__back","card__back_bottom","g","card__next_btn","cardIsLoading","setPracticePageStatus","setCardIsLoadingAC","SET_CARD_IS_LOADING","updateCardGradeAC","card_id","shots","UPDATE_GRADE","updateGradeTC","updatedGrade","getCard","sum","reduce","acc","rand","random","newSum","PracticeContainer","setCard","setPracticePackAC","gradeCardHandler","onNextHandler","Routes","exact","Main","main","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","SET_TOTAL_COUNT","SET_SEARCH_NAME","store","configureStore","reducer","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b914399.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__wZFJO\",\"login__container\":\"Login_login__container__2RiFi\",\"login__form\":\"Login_login__form__1oQF8\",\"login__inputs\":\"Login_login__inputs__ltC67\",\"login__checkbox\":\"Login_login__checkbox__3DmST\",\"login__buttons\":\"Login_login__buttons__vdiUC\",\"loading\":\"Login_loading__31U9z\",\"checkbox\":\"Login_checkbox__DfSwd\",\"infoTextRed\":\"Login_infoTextRed__1QnOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"practice\":\"Practice_practice__1lW-o\",\"practice__container\":\"Practice_practice__container__2vbk_\",\"practice__title\":\"Practice_practice__title__1Pa1D\",\"card\":\"Practice_card__1fHzN\",\"card__inner\":\"Practice_card__inner__3I_Qa\",\"card__front\":\"Practice_card__front__3nePh\",\"card__back\":\"Practice_card__back__3-eua\",\"card__next_btn\":\"Practice_card__next_btn__2CDSY\",\"card__text\":\"Practice_card__text__1Cekt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restore\":\"Restore_restore__Qt9OF\",\"restore__container\":\"Restore_restore__container__DbDYU\",\"restore__form\":\"Restore_restore__form__1RfxB\",\"restore__inputs\":\"Restore_restore__inputs__AIHLA\",\"restore__buttons\":\"Restore_restore__buttons__3URYh\",\"infoTextGreen\":\"Restore_infoTextGreen__3SE_5\",\"infoTextRed\":\"Restore_infoTextRed__1H9hi\",\"loading\":\"Restore_loading__xj32h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__3DqU1\",\"newPassword__container\":\"NewPassword_newPassword__container__m-yCZ\",\"newPassword__form\":\"NewPassword_newPassword__form__2OlrG\",\"newPassword__inputs\":\"NewPassword_newPassword__inputs__34B_D\",\"newPassword__buttons\":\"NewPassword_newPassword__buttons__11RvK\",\"infoTextRed\":\"NewPassword_infoTextRed__3ZAHA\",\"infoTextGreen\":\"NewPassword_infoTextGreen__1mFv-\",\"loading\":\"NewPassword_loading__3hwTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__2OoZ1\",\"register__container\":\"Register_register__container__20Y9Z\",\"register__form\":\"Register_register__form__tCvBa\",\"register__inputs\":\"Register_register__inputs__WISn5\",\"register__buttons\":\"Register_register__buttons__1xdWp\",\"register__error\":\"Register_register__error__1lW52\",\"register__loading\":\"Register_register__loading__2Href\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1HKqi\",\"modalContent\":\"Modal_modalContent__3u9Ne\",\"modalContentActive\":\"Modal_modalContentActive__3sorC\",\"active\":\"Modal_active__EvCwF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GeneralBTN_button__313Ge\",\"green\":\"GeneralBTN_green__S8XQZ\",\"red\":\"GeneralBTN_red__zHUK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2b9yi\",\"input__label\":\"Input_input__label__1lDak\",\"input__elem\":\"Input_input__elem__2Zzrh\",\"input__error\":\"Input_input__error__2PMc0\",\"inputs__error_text\":\"Input_inputs__error_text__3FrbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doubleRange\":\"Slider_doubleRange__FWpuu\",\"rangeNum\":\"Slider_rangeNum__3-whB\",\"range\":\"Slider_range__2pAqR\",\"range2\":\"Slider_range2__1YSEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logOut\":\"Nav_logOut__2whTu\",\"logIn\":\"Nav_logIn__3jg9I\",\"links\":\"Nav_links__2xOKb\",\"button\":\"Nav_button__3ETpC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1-5kW\",\"profile__container\":\"Profile_profile__container__32E_8\",\"profile__title\":\"Profile_profile__title__184h-\",\"profile__info\":\"Profile_profile__info__205Db\",\"profile__buttons\":\"Profile_profile__buttons__ZYrOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__4Z6yr\",\"packs__container\":\"Packs_packs__container__10omq\",\"packs__title\":\"Packs_packs__title__2-FHM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2tyvk\",\"table__loading\":\"Table_table__loading__qsfzN\",\"table__row_header\":\"Table_table__row_header__3I7da\",\"table__row_data\":\"Table_table__row_data__3i-oQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Cards_packs__167TP\",\"packs__container\":\"Cards_packs__container__1nr1B\",\"packs__title\":\"Cards_packs__title__1LFQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2-To7\",\"leftBlock\":\"Paginator_leftBlock__2JUGx\",\"rightBlock\":\"Paginator_rightBlock__2ATkU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColumnSorting_container__zEKkb\",\"up\":\"ColumnSorting_up__2wXZ2\",\"down\":\"ColumnSorting_down__204t9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PageNotFound_wrap__20qaz\",\"title\":\"PageNotFound_title__1japc\",\"subtitle\":\"PageNotFound_subtitle__1u3wU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__3DieS\",\"active\":\"NavItem_active___rzAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ir3Eb\",\"green\":\"Button_green__3fh93\",\"red\":\"Button_red__1bozl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__2_C5R\",\"ldsFacebook\":\"Preloader_ldsFacebook__RYldd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniSearch\":\"Search_uniSearch__2Iavf\",\"slider\":\"Search_slider__1Od3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"TableButton_button__imyMp\",\"green\":\"TableButton_green__3URIo\",\"red\":\"TableButton_red__2SmU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeButton\":\"OneInputModal_closeButton__3EBwW\",\"inputModal\":\"OneInputModal_inputModal__30rtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeButton\":\"ThreeInputModal_closeButton__22RAh\",\"inputModal\":\"ThreeInputModal_inputModal__39AW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2rISc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionModal\":\"QuestionModal_questionModal__cV3J1\"};","module.exports = __webpack_public_path__ + \"static/media/Pencil-Outline.042251b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/Folder-Outline.bbf08363.svg\";","module.exports = __webpack_public_path__ + \"static/media/Fitness_Fill.5812c2c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Trash-Outline.d76ce237.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__tAs8d\"};","import {Dispatch} from \"redux\";\r\nimport { authAPI } from \"../../m3-dal/auth-api\";\r\nimport {RootStateType} from \"../store\";\r\nimport {setErrorText, setValueIsLoggedSuccess } from \"./login-reducer\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_APP_ERROR = \"App/SET_APP_ERROR\",\r\n    SET_INIT_APP = \"App/SET_INIT_APP\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    initApp: \"idle\" as StatusType\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_APP_ERROR:\r\n        case ACTION_TYPE.SET_INIT_APP:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_APP_ERROR, payload: {error}}\r\n}\r\nexport const setInitAppAC = (initApp: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_INIT_APP, payload: {initApp}}\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setInitAppAC>\r\n\r\n// thunk\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    dispatch(setInitAppAC(\"loading\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    try {\r\n        let response = await authAPI.me()\r\n        dispatch(setProfileUserDataAC(response.data))\r\n        dispatch(setValueIsLoggedSuccess(true))\r\n        dispatch(setInitAppAC(\"succeeded\"))\r\n    } catch (e) {\r\n        // dispatch(setAppErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setInitAppAC(\"failed\"))\r\n        dispatch(setErrorText(e.response ? e.response.data.error : \"unknown error\"))\r\n    }\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import axios from \"axios\"\r\n\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<UserDataType>(\"/auth/me\")\r\n    },\r\n    logInUserInApp(data: RequestLogInType) {\r\n        return  instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n    logoutUserInApp() {\r\n        return  instance.delete<UserDataType>(`/auth/me`)\r\n    },\r\n    setNewPassword(data: RequestNewPasswordType) {\r\n        return instance.post<NewPasswordResponseType>(`/auth/set-new-password`, data)\r\n    },\r\n    register (data: RequestRegisterType) {\r\n        return instance.post<RegisterResponseType>(\"/auth/register\", data)\r\n    },\r\n    getLinkForResetPassword(value: string) {\r\n        return  instance.post<NewPasswordResponseType>(`/auth/forgot`, {\r\n            email: value,\r\n            from: \"admin\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                    password recovery link: \r\n                    <a href=\"https://osbelkz.github.io/cards#/newPassword/$token$\"> \r\n                    link</a>\r\n                </div>` // после полной заливки на ghp, заменить ссылку на страницу new password on ghp\r\n        })\r\n    }\r\n}\r\n\r\nexport type RequestRegisterType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type RequestLogInType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type RequestNewPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type RequestResetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    \"addedUser\": UserDataType\r\n}\r\n\r\ntype NewPasswordResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    avatar: null | string\r\n}\r\n\r\ntype ErrorType = {\r\n    error: string\r\n    email: string\r\n    in: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setProfileUserDataAC} from \"./profileP-reducer\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {setInitAppAC} from \"./app-reducer\";\r\n\r\nexport type LoginStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    isLoggedSuccess: false,\r\n    error: \"\"\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-VALUE-IS-LOGGED-SUCCESS\":\r\n            return {...state, isLoggedSuccess: action.isLoggedSuccess}\r\n        case \"login/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        case \"login/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logInUserInAppTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    dispatch(setErrorText(\"\"))\r\n    authAPI.logInUserInApp({email, password, rememberMe})\r\n        .then(res => {\r\n            dispatch(setProfileUserDataAC({...res.data}))\r\n            dispatch(setInitAppAC(\"succeeded\"))\r\n            dispatch(setValueIsLoggedSuccess(true))\r\n            dispatch(setValueIsLoading(false))\r\n\r\n        })\r\n        .catch(e => {\r\n            dispatch(setValueIsLoading(false))\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setErrorText(error))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\nexport const setValueIsLoggedSuccess = (isLoggedSuccess: boolean) =>\r\n    ({type: \"login/SET-VALUE-IS-LOGGED-SUCCESS\", isLoggedSuccess} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"login/SET-ERROR-TEXT\", error} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsLoading>\r\n    | ReturnType<typeof setValueIsLoggedSuccess>\r\n    | ReturnType<typeof setErrorText>\r\n    | ReturnType<typeof setProfileUserDataAC>\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {setAppErrorAC, setInitAppAC} from \"./app-reducer\";\r\nimport {setErrorText, setValueIsLoggedSuccess} from \"./login-reducer\";\r\n\r\n\r\nenum ACTION_TYPE {\r\n    SET_USER = \"Profile/SET_USER\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    userData: null as UserDataType | null\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPE.SET_USER:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nexport const setProfileUserDataAC = (userData: UserDataType | null) => {\r\n    return {type: ACTION_TYPE.SET_USER, payload: {userData}}\r\n}\r\n\r\nexport const logoutUserInAppTC = () =>async (dispatch: Dispatch) => {\r\n    dispatch(setInitAppAC(\"loading\"))\r\n    dispatch(setAppErrorAC(\"\"))\r\n    try {\r\n        let response = authAPI.logoutUserInApp()\r\n        dispatch(setProfileUserDataAC(null))\r\n        dispatch(setValueIsLoggedSuccess(false))\r\n        dispatch(setInitAppAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setInitAppAC(\"failed\"))\r\n        dispatch(setErrorText(e.response ? e.response.data.error : \"unknown error\"))\r\n    }\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setProfileUserDataAC>\r\n\r\nexport type ProfileStateType = typeof initialState\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRegisterType} from \"../../m3-dal/auth-api\";\r\nimport { StatusType } from \"./app-reducer\";\r\n\r\nenum ACTION_TYPE {\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_STATUS = \"SET_STATUS\"\r\n}\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    status: \"idle\" as StatusType,\r\n}\r\n\r\nexport const registerReducer = (state: RegisterStateType = initialState, action: ActionsType): RegisterStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_ERROR:\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setErrorAC = (error: string) => {\r\n    return {type: ACTION_TYPE.SET_ERROR, payload: {error}}\r\n}\r\nexport const setStatusAC = (status: StatusType) => {\r\n    return {type: ACTION_TYPE.SET_STATUS, payload: {status}}\r\n}\r\n\r\nexport type ActionsType =\r\n    ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setStatusAC>\r\n\r\n// thunk\r\n\r\nexport const addUserTC = (data: RequestRegisterType) => async (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC(\"loading\"))\r\n    dispatch(setErrorAC(\"\"))\r\n    try {\r\n        let response = await authAPI.register(data)\r\n        dispatch(setStatusAC(\"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setErrorAC(e.response ? e.response.data.error : \"unknown error\"))\r\n        dispatch(setStatusAC(\"failed\"))\r\n        setTimeout(dispatch, 5000, setErrorAC(\"\"))\r\n    }\r\n}\r\n\r\nexport type RegisterStateType = typeof initialState\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.css\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n}\r\n\r\nconst NavItem: React.FC<PropsType> = ({path, title}) => {\r\n\r\n    return (\r\n            <NavLink to={path} className={classes.navItem} activeClassName={classes.active}>{title}</NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const Button = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport NavItem from \"../../common/NavItem/NavItem\";\r\nimport classes from \"./Nav.module.css\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\nexport const NavLogOut = () => {\r\n    return <nav className={classes.logOut}>\r\n        <NavItem path={\"/login\"} title={\"Login\"}/>\r\n        <NavItem path={\"/register\"} title={\"Registration\"}/>\r\n    </nav>\r\n}\r\n\r\ntype NavLogInPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport const NavLogIn = ({logout}: NavLogInPropsType) => {\r\n    return <nav className={classes.logIn}>\r\n        <div className={classes.links}>\r\n            <NavItem path={\"/profile\"} title={\"Profile\"}/>\r\n            <NavItem path={\"/packs\"} title={\"Packs\"} />\r\n        </div>\r\n        <div className={classes.button}>\r\n            <Button onClick={logout} btnName={\"Logout\"} btnType={\"red\"}/>\r\n        </div>\r\n    </nav>\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutUserInAppTC} from \"../../m2-bll/reducers/profileP-reducer\";\r\nimport {RootStateType} from \"../../m2-bll/store\";\r\nimport {UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {NavLogIn, NavLogOut} from \"./Nav/Nav\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.profile.userData)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutUserInAppTC())\r\n    }, [])\r\n\r\n    if(!userData) return <NavLogOut />\r\n\r\n    return <NavLogIn logout={logoutHandler}/>\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\nimport NavItem from '../../../n1-main/m1-ui/common/NavItem/NavItem';\r\n\r\n\r\ntype PropsType = {\r\n    userData: UserDataType\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({userData}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.profile__container}>\r\n                <div className={classes.profile__title}>\r\n                    <h3>Profile page</h3>\r\n                </div>\r\n\r\n                <div className={classes.profile__info}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>Id:</th>\r\n                            <td>{userData._id}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Username:</th>\r\n                            <td>{userData.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Email:</th>\r\n                            <td>{userData.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Added:</th>\r\n                            <td>{userData.created}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Packs of cards:</th>\r\n                            <td>{userData.publicCardPacksCount}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Profile);\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\nconst ProfileContainer = () => {\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.profile.userData)\r\n\r\n    if(!userData) return <div></div>\r\n\r\n    return <Profile userData={userData}/>\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import React, {InputHTMLAttributes} from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\ninterface PropsType extends InputHTMLAttributes<HTMLInputElement> {\r\n    label?: string\r\n    errorText?: string\r\n    errorCondition?: boolean\r\n}\r\n\r\nexport const Input = React.memo(\r\n    ({label, errorCondition, errorText, ...rest }: PropsType) => {\r\n\r\n    return (\r\n            <div className={classes.input}>\r\n                <p className={classes.input__label}>{label}</p>\r\n                <input className={`${classes.input__elem} ${errorCondition ? classes.input__error : \"\"}`}\r\n                       {...rest}/>\r\n                {errorCondition ? <div\r\n                    className={classes.inputs__error_text}>{errorText}</div> : null}\r\n            </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Login.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\n\r\ntype RestorePropsType = {\r\n    isLoggedSuccess: boolean,\r\n    isLoading: boolean,\r\n    error: string,\r\n    handleOnSubmit: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Login: React.FC<RestorePropsType> = React.memo(({error, isLoading, handleOnSubmit, isLoggedSuccess}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required!\"\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Too short password, min 7 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.email, values.password, values.rememberMe)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <div className={classes.login__container}>\r\n            <form className={classes.login__form} onSubmit={formik.handleSubmit}>\r\n                <div className={classes.login__title}>\r\n                    <h3>Login page</h3>\r\n                </div>\r\n                <div className={classes.login__inputs}>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}/>\r\n                <Input\r\n                    label={\"Password\"}\r\n                    type={\"password\"}\r\n                    placeholder={\"Please, put your password\"}\r\n                    errorCondition={!!formik.errors.password && formik.touched.password}\r\n                    errorText={formik.errors.password}\r\n                    {...formik.getFieldProps(\"password\")}/>\r\n                <div className={classes.login__checkbox}>\r\n                    <input\r\n                        id={\"remember\"}\r\n                        className={classes.checkbox}\r\n                        type={\"checkbox\"}\r\n                        checked={formik.values.rememberMe}\r\n                        {...formik.getFieldProps(\"rememberMe\")}/>\r\n                    <label htmlFor={\"remember\"}>remember me</label>\r\n                </div>\r\n\r\n                </div>\r\n                <div className={classes.login__buttons}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Login\"}\r\n                        disabled={!formik.isValid || (isLoading) || !formik.values.email}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/restore\"} title={\"Forgot your password?\"}/>\r\n                {error && <div className={classes.infoTextRed}>{error}</div>}\r\n                {isLoading && <div className={classes.loading}>...Loading</div>}\r\n            </form>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Login;\r\n","import React, {useCallback} from 'react';\r\nimport Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {LoginStateType, logInUserInAppTC} from \"../../../n1-main/m2-bll/reducers/login-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginContainer = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const {isLoggedSuccess, isLoading, error } = useSelector<RootStateType, LoginStateType>(state => state.login)\r\n\r\n    const handleOnSubmit = useCallback((email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInUserInAppTC(email, password,rememberMe))\r\n    }, []\r\n    )\r\n\r\n    if (isLoggedSuccess) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            isLoading={isLoading}\r\n            isLoggedSuccess={isLoggedSuccess}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {Input} from '../../../n1-main/m1-ui/common/Input/Input';\r\nimport classes from \"./Register.module.scss\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {RequestRegisterType} from \"../../../n1-main/m3-dal/auth-api\";\r\nimport { StatusType } from '../../../n1-main/m2-bll/reducers/app-reducer';\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: RequestRegisterType) => void\r\n    error: string\r\n    status: StatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    password2?: string\r\n}\r\n\r\nconst Register: React.FC<PropsType> = React.memo(({status, error, onSubmit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 7) {\r\n                errors.password = \"Must be 7 or more characters\"\r\n            }\r\n            if (values.password !== values.password2) {\r\n                errors.password2 = \"Passwords does not match\"\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            onSubmit({email: values.email, password: values.password})\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.register}>\r\n            <div className={classes.register__container}>\r\n                <form className={classes.register__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.register__title}>\r\n                        <h3>Registration</h3>\r\n                    </div>\r\n                    <div className={classes.register__inputs}>\r\n                        <Input label={\"Email\"}\r\n                               errorCondition={!!formik.errors.email && formik.touched.email}\r\n                               placeholder={\"email\"}\r\n                               errorText={formik.errors.email}\r\n                               {...formik.getFieldProps(\"email\")}/>\r\n                        <Input label={\"Password\"}\r\n                               errorCondition={!!formik.errors.password && formik.touched.password}\r\n                               type={\"password\"}\r\n                               placeholder={\"password\"}\r\n                               errorText={formik.errors.password}\r\n                               {...formik.getFieldProps(\"password\")}/>\r\n                        <Input label={\"Repeat password\"}\r\n                               errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                               type={\"password\"}\r\n                               errorText={formik.errors.password2}\r\n                               placeholder={\"confirm password\"}\r\n                               {...formik.getFieldProps(\"password2\")} />\r\n                    </div>\r\n                    <div className={classes.register__buttons}>\r\n                        <Button btnName={\"Join\"} btnType={\"green\"} type={\"submit\"}\r\n                                disabled={!formik.isValid || (status === \"loading\") || !formik.values.email}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                    {error && <div className={classes.register__error}>{error}</div>}\r\n                    {status === \"loading\" && <div className={classes.register__loading}>...Loading</div>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Register;\r\n","import React, {useCallback} from 'react';\r\nimport Register from \"./Register\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addUserTC, RegisterStateType} from \"../../../n1-main/m2-bll/reducers/register-reducer\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { RequestRegisterType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\n\r\nconst RegisterContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {error, status} = useSelector<RootStateType, RegisterStateType>(state => state.register)\r\n\r\n    const onSubmitHandler = useCallback((values: RequestRegisterType) => {\r\n        dispatch(addUserTC(values))\r\n    }, [])\r\n\r\n    if (status===\"succeeded\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <Register onSubmit={onSubmitHandler} error={error} status={status}/>\r\n    );\r\n};\r\n\r\nexport default RegisterContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Restore.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    textAfterRequest: string,\r\n    isSentSuccess: boolean,\r\n    isLoading: boolean,\r\n    handleOnSubmit: (value: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst Restore: React.FC<RestorePropsType> = React.memo(({handleOnSubmit, isLoading, isSentSuccess, textAfterRequest}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.email)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.restore}>\r\n            <div className={classes.restore__container}>\r\n                <form className={classes.restore__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.restore__title}>\r\n                        <h3>Restore password</h3>\r\n                    </div>\r\n                    <div className={classes.restore__inputs}>\r\n                        <Input\r\n                            label={\"Email\"}\r\n                            placeholder={\"Please, put your email\"}\r\n                            errorCondition={!!formik.errors.email && formik.touched.email}\r\n                            errorText={formik.errors.email}\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.restore__buttons}>\r\n                        <Button\r\n                            type={\"submit\"}\r\n                            btnName={\"Send email\"}\r\n                            disabled={!formik.isValid || (isLoading) || !formik.values.email}\r\n                            btnType={\"green\"}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                    {textAfterRequest && <div className={\r\n                        isSentSuccess ? classes.infoTextGreen : classes.infoTextRed\r\n                    }>{textAfterRequest}</div>}\r\n                    {isLoading && <div className={classes.loading}>...Loading</div>}\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Restore;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type RestorePasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSentSuccess: false,\r\n    textAfterRequest: \"\",\r\n    isLoading: false\r\n}\r\n\r\nexport const restorePasswordReducer = (state = initialState, action: ActionsType): RestorePasswordStateType => {\r\n    switch (action.type) {\r\n        case \"restore/SET-VALUE-IS-SENT-SUCCESS\":\r\n            return {...state, isSentSuccess: action.value}\r\n        case \"restore/SET-TEXT-AFTER-REQUEST\":\r\n            return {...state, textAfterRequest: action.textAfterRequest}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const restoreTC = (value: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.getLinkForResetPassword(value)\r\n        .then(res => {\r\n            dispatch(setValueIsSentSuccess(true))\r\n            dispatch(setRestoreTextAfterRequest(res.data.info))\r\n            dispatch(setValueIsLoading(false))\r\n        })\r\n        .catch((error: {response: {data: {error: string}}})=> {\r\n            dispatch(setRestoreTextAfterRequest(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setRestoreTextAfterRequest(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSentSuccess = (value: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-SENT-SUCCESS\", value} as const)\r\n\r\nexport const setRestoreTextAfterRequest = (textAfterRequest: string) =>\r\n    ({type: \"restore/SET-TEXT-AFTER-REQUEST\", textAfterRequest} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSentSuccess>\r\n    | ReturnType<typeof setRestoreTextAfterRequest>\r\n    | ReturnType<typeof setValueIsLoading>\r\n\r\n","import React, {useCallback} from 'react';\r\nimport Restore from \"./Restore\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {RestorePasswordStateType, restoreTC} from \"../../../n1-main/m2-bll/reducers/restorePassword-reducer\";\r\n\r\nconst RestoreContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {textAfterRequest, isLoading, isSentSuccess} =\r\n        useSelector<RootStateType, RestorePasswordStateType>(state => state.restorePassword)\r\n\r\n    const handleOnSubmit = useCallback((value: string) => {\r\n        dispatch(restoreTC(value))\r\n        }, []\r\n    )\r\n\r\n    return (\r\n        <Restore\r\n            textAfterRequest={textAfterRequest}\r\n            isSentSuccess={isSentSuccess}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RestoreContainer;\r\n","import React from \"react\";\r\nimport classes from \"./NewPassword.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\ntype NewPasswordPropsType = {\r\n    isSetNewPassword: boolean\r\n    error: string\r\n    isOk: string\r\n    isLoading: boolean\r\n    handleOnSubmit: (value: string, token: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password1?: string\r\n    password2?: string\r\n}\r\n\r\n\r\nconst NewPassword: React.FC<NewPasswordPropsType> = React.memo(({isLoading, handleOnSubmit, error, isOk, isSetNewPassword}) => {\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password1: \"\",\r\n            password2: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password1) {\r\n                errors.password1 = \"Field is required!\"\r\n            } else if (values.password1.length < 8) {\r\n                errors.password1 = \"Too short password, min 8 symbols\"\r\n            }\r\n            if (!values.password2) {\r\n                errors.password2 = \"Field is required!\"\r\n            } else if (values.password2.length < 8) {\r\n                errors.password2 = \"Too short password, min 8 symbols\"\r\n            } else if (values.password1 !== values.password2) {\r\n                errors.password2 = \"Both fields must be equal!\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.password1, token)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.newPassword}>\r\n            <div className={classes.newPassword__container}>\r\n                <form className={classes.newPassword__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.newPassword__title}>\r\n                        <h3>New password page</h3>\r\n                    </div>\r\n                    <div className={classes.newPassword__inputs}>\r\n                        <Input\r\n                            label={\"New password\"}\r\n                            placeholder={\"Please, put new password\"}\r\n                            errorCondition={!!formik.errors.password1 && formik.touched.password1}\r\n                            errorText={formik.errors.password1}\r\n                            {...formik.getFieldProps(\"password1\")}\r\n\r\n                        />\r\n                        <Input\r\n                            label={\"Repeat new password\"}\r\n                            placeholder={\"Put new password again\"}\r\n                            errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                            errorText={formik.errors.password2}\r\n                            {...formik.getFieldProps(\"password2\")}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.newPassword__buttons}>\r\n                        <Button\r\n                            type={\"submit\"}\r\n                            btnName={\"Set new password\"}\r\n                            disabled={!formik.isValid || (isLoading)}\r\n                            btnType={\"green\"}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                </form>\r\n                {!isSetNewPassword && error\r\n                    ? <div className={classes.infoTextRed}>{error}</div>\r\n                    : \"\"\r\n                }\r\n                {isSetNewPassword && isOk\r\n                    ? <div className={classes.infoTextGreen}>{isOk}</div>\r\n                    : \"\"\r\n                }\r\n                {isLoading && <div className={classes.loading}>...Loading</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default NewPassword;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../m3-dal/auth-api\";\r\n\r\nexport type NewPasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSetNewPassword: false,\r\n    error: \"\" ,\r\n    isOk: \"\",\r\n    isLoading: false\r\n}\r\n\r\nexport const newPasswordReducer = (state = initialState, action: ActionsType): NewPasswordStateType => {\r\n    switch (action.type) {\r\n        case \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\":\r\n            return {...state, isSetNewPassword: action.value}\r\n        case \"newPassword/SET-ERROR-TEXT\":\r\n            return {...state, error: action.error}\r\n        case \"newPassword/SET-VALUE-IS-OK\":\r\n            return {...state, isOk: action.text}\r\n        case \"restore/SET-VALUE-IS-LOADING\":\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setNewPasswordTC = (newPassword: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(setValueIsLoading(true))\r\n    authAPI.setNewPassword({\r\n        password: newPassword,\r\n        resetPasswordToken: token\r\n    })\r\n        .then(res => {\r\n            dispatch(setValueIsSetNewPassword(true))\r\n            dispatch(setValueIsOk(res.data.info))\r\n            dispatch(setValueIsLoading(false))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorText(error.response.data.error))\r\n            dispatch(setValueIsLoading(false))\r\n            setTimeout(dispatch, 5000, setErrorText(\"\"))\r\n        })\r\n}\r\n\r\nexport const setValueIsSetNewPassword = (value: boolean) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-SET-NEW-PASSWORD\", value} as const)\r\n\r\nexport const setErrorText = (error: string) =>\r\n    ({type: \"newPassword/SET-ERROR-TEXT\", error} as const)\r\n\r\nexport const setValueIsOk = (text: string) =>\r\n    ({type: \"newPassword/SET-VALUE-IS-OK\", text} as const)\r\n\r\nexport const setValueIsLoading = (isLoading: boolean) =>\r\n    ({type: \"restore/SET-VALUE-IS-LOADING\", isLoading} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setValueIsSetNewPassword>\r\n    | ReturnType<typeof setErrorText>\r\n    | ReturnType<typeof setValueIsOk>\r\n    | ReturnType<typeof setValueIsLoading>\r\n","import React, {useCallback} from 'react';\r\nimport NewPassword from \"./NewPassword\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NewPasswordStateType, setNewPasswordTC} from \"../../../n1-main/m2-bll/reducers/newPassword-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NewPasswordContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isSetNewPassword, isLoading, error, isOk} =\r\n        useSelector<RootStateType, NewPasswordStateType>(state => state.newPassword)\r\n\r\n\r\n    const handleOnSubmit = useCallback((newPassword: string, token: string) => {\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }, []\r\n    )\r\n\r\n    if (isSetNewPassword) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <NewPassword\r\n            isSetNewPassword={isSetNewPassword}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isOk={isOk}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPasswordContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Preloader.module.scss\";\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.ldsFacebook}>\r\n                <div></div><div></div><div></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n//\r\n","import React, {useEffect} from 'react';\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../m2-bll/store\";\r\nimport {authMeTC, StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\nconst AuthRedirect: React.FC = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initApp = useSelector<RootStateType, StatusType>(state => state.app.initApp)\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n\r\n\r\n    useEffect(() => {\r\n        if (initApp === \"idle\" && !isLoggedSuccess) {\r\n            dispatch(authMeTC())\r\n        }\r\n    }, [initApp, isLoggedSuccess])\r\n\r\n    if (initApp === \"loading\" || initApp === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthRedirect;\r\n","import {CardPackType, packsApi} from \"../../m3-dal/packs-api\"\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\n\r\nenum ACTION_TYPES {\r\n    CHANGE_PAGE = \"packs/CHANGE_PAGE\",\r\n    CHANGE_PAGE_COUNT = \"packs/CHANGE_PAGE_COUNT\",\r\n    SET_TOTAL_COUNT = \"packs/SET_TOTAL_COUNT\",\r\n    SET_PACKS = \"packs/SET_PACKS\",\r\n    SET_SEARCH_NAME = \"packs/SET_SEARCH_NAME\",\r\n    SET_SEARCH_PARAMS = \"packs/SET_SEARCH_PARAMS\",\r\n    SET_IS_LOADING = \"packs/SET_IS_LOADING\",\r\n    SET_SORT_PACKS = \"packs/SET_SORT_PACKS\",\r\n    SET_GETTING_MY_PACKS = \"packs/SET_GETTING_MY_PACKS\",\r\n    SET_USER_ID = \"packs/SET_USER_ID\"\r\n}\r\n\r\n\r\nconst initialState = {\r\n    packs: [] as Array<CardPackType>,\r\n    getMyPacks: false,\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    min: 0,\r\n    max: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        packName: \"\",\r\n        sortPacks: \"\",\r\n        min: 0,\r\n        max: 0,\r\n        user_id: \"\"\r\n    }\r\n}\r\n\r\nexport const packsReducer = (state: PacksStateType = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.CHANGE_PAGE:\r\n        case ACTION_TYPES.CHANGE_PAGE_COUNT:\r\n        case ACTION_TYPES.SET_TOTAL_COUNT:\r\n        case ACTION_TYPES.SET_PACKS:\r\n        case ACTION_TYPES.SET_IS_LOADING:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_NAME:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, packName: action.payload.packName}\r\n            }\r\n        case ACTION_TYPES.SET_SORT_PACKS:\r\n        case ACTION_TYPES.SET_SEARCH_PARAMS:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams,...action.payload}\r\n            }\r\n        case ACTION_TYPES.SET_USER_ID:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, user_id: action.user_id}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport const changePageAC = (page: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE, payload: {page}} as const\r\n}\r\nexport const changePageCountAC = (pageCount: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE_COUNT, payload: {pageCount}} as const\r\n}\r\nconst setTotalCountAC = (cardPacksTotalCount: number) => {\r\n    return {type: ACTION_TYPES.SET_TOTAL_COUNT, payload: {cardPacksTotalCount}} as const\r\n}\r\nconst setPacksAC = (packs: Array<CardPackType>, cardPacksTotalCount: number, min: number, max: number, pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_PACKS, payload: {packs, cardPacksTotalCount, min, max, pageStatus}} as const\r\n}\r\nexport const setSearchNameAC = (packName: string) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_NAME, payload: {packName}} as const\r\n}\r\nexport const setSearchParamsAC = (packName: string, min: number, max: number) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_PARAMS, payload: {packName, min, max}} as const\r\n}\r\nexport const setPageStatusAC = (pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_IS_LOADING, payload: {pageStatus}} as const\r\n}\r\nexport const setPacksSortColumnAC = (sortPacks: string) => {\r\n    return {type: ACTION_TYPES.SET_SORT_PACKS, payload: {sortPacks}} as const\r\n}\r\nexport const setUserIdAC = (user_id: string) => {\r\n    return {type: ACTION_TYPES.SET_USER_ID, user_id} as const\r\n}\r\n\r\n\r\n// thunks\r\n\r\nexport const getPacksTC = (selectedPage?: number) => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    const {page,  pageCount, searchParams: {packName, min, max, sortPacks, user_id}} = getState().packs\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.getPacks({page: selectedPage || page, pageCount, packName, min, max, sortPacks, user_id})\r\n        dispatch(setPacksAC(response.data.cardPacks,\r\n            response.data.cardPacksTotalCount,\r\n            response.data.minCardsCount,\r\n            response.data.maxCardsCount,\r\n            \"succeeded\"))\r\n        selectedPage && dispatch(changePageAC(selectedPage))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n        dispatch(setPageStatusAC(\"failed\"))\r\n    } finally {\r\n\r\n    }\r\n}\r\nexport const deletePackTC = (id: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.deletePack(id)\r\n        await dispatch(getPacksTC())\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n        dispatch(setPageStatusAC(\"failed\"))\r\n    }\r\n}\r\nexport const createPackTC = (name: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.createPack({name})\r\n        await dispatch(getPacksTC(1))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n        dispatch(setPageStatusAC(\"failed\"))\r\n    }\r\n}\r\n//under construction\r\nexport const updatePackTC = (name: string, _id: string) => async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setPageStatusAC(\"loading\"))\r\n    try {\r\n        const response = await packsApi.updatePack({name, _id})\r\n        await dispatch(getPacksTC(1))\r\n    } catch (e) {\r\n        alert(e.response.data.error)\r\n        dispatch(setPageStatusAC(\"failed\"))\r\n    }\r\n}\r\n\r\nexport type PacksStateType = typeof initialState\r\nexport type SearchParamsType = typeof initialState.searchParams\r\n\r\n\r\ntype ActionsType = ReturnType<typeof changePageAC>\r\n    | ReturnType<typeof changePageCountAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setSearchNameAC>\r\n    | ReturnType<typeof setSearchParamsAC>\r\n    | ReturnType<typeof setPageStatusAC>\r\n    | ReturnType<typeof setPacksSortColumnAC>\r\n    | ReturnType<typeof setUserIdAC>\r\n","import React from 'react';\r\nimport classes from \"./Table.module.scss\";\r\n\r\nexport interface ITableModel {\r\n    title: (index: number) => JSX.Element;\r\n    render: (dataItem: any, modelIndex: number, dataIndex: number) => JSX.Element;\r\n}\r\n\r\ninterface ITableProps {\r\n    model: ITableModel[];\r\n    data: any;\r\n    disabled: boolean\r\n}\r\n\r\nconst Table: React.FC<ITableProps> = React.memo(({model, data, disabled}) => {\r\n\r\n    // console.log(\"table\")\r\n\r\n    return (\r\n        <table className={`${classes.table} ${disabled ? classes.table__loading : \"\"}`}>\r\n            <thead>\r\n            <tr className={classes.table__row_header}>\r\n                {model.map((m: ITableModel, index: number) => m.title(index))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {data.map((dataItem: any, dataIndex: number) => (\r\n                <tr className={classes.table__row_data} key={dataItem._id}>\r\n                    {model.map((m, modelIndex) => m.render(dataItem, modelIndex, dataIndex))}\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n})\r\n// just a init commit\r\nexport default Table;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Slider.module.scss\";\r\n\r\ntype SliderPropsType = {\r\n    setMin:(value: number) => void\r\n    setMax:(value: number) => void\r\n    min: number\r\n    max: number\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n    disabled: boolean\r\n}\r\n\r\nexport const Slider: React.FC<SliderPropsType> = React.memo((props) => {\r\n\r\n    const rangeHandler1 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMin(value)\r\n        if (props.max <= value) {\r\n            props.setMax(value)\r\n        }\r\n    }\r\n\r\n    const rangeHandler2 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMax(value)\r\n        if (props.min >= value) {\r\n            props.setMin(value)\r\n        }\r\n    }\r\n\r\n    let leftMin = props.min / (props.maxValue/100) - 2.5\r\n    let leftMax = props.max / (props.maxValue/100) - 2.5\r\n\r\n    return <div className={classes.doubleRange}>\r\n        <div>\r\n            <div className={classes.rangeNum}\r\n                style={{left: `${leftMin}%`}}>\r\n                {props.min}\r\n            </div>\r\n            <input\r\n                type={\"range\"}\r\n                min={props.minValue}\r\n                max={props.maxValue}\r\n                step={props.stepValue}\r\n                value={props.min}\r\n                className={classes.range}\r\n                onChange={rangeHandler1}\r\n                disabled={props.disabled}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.rangeNum}\r\n            style={{left: `${leftMax}%`}}>\r\n            {props.max}\r\n        </div>\r\n        <input\r\n            type={\"range\"}\r\n            min={props.minValue}\r\n            max={props.maxValue}\r\n            step={props.stepValue}\r\n            value={props.max}\r\n            className={classes.range}\r\n            onChange={rangeHandler2}\r\n            disabled={props.disabled}\r\n        />\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport classes from \"./Search.module.scss\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Slider} from \"../Slider/Slider\";\r\n\r\ntype SearchPropsType = {\r\n    name: string\r\n    label: string\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Search: React.FC<SearchPropsType> =\r\n    React.memo(({name, minValue, maxValue, label, stepValue, setSearchParams, disabled}) => {\r\n\r\n\r\n        const [searchValue, setSearchValue] = useState<string>(name)\r\n        const [min, setMin] = useState(minValue)\r\n        const [max, setMax] = useState(maxValue)\r\n\r\n        const inputOnChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            setSearchValue(e.currentTarget.value as string)\r\n        }, [])\r\n\r\n        const onSearchClick = useCallback(() => {\r\n            setSearchParams(searchValue, min, max)\r\n        }, [searchValue, max, min])\r\n\r\n        useEffect(() => {\r\n            setMax(maxValue)\r\n        }, [maxValue])\r\n\r\n        return <div className={classes.uniSearch}>\r\n            <h3>{label}</h3>\r\n            <Input\r\n                value={searchValue}\r\n                onChange={inputOnChangeHandler}\r\n                disabled={disabled}\r\n            />\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    setMin={setMin}\r\n                    setMax={setMax}\r\n                    min={min}\r\n                    max={max}\r\n                    minValue={minValue}\r\n                    maxValue={maxValue}\r\n                    stepValue={stepValue}\r\n                    disabled={disabled}\r\n                />\r\n            </div>\r\n            <Button\r\n                btnName={\"Search\"}\r\n                onClick={onSearchClick}\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    })\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./Paginator.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    itemsTotalCount: number\r\n    pageCount: number\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    itemsName: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> =\r\n    React.memo(({currentPage, pageCount, changePageCount, changePage, itemsName, itemsTotalCount, disabled}) => {\r\n    const [pageNumber, setPageNumber] = useState(currentPage)\r\n    let pageAmount = Math.ceil(itemsTotalCount / pageCount)\r\n\r\n    const pageCountChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let value = +e.currentTarget.value\r\n        changePageCount(value)\r\n    }\r\n    const onePreviousPage = () => {\r\n        changePage(pageNumber - 1)\r\n        setPageNumber(pageNumber - 1)\r\n    }\r\n    const pageChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPageNumber(+e.currentTarget.value)\r\n    }\r\n\r\n    const pageSetHandler = () => {\r\n        if (pageNumber < 1) {\r\n            changePage(1)\r\n            setPageNumber(1)\r\n        } else if (pageNumber > pageAmount) {\r\n            changePage(pageAmount)\r\n            setPageNumber(pageAmount)\r\n        } else {\r\n            changePage(pageNumber)\r\n        }\r\n    }\r\n    const oneNextPage = () => {\r\n        changePage(pageNumber + 1)\r\n        setPageNumber(pageNumber + 1)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            pageSetHandler()\r\n        }\r\n    }\r\n\r\n    return <div className={classes.paginator}>\r\n        <div className={classes.leftBlock}>\r\n            {`Total ${itemsName}: ${itemsTotalCount}. ${itemsName} per page:`}\r\n            <select onChange={pageCountChangeHandler} value={pageCount} disabled={disabled}>\r\n                <option>10</option>\r\n                <option>20</option>\r\n                <option>50</option>\r\n                <option>100</option>\r\n            </select>\r\n        </div>\r\n        <div className={classes.rightBlock}>\r\n            <Button\r\n                btnName={`Prev`}\r\n                onClick={onePreviousPage}\r\n                disabled={currentPage < 2 || disabled}\r\n            />\r\n            {`Page: `}\r\n            {pageNumber < 1}\r\n            <Input type={\"number\"}\r\n                   value={pageNumber}\r\n                   step={1} min={1}\r\n                   max={pageAmount}\r\n                   onChange={pageChangeHandler}\r\n                   onBlur={pageSetHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   disabled={disabled}\r\n            />\r\n            of {pageAmount}\r\n            <Button\r\n                btnName={`Next`}\r\n                onClick={oneNextPage}\r\n                disabled={currentPage === pageAmount || disabled}\r\n            />\r\n        </div>\r\n    </div>\r\n})\r\n","import React from \"react\";\r\nimport classes from \"./ColumnSorting.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype ColumnSortingPropsType = {\r\n    onClick: (value: number) => void\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const ColumnSorting: React.FC<ColumnSortingPropsType> = React.memo(({onClick, pageStatus}) => {\r\n\r\n    const upChangeHandler = () => {\r\n        onClick(1)\r\n    }\r\n    const downChangeHandler = () => {\r\n        onClick(0)\r\n    }\r\n\r\n    return <div className={classes.container}>\r\n        <Button\r\n            btnName={\"⇑\"}\r\n            className={classes.up}\r\n            onClick={upChangeHandler}\r\n            disabled={pageStatus === \"loading\"}\r\n        />\r\n        <Button\r\n            btnName={\"⇓\"}\r\n            className={classes.down}\r\n            onClick={downChangeHandler}\r\n            disabled={pageStatus === \"loading\"}\r\n        />\r\n    </div>\r\n})","import React from \"react\";\r\nimport classes from \"./Modal.module.scss\";\r\n\r\ntype ModalPropsType = {\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = ({active, setActive, children}) => {\r\n    return <div className={active ? `${classes.modal} ${classes.active}` : classes.modal} onClick={() => setActive(false)}>\r\n        <div\r\n            className={active ? `${classes.modalContent} ${classes.modalContentActive}` : classes.modalContent}\r\n            onClick={e => e.stopPropagation()}\r\n        >\r\n            {children}\r\n        </div>\r\n    </div>\r\n}","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./TableButton.module.scss\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const TableButton = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport classes from \"./QuestionModal.module.scss\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {Modal} from \"../Modal\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype QuestionModalPropsType = {\r\n    text: string\r\n    setAnswerY: (value: boolean) => void\r\n    setAnswerN: (value: boolean) => void\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n}\r\n\r\nexport const QuestionModal: React.FC<QuestionModalPropsType> = ({text, setAnswerY, setAnswerN, active, setActive}) => {\r\n    const onYesClickHandler = () => {\r\n        setAnswerY(true)\r\n        setActive(false)\r\n    }\r\n    const onNoClickHandler = () => {\r\n        setAnswerN(false)\r\n        setActive(false)\r\n    }\r\n\r\n    return <div className={classes.questionModal}>\r\n        <Modal active={active} setActive={setActive}>\r\n            {text}\r\n            <TableButton btnName={\"Yes\"} onClick={onYesClickHandler} style={{right: \"20px\"}}/>\r\n            <TableButton btnName={\"No\"} onClick={onNoClickHandler} style={{left: \"20px\"}}/>\r\n        </Modal>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport {QuestionModal} from \"./QuestionModal\";\r\n\r\ntype QuestionModalContainerPropsType = {\r\n    text: string\r\n    activate: boolean\r\n    setActivate: (value: boolean) => void\r\n    setAnswerY: (value: boolean) => void\r\n    setAnswerN: (value: boolean) => void\r\n}\r\n\r\nexport const QuestionModalContainer: React.FC<QuestionModalContainerPropsType> = ({text, setAnswerY, setAnswerN, activate, setActivate}) => {\r\n    return <>\r\n        <QuestionModal\r\n            text={text}\r\n            setAnswerY={setAnswerY}\r\n            setAnswerN={setAnswerN}\r\n            active={activate}\r\n            setActive={setActivate}\r\n        />\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./OneInputModal.module.scss\";\r\nimport {Modal} from \"../Modal\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype InputModalType = {\r\n    value?: string\r\n    placeholder: string\r\n    title: string\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n    handleOnSubmit: (itemName: string) => void\r\n}\r\n\r\nexport const OneInputModal: React.FC<InputModalType> = ({title, placeholder, value, active, setActive, handleOnSubmit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            itemsName: value || \"\",\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.itemsName)\r\n            setActive(false)\r\n        }\r\n    })\r\n\r\n    return <Modal active={active} setActive={setActive}>\r\n            <div className={classes.closeButton}>\r\n                <TableButton\r\n                    btnName={\"X\"}\r\n                    onClick={() => setActive(false)}/>\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.inputModal}>\r\n                <h3>{title}</h3>\r\n                <textarea placeholder={placeholder} {...formik.getFieldProps(\"itemsName\")}/>\r\n                <div>\r\n                    <Button\r\n                        btnName={\"Save\"}\r\n                        btnType={\"green\"}\r\n                        type={\"submit\"}\r\n                    />\r\n                    <Button\r\n                        type={\"reset\"}\r\n                        btnName={\"Reset\"}\r\n                        style={{marginLeft: \"10px\"}}\r\n                        onClick={() => formik.setValues({itemsName: \"\"})}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n}\r\n","import React, {ButtonHTMLAttributes} from \"react\";\r\nimport editSVG from \"../../../../../n3-assets/Pencil-Outline.svg\";\r\nimport openSVG from \"../../../../../n3-assets/Folder-Outline.svg\";\r\nimport trainSVG from \"../../../../../n3-assets/Fitness_Fill.svg\";\r\nimport removeSVG from \"../../../../../n3-assets/Trash-Outline.svg\";\r\nimport classes from \"./GeneralBTN.module.scss\";\r\n\r\ninterface GeneralBTNPropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnType: \"edit\" | \"open\" | \"train\" | \"remove\"\r\n}\r\n\r\nexport const GeneralBTN: React.FC<GeneralBTNPropsType> = React.memo(({btnType, ...props}) => {\r\n    let svg = \"\"\r\n    let buttonClasses = \"\"\r\n\r\n    switch (btnType) {\r\n        case \"edit\":\r\n            svg = editSVG\r\n            buttonClasses = `${classes.button}`\r\n            break\r\n        case \"open\": {\r\n            svg = openSVG\r\n            buttonClasses = `${classes.button}`\r\n            break\r\n        }\r\n        case \"train\": {\r\n            svg = trainSVG\r\n            buttonClasses = `${classes.button} ${classes.green}`\r\n            break\r\n        }\r\n        case \"remove\": {\r\n            svg = removeSVG\r\n            buttonClasses = `${classes.button} ${classes.red}`\r\n            break\r\n        }\r\n    }\r\n\r\n    return <button className={buttonClasses} {...props}>\r\n        <img src={svg} alt=\"\"/>\r\n    </button>;\r\n})","import React, {useState} from \"react\";\r\nimport {QuestionModalContainer} from \"../ModalWindows/QuestionModal/QuestionModalContainer\";\r\nimport {OneInputModal} from \"../ModalWindows/OneInputModal/OneInputModal\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\nimport {CardPackType} from \"../../../m3-dal/packs-api\";\r\nimport {GeneralBTN} from \"./GeneralBTN/GeneralBTN\";\r\n\r\ntype PackButtonsBlockPropsType = {\r\n    updatePack: (name: string, id: string) => void\r\n    choosePack: (packId: string, cardsOwner: string) => void\r\n    startLearn: (packId: string, cardsOwner: string) => void\r\n    deletePack: (id: string) => void\r\n    owner: boolean\r\n    pack: CardPackType\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const PackButtonsBlock: React.FC<PackButtonsBlockPropsType> = React.memo(({\r\n                                                                                     updatePack, choosePack, startLearn,\r\n                                                                                     deletePack, owner,\r\n                                                                                     pageStatus, pack\r\n                                                                                 }) => {\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const [showDeletePackModal, setShowDeletePackModal] = useState(false)\r\n    const {_id, cardsCount, user_id, name} = pack\r\n\r\n    return <>\r\n        <GeneralBTN btnType={\"edit\"} onClick={() => setShowEditModal(true)}\r\n                 disabled={!owner || pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"open\"} onClick={() => choosePack(_id, user_id)}\r\n                    disabled={pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"train\"} onClick={() => startLearn(_id, user_id)}\r\n                  disabled={pageStatus === \"loading\" || cardsCount === 0}/>\r\n        <GeneralBTN btnType={\"remove\"} onClick={() => setShowDeletePackModal(true)}\r\n                   disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <><OneInputModal\r\n                value={name}\r\n                placeholder={\"pack's name\"}\r\n                title={\"Edit pack's name\"}\r\n                active={showEditModal}\r\n                setActive={setShowEditModal}\r\n                handleOnSubmit={(text) => updatePack(text, _id)}/>\r\n            <QuestionModalContainer text={\"Delete this pack?\"}\r\n                                    activate={showDeletePackModal}\r\n                                    setActivate={setShowDeletePackModal}\r\n                                    setAnswerY={() => deletePack(_id)}\r\n                                    setAnswerN={() => {\r\n                                    }}/>\r\n        </>}\r\n    </>\r\n})","import React, {useState} from \"react\";\r\nimport {OneInputModal} from \"../ModalWindows/OneInputModal/OneInputModal\";\r\nimport {TableButton} from \"./TableButton/TableButton\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype AddPackBlockPropsType = {\r\n    createPack: (name: string) => void\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const AddPackBlock: React.FC<AddPackBlockPropsType> = React.memo(({createPack, pageStatus\r\n                                                                         }) => {\r\n    const [showCreatePackModal, setShowCreatePackModal] = useState(false)\r\n\r\n    return <>\r\n        <TableButton btnName={\"+\"} btnType={\"green\"} onClick={() => setShowCreatePackModal(true)}\r\n                     disabled={pageStatus === \"loading\"}/>\r\n        <OneInputModal title={\"Create pack\"}\r\n                       placeholder={\"please type a pack name\"}\r\n                       active={showCreatePackModal}\r\n                       setActive={setShowCreatePackModal}\r\n                       handleOnSubmit={createPack}\r\n        />\r\n    </>\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Checkbox.module.scss\";\r\n\r\ntype SortOutOwnPacksPropsType = {\r\n    onChange: (checkboxValue: boolean) => void\r\n    title: string\r\n    checked: boolean\r\n    disabled: boolean\r\n}\r\n\r\nexport const Checkbox: React.FC<SortOutOwnPacksPropsType> = React.memo(\r\n    ({disabled, onChange, title, checked}) => {\r\n    const setCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.checked)\r\n    }\r\n\r\n    return <div>\r\n        <input\r\n            className={classes.checkbox}\r\n            type={\"checkbox\"}\r\n            id={\"customCheckbox\"}\r\n            name={\"customCheckbox\"}\r\n            onChange={setCheckboxHandler}\r\n            disabled={disabled}\r\n            checked={checked}/>\r\n        <label htmlFor={\"customCheckbox\"}>\r\n            <h4>{title}</h4>\r\n        </label>\r\n    </div>\r\n})\r\n","import classes from './Packs.module.scss';\r\nimport React, {useCallback, useMemo} from 'react';\r\nimport {CardPackType} from \"../../../n1-main/m3-dal/packs-api\";\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport {SearchParamsType} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\nimport moment from \"moment\";\r\nimport {PackButtonsBlock} from \"../../../n1-main/m1-ui/common/Table/PackButtonsBlock\";\r\nimport {AddPackBlock} from \"../../../n1-main/m1-ui/common/Table/AddPackBlock\";\r\nimport {Checkbox} from \"../../../n1-main/m1-ui/common/Checkbox/Checkbox\";\r\n\r\ntype PropsType = {\r\n    packs: Array<CardPackType>\r\n    userId: string | undefined\r\n    page: number\r\n    pageCount: number\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n    searchParams: SearchParamsType\r\n    deletePack: (id: string) => void\r\n    createPack: (name: string) => void\r\n    updatePack: (name: string, id: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    choosePack: (packId: string, cardsOwner: string) => void\r\n    startLearn: (packId: string, cardsOwner: string) => void\r\n    setPacksSortColumn: (sortPacks: string) => void\r\n    pageStatus: StatusType\r\n    setGettingMyPacks: (checkboxValue: boolean) => void\r\n}\r\n\r\nconst Packs: React.FC<PropsType> = React.memo((props) => {\r\n    let {\r\n        packs, userId, page, setPacksSortColumn,\r\n        pageCount, cardPacksTotalCount, createPack,\r\n        deletePack, updatePack, changePage, choosePack,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {packName, user_id}, startLearn, setGettingMyPacks\r\n    } = props\r\n\r\n    const sortCardsCount = useCallback((sort: number) => setPacksSortColumn(sort + \"cardsCount\"), [])\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                <div style={{whiteSpace: \"pre\"}}>Name</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    {d.name}\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\"}} key={i}>\r\n                <div>Added</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => {\r\n                return <td style={{width: \"15%\"}} key={i}>{moment(d.created).format('Do MMM YY')}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"10%\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                <div>Cards count</div>\r\n                <ColumnSorting onClick={sortCardsCount} pageStatus={pageStatus}/>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"10%\"}} key={i}>{d.cardsCount}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"25%\"}} key={i}>Owner</th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"25%\"}} key={i}>{d.user_name}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", paddingRight: \"20px\", textAlign: \"right\"}} key={i}>\r\n                    <AddPackBlock createPack={createPack} pageStatus={pageStatus}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardPackType, i: number) => {\r\n                return <td style={{width: \"15%\", textAlign: \"right\", minHeight: \"100%\", display: \"flex\"}} key={i}>\r\n                    <PackButtonsBlock updatePack={updatePack}\r\n                                      choosePack={choosePack}\r\n                                      startLearn={startLearn}\r\n                                      deletePack={deletePack}\r\n                                      owner={userId === d.user_id} pack={d}\r\n                                      pageStatus={pageStatus}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus]);\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n\r\n                <div className={classes.packs__title}>\r\n                    <h3>Packs</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Checkbox\r\n                        onChange={setGettingMyPacks}\r\n                        title={\"show only my packs\"}\r\n                        checked={!!user_id}\r\n                        disabled={pageStatus === \"loading\"}/>\r\n                    <Search\r\n                        name={packName}\r\n                        label={\"Search\"}\r\n                        minValue={min}\r\n                        maxValue={max}\r\n                        stepValue={1}\r\n                        disabled={props.pageStatus === \"loading\"}\r\n                        setSearchParams={setSearchParams}/>\r\n                    <Table\r\n                        data={packs}\r\n                        model={testModel}\r\n                        disabled={props.pageStatus === \"loading\"}/>\r\n                    <Paginator\r\n                        currentPage={page}\r\n                        itemsTotalCount={cardPacksTotalCount}\r\n                        pageCount={pageCount}\r\n                        changePage={changePage}\r\n                        changePageCount={changePageCount}\r\n                        disabled={props.pageStatus === \"loading\"}\r\n                        itemsName={\"packs\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Packs;\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const packsApi = {\r\n    getPacks(params: QueryParamsPacksType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/pack\", {params})\r\n    },\r\n    createPack(cardsPack: CreateCardPackType) {\r\n        return instance.post<{ newCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete<{ deletedCardsPack: CardPackType }>(\"cards/pack\", {params: {id}})\r\n    },\r\n    updatePack(cardsPack: {name: string, _id: string}) {\r\n        return instance.put<{ updatedCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    }\r\n}\r\n\r\ntype QueryParamsPacksType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n\r\n}\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string // папка\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: \"pack\" | \"folder\" // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    cardsCount: number\r\n    more_id: string\r\n    private: boolean\r\n    user_name: string\r\n}\r\n\r\ntype CreateCardPackType = {\r\n    name?: string // если не отправить будет таким\r\n    path?: string // если не отправить будет такой\r\n    grade?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    deckCover?: string // не обязателен\r\n    private?: boolean // если не отправить будет такой\r\n    type?: \"pack\" | \"folder\" // если не отправить будет таким\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport {cardsApi, CardType, CreateCardType, GradeType, UpdateCardType} from \"../../m3-dal/cards-api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nenum ACTION_TYPES {\r\n    CHANGE_PAGE = \"cards/CHANGE_PAGE\",\r\n    CHANGE_PAGE_COUNT = \"cards/CHANGE_PAGE_COUNT\",\r\n    SET_CARDS = \"cards/SET_CARDS\",\r\n    SET_SEARCH_NAME = \"cards/SET_SEARCH_NAME\",\r\n    SET_SEARCH_PARAMS = \"cards/SET_SEARCH_PARAMS\",\r\n    SET_IS_LOADING = \"cards/SET_IS_LOADING\",\r\n    SET_PACK_ID = \"cards/SET_PACK_ID\",\r\n    SET_SORT_COLUMN = \"cards/SET_SORT_COLUMN\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    cardsPack_id: \"\" as string,\r\n    cardsOwner: \"\",\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    minGrade: 0,\r\n    maxGrade: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        cardQuestion: \"\",\r\n        cardAnswer: \"\",\r\n        sortCards: \"\",\r\n        min: 0,\r\n        max: 0,\r\n    }\r\n}\r\n\r\nexport const cardsReducer = (state: CardsStateType = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.CHANGE_PAGE:\r\n        case ACTION_TYPES.CHANGE_PAGE_COUNT:\r\n        case ACTION_TYPES.SET_IS_LOADING:\r\n        case ACTION_TYPES.SET_PACK_ID:\r\n        case ACTION_TYPES.SET_CARDS:\r\n            return {\r\n                ...state, ...action.payload,\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_NAME:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, cardQuestion: action.payload.question}\r\n            }\r\n        case ACTION_TYPES.SET_SEARCH_PARAMS:\r\n        case ACTION_TYPES.SET_SORT_COLUMN:\r\n            return {\r\n                ...state, searchParams: {...state.searchParams, ...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport const changeCardsPageAC = (page: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE, payload: {page}} as const\r\n}\r\nexport const changeCardsPageCountAC = (pageCount: number) => {\r\n    return {type: ACTION_TYPES.CHANGE_PAGE_COUNT, payload: {pageCount}} as const\r\n}\r\nconst setCardsAC = (cards: Array<CardType>, cardsTotalCount: number, minGrade: number, maxGrade: number, pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_CARDS, payload: {cards, cardsTotalCount, minGrade, maxGrade, pageStatus}} as const\r\n}\r\nexport const setCardsSearchQuestionAC = (question: string) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_NAME, payload: {question}} as const\r\n}\r\nexport const setCardsSearchParamsAC = (cardQuestion: string, min: number, max: number) => {\r\n    return {type: ACTION_TYPES.SET_SEARCH_PARAMS, payload: {cardQuestion, min, max}} as const\r\n}\r\nexport const setCardsPageStatus = (pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_IS_LOADING, payload: {pageStatus}} as const\r\n}\r\nexport const setPackAC = (cardsPack_id: string, cardsOwner: string) => {\r\n    return {type: ACTION_TYPES.SET_PACK_ID, payload: {cardsPack_id, cardsOwner}} as const\r\n}\r\nexport const setCardsSortColumnParamsAC = (sortCards: string) => {\r\n    return {type: ACTION_TYPES.SET_SORT_COLUMN, payload: {sortCards}} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const getCardsTC = (selectedPage?: number) => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    const {cardsPack_id, page, pageCount, searchParams: {cardQuestion, min, max, sortCards}} = getState().cards\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.getPack({\r\n            cardsPack_id,\r\n            page: selectedPage || page,\r\n            pageCount,\r\n            cardQuestion,\r\n            min,\r\n            max,\r\n            sortCards\r\n        })\r\n        dispatch(setCardsAC(response.data.cards,\r\n            response.data.cardsTotalCount,\r\n            response.data.minGrade,\r\n            response.data.maxGrade,\r\n            \"succeeded\"))\r\n        selectedPage && dispatch(changeCardsPageAC(selectedPage))\r\n        // console.log(getState().cards)\r\n    } catch (e) {\r\n        // console.log(\"get packs tc\")\r\n        // alert(e.response.data.error)\r\n        dispatch(setCardsPageStatus(\"failed\"))\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (cardId: string) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.deleteCard(cardId)\r\n        dispatch(getCardsTC())\r\n    } catch (e) {\r\n        // alert(e.response.data.error)\r\n        dispatch(setCardsPageStatus(\"failed\"))\r\n    }\r\n}\r\n\r\nexport const createCardTC = (card: CreateCardType) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>, getState: () => RootStateType) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    let {cardsPack_id} = getState().cards\r\n    try {\r\n        const response = await cardsApi.createCard({...card, cardsPack_id})\r\n        dispatch(getCardsTC(1))\r\n    } catch (e) {\r\n        // console.log(\"create tc\")\r\n        // alert(e.response.data.error)\r\n        dispatch(setCardsPageStatus(\"failed\"))\r\n    }\r\n}\r\n//under construction\r\nexport const updateCardTC = (card: UpdateCardType) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n    dispatch(setCardsPageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.updateCard(card)\r\n        dispatch(getCardsTC(1))\r\n    } catch (e) {\r\n        // alert(e.response.data.error)\r\n        dispatch(setCardsPageStatus(\"failed\"))\r\n    }\r\n}\r\n\r\n\r\nexport type CardsStateType = typeof initialState\r\nexport type CardsSearchParamsType = typeof initialState.searchParams\r\n\r\n\r\ntype ActionsType = ReturnType<typeof changeCardsPageAC>\r\n    | ReturnType<typeof changeCardsPageCountAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCardsSearchQuestionAC>\r\n    | ReturnType<typeof setCardsSearchParamsAC>\r\n    | ReturnType<typeof setCardsPageStatus>\r\n    | ReturnType<typeof setPackAC>\r\n    | ReturnType<typeof setCardsSortColumnParamsAC>\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsApi = {\r\n    getPack(params: QueryParamsCardsType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/card\", {params})\r\n    },\r\n    createCard(card: CreateCardType) {\r\n        return instance.post<{ newCard: CardType }>(\"/cards/card\", {card})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<{ deletedCard: CardType }>(\"/cards/card\", {params: {id}})\r\n    },\r\n    updateCard(card: UpdateCardType) {\r\n        return instance.put<{ updatedCard: CardType }>(\"/cards/card\", {card})\r\n    },\r\n    gradeCard(card: GradeType) {\r\n        return instance.put<{ updatedGrade: UpdateGrade }>(\"/cards/grade\", card)\r\n    }\r\n}\r\n\r\nexport type GradeType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\n\r\nexport type UpdateGrade = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}\r\ntype QueryParamsCardsType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    sortCards?: string\r\n    min?: number\r\n    max?: number\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    \"cards\": CardType[],\r\n    \"cardsTotalCount\": number,\r\n    \"minGrade\": number,\r\n    \"maxGrade\": number,\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n    \"token\": string,\r\n    \"tokenDeathTime\": number\r\n\r\n}\r\nexport type CardType = {\r\n    cardsPack_id: string,\r\n    _id: string\r\n    user_id: string\r\n    more_id: string\r\n    question: string,\r\n    questionImg: \"\"\r\n    questionVideo: \"\"\r\n    answer: string,\r\n    answerImg: \"\"\r\n    answerVideo: \"\"\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    created: string\r\n    updated: string\r\n    type: \"card\"\r\n    __v: number\r\n    comments: string,\r\n}\r\n\r\nexport type CreateCardType = {\r\n    cardsPack_id?: string\r\n    question?: string // если не отправить будет таким\r\n    answer?: string // если не отправить будет таким\r\n    grade?: number // 0..5, не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    answerImg?: string // не обязателен\r\n    questionImg?: string // не обязателен\r\n    questionVideo?: string // не обязателен\r\n    answerVideo?: string // не обязателен\r\n    type?: \"card\"\r\n}\r\nexport type UpdateCardType = {\r\n    question?: string,\r\n    answer?: string,\r\n    _id: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport {cardsApi, CardType, GradeType} from \"../../m3-dal/cards-api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nenum ACTION_TYPES {\r\n    SET_CARDS = \"practice/SET_CARDS\",\r\n    SET_IS_LOADING = \"practice/SET_IS_LOADING\",\r\n    SET_PACK_ID = \"practice/SET_PACK_ID\",\r\n    SET_CARD_IS_LOADING = \"practice/SET_CARD_IS_LOADING\",\r\n    UPDATE_GRADE = \"practice/UPDATE_GRADE\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    cardsPack_id: \"\" as string,\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    cardIsLoading: false,\r\n}\r\n\r\nexport const practiceReducer = (state: PracticeStateType = initialState, action: ActionsType): PracticeStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.SET_IS_LOADING:\r\n        case ACTION_TYPES.SET_PACK_ID:\r\n        case ACTION_TYPES.SET_CARDS:\r\n        case ACTION_TYPES.SET_CARD_IS_LOADING:\r\n            return {\r\n                ...state, ...action.payload,\r\n            }\r\n\r\n        case ACTION_TYPES.UPDATE_GRADE:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(\r\n                    card => card._id === action.payload.card_id ? {...card, ...action.payload} : card\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// action creators\r\n\r\n\r\nconst setPracticeCardsAC = (cards: Array<CardType>, cardsTotalCount: number, pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_CARDS, payload: {cards, cardsTotalCount, pageStatus}} as const\r\n}\r\nexport const setPracticePageStatus = (pageStatus: StatusType) => {\r\n    return {type: ACTION_TYPES.SET_IS_LOADING, payload: {pageStatus}} as const\r\n}\r\nexport const setPracticePackAC = (cardsPack_id: string) => {\r\n    return {type: ACTION_TYPES.SET_PACK_ID, payload: {cardsPack_id}} as const\r\n}\r\nexport const setCardIsLoadingAC = (cardIsLoading: boolean) => {\r\n    return {type: ACTION_TYPES.SET_CARD_IS_LOADING, payload: {cardIsLoading}} as const\r\n}\r\nexport const updateCardGradeAC = (card_id: string, grade: number, shots: number) => {\r\n    return {type: ACTION_TYPES.UPDATE_GRADE, payload: {card_id, grade, shots}} as const\r\n}\r\n\r\n\r\n// thunks\r\n\r\nexport const getPracticeCardsTC = () => async (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    const {cardsPack_id} = getState().practice\r\n    dispatch(setPracticePageStatus(\"loading\"))\r\n    try {\r\n        const response = await cardsApi.getPack({cardsPack_id, pageCount: 200})\r\n        dispatch(setPracticeCardsAC(response.data.cards, response.data.cardsTotalCount, \"succeeded\"))\r\n    } catch (e) {\r\n        dispatch(setPracticePageStatus(\"failed\"))\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\nexport const updateGradeTC = (card: GradeType) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, {}, ActionsType>) => {\r\n        dispatch(setCardIsLoadingAC(true))\r\n        dispatch(setPracticePageStatus(\"loading\"))\r\n        try {\r\n            const response = await cardsApi.gradeCard(card)\r\n            let {data: {updatedGrade: {card_id, grade, shots}}} = response\r\n            dispatch(updateCardGradeAC(card_id, grade, shots))\r\n            dispatch(setCardIsLoadingAC(false))\r\n            dispatch(setPracticePageStatus(\"succeeded\"))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\nexport type PracticeStateType = typeof initialState\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setPracticePageStatus>\r\n    | ReturnType<typeof setPracticeCardsAC>\r\n    | ReturnType<typeof setPracticePackAC>\r\n    | ReturnType<typeof setCardIsLoadingAC>\r\n    | ReturnType<typeof updateCardGradeAC>\r\n","import React, {ChangeEvent, useCallback, useEffect} from 'react';\r\nimport Packs from \"./Packs\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {\r\n    changePageAC,\r\n    changePageCountAC,\r\n    createPackTC,\r\n    deletePackTC,\r\n    getPacksTC, PacksStateType, setPacksSortColumnAC, setSearchParamsAC, setUserIdAC,\r\n    updatePackTC\r\n} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {setPackAC} from \"../../../n1-main/m2-bll/reducers/cards-reducer\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nconst PacksContainer = React.memo(() => {\r\n\r\n    // console.log(\"packs container\")\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const {packs, min, max, page, pageCount, cardPacksTotalCount, pageStatus, searchParams, getMyPacks} =\r\n        useSelector<RootStateType, PacksStateType>(state => state.packs)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.profile.userData?._id)\r\n\r\n\r\n    const deletePackHandler = useCallback((id: string) => {\r\n        dispatch(deletePackTC(id))\r\n    }, [])\r\n    const createPackHandler = useCallback((name: string) => {\r\n        dispatch(createPackTC(name))\r\n    }, [])\r\n    const updatePackHandler = useCallback((name: string, id: string) => {\r\n        dispatch(updatePackTC(name, id))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changePageAC(page))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changePageCountAC(pageCount))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((searchName: string, min: number, max: number) => {\r\n        dispatch(setSearchParamsAC(searchName, min, max))\r\n    }, [])\r\n    const setPacksSortColumnHandler = useCallback((sortPacks: string) => {\r\n        dispatch(setPacksSortColumnAC(sortPacks))\r\n    }, [])\r\n    const choosePackHandler = useCallback((packId: string, cardsOwner: string) => {\r\n        dispatch(setPackAC(packId, cardsOwner))\r\n        history.push(`/cards/${packId}`)\r\n    }, [])\r\n    const startLearnHandler = useCallback((packId: string, cardsOwner: string) => {\r\n        dispatch(setPackAC(packId, cardsOwner))\r\n        history.push(`/learn/${packId}`)\r\n    }, [])\r\n    const setGettingMyPacks = (checkboxValue: boolean) => {\r\n        if (checkboxValue) {\r\n            dispatch(setUserIdAC(userId as string))\r\n        } else {\r\n            dispatch(setUserIdAC(\"\"))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [page, pageCount, searchParams, getMyPacks])\r\n\r\n    if (!packs || pageStatus === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Packs packs={packs}\r\n               userId={userId}\r\n               page={page}\r\n               min={min}\r\n               max={max}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardPacksTotalCount={cardPacksTotalCount}\r\n               createPack={createPackHandler}\r\n               deletePack={deletePackHandler}\r\n               updatePack={updatePackHandler}\r\n               changePage={changePageHandler}\r\n               choosePack={choosePackHandler}\r\n               startLearn={startLearnHandler}\r\n               setPacksSortColumn={setPacksSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n               setGettingMyPacks={setGettingMyPacks}\r\n        />\r\n    );\r\n})\r\n\r\nexport default PacksContainer;\r\n","import React from \"react\";\r\nimport classes from \"./ThreeInputModal.module.scss\";\r\nimport {Modal} from \"../Modal\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype InputModalType = {\r\n    title: string\r\n    firstInputValue?: string\r\n    secondInputValue?: string\r\n    thirdInputValue?: string\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n    handleOnSubmit: (question: string, answer: string, comment: string) => void\r\n}\r\n\r\nexport const ThreeInputModal: React.FC<InputModalType> = ({title, firstInputValue,\r\n                                                              secondInputValue, thirdInputValue,\r\n                                                              active, setActive, handleOnSubmit}) => {\r\n\r\n    console.log(firstInputValue, secondInputValue, thirdInputValue)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: firstInputValue || \"\",\r\n            answer: secondInputValue || \"\",\r\n            comment: thirdInputValue || \"\"\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            handleOnSubmit(values.question, values.answer, values.comment)\r\n            resetForm()\r\n            setActive(false)\r\n        }\r\n    })\r\n\r\n    return <Modal active={active} setActive={setActive}>\r\n            <div className={classes.closeButton}>\r\n                <TableButton\r\n                    btnName={\"X\"}\r\n                    onClick={() => setActive(false)}\r\n                />\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.inputModal}>\r\n                <h3>{title}</h3>\r\n                <textarea placeholder={\"question\"} {...formik.getFieldProps(\"question\")} />\r\n                <textarea  placeholder={\"answer\"} {...formik.getFieldProps(\"answer\")} />\r\n                <textarea  placeholder={\"comment\"} {...formik.getFieldProps(\"comment\")} />\r\n                <div>\r\n                    <Button\r\n                        btnName={\"Save\"}\r\n                        btnType={\"green\"}\r\n                        type={\"submit\"}\r\n                    />\r\n                    <Button\r\n                        btnName={\"Reset\"}\r\n                        type={\"reset\"}\r\n                        style={{marginLeft: \"10px\"}}\r\n                        onClick={() => formik.setValues({question: \"\", answer: \"\", comment: \"\"})}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {QuestionModalContainer} from \"../ModalWindows/QuestionModal/QuestionModalContainer\";\r\nimport {ThreeInputModal} from \"../ModalWindows/ThreeInputModal/ThreeInputModal\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\nimport {CardType} from \"../../../m3-dal/cards-api\";\r\nimport {GeneralBTN} from \"./GeneralBTN/GeneralBTN\";\r\n\r\ntype CardButtonsBlockPropsType = {\r\n    deleteCard: (id: string) => void\r\n    updateCard: (cardId: string, question: string, answer: string) => void\r\n    owner: boolean\r\n    pageStatus: StatusType\r\n    card: CardType\r\n}\r\n\r\nexport const CardButtonsBlock: React.FC<CardButtonsBlockPropsType> = React.memo(({\r\n                                                                                     deleteCard,\r\n                                                                                     updateCard, owner,\r\n                                                                                     pageStatus, card\r\n                                                                                 }) => {\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const {_id, question, answer, comments} = card\r\n\r\n    return <>\r\n        <GeneralBTN btnType={\"edit\"} onClick={() => setShowEditModal(true)}\r\n                 disabled={!owner || pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"remove\"} onClick={() => setShowDeleteModal(true)}\r\n                   disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <><QuestionModalContainer text={\"Delete this card?\"}\r\n                                    activate={showDeleteModal}\r\n                                    setActivate={setShowDeleteModal}\r\n                                    setAnswerY={() => deleteCard(_id)}\r\n                                    setAnswerN={() => {\r\n                                    }}/>\r\n            <ThreeInputModal title={\"Edit card\"}\r\n                             handleOnSubmit={(question, answer, comment) => updateCard(_id, question, answer)}\r\n                             setActive={setShowEditModal}\r\n                             firstInputValue={question}\r\n                             secondInputValue={answer}\r\n                             thirdInputValue={comments}\r\n                             active={showEditModal}/>\r\n        </>}\r\n    </>\r\n})\r\n","import React, {useState} from \"react\";\r\nimport {ThreeInputModal} from \"../ModalWindows/ThreeInputModal/ThreeInputModal\";\r\nimport {TableButton} from \"./TableButton/TableButton\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype AddCardBlockPropsType = {\r\n    createCard: (question: string, answer: string) => void\r\n    pageStatus: StatusType\r\n    owner: boolean\r\n}\r\n\r\nexport const AddCardBlock: React.FC<AddCardBlockPropsType> = ({createCard, pageStatus, owner}) => {\r\n    const [showCreateModal, setShowCreateModal] = useState(false)\r\n\r\n    return <>\r\n        <TableButton btnName={\"+\"} btnType={\"green\"}\r\n                     onClick={() => setShowCreateModal(true)}\r\n                     disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <ThreeInputModal title={\"Create card\"}\r\n                                     handleOnSubmit={createCard}\r\n                                     setActive={setShowCreateModal}\r\n                                     active={showCreateModal}/>}\r\n    </>\r\n}\r\n","import classes from './Cards.module.scss';\r\nimport React, {useCallback, useMemo} from 'react';\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport {CardsSearchParamsType} from '../../../n1-main/m2-bll/reducers/cards-reducer';\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\nimport moment from \"moment\";\r\nimport {CardButtonsBlock} from \"../../../n1-main/m1-ui/common/Table/CardButtonsBlock\";\r\nimport {AddCardBlock} from \"../../../n1-main/m1-ui/common/Table/AddCardBlock\";\r\n\r\n\r\ntype PropsType = {\r\n    cards: Array<CardType>\r\n    owner: boolean\r\n    page: number\r\n    pageCount: number\r\n    min: number\r\n    max: number\r\n    cardsTotalCount: number\r\n    searchParams: CardsSearchParamsType\r\n    deleteCard: (id: string) => void\r\n    createCard: (question: string, answer: string) => void\r\n    updateCard: (cardId: string, question: string, answer: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    pageStatus: StatusType\r\n    setSortColumn: (sortCards: string) => void\r\n}\r\n\r\nconst Cards: React.FC<PropsType> = React.memo((props) => {\r\n    let {\r\n        cards, page, owner, setSortColumn,\r\n        pageCount, cardsTotalCount,\r\n        createCard, deleteCard, updateCard, changePage,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {cardQuestion}\r\n    } = props\r\n\r\n    const sortGrade = useCallback((sort: number) => setSortColumn(sort + \"grade\"), [])\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                <span>Question</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.question}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\"}} key={i}>Answer</th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.answer}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\"}} key={i}>\r\n                <span>Added</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => {\r\n                return <td style={{width: \"15%\"}} key={i}>{moment(d.created).format('Do MMM YY')}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                    <div>Grade</div>\r\n                    <ColumnSorting onClick={sortGrade} pageStatus={pageStatus}/>\r\n                </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"15%\"}} key={i}>{d.grade.toFixed(2)}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\", textAlign: \"right\"}} key={i}>\r\n                    <AddCardBlock createCard={createCard} pageStatus={pageStatus} owner={owner}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardType, i: number) => {\r\n\r\n                return <td style={{width: \"15%\", textAlign: \"right\", minHeight: \"100%\", display: \"flex\"}} key={i}>\r\n                    <CardButtonsBlock\r\n                        deleteCard={deleteCard}\r\n                        updateCard={updateCard}\r\n                        owner={owner}\r\n                        pageStatus={pageStatus}\r\n                        card={d}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus, owner])\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n                <div className={classes.packs__title}>\r\n                    <h3>Cards</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Search name={cardQuestion}\r\n                            label={\"Search\"}\r\n                            minValue={min}\r\n                            maxValue={max}\r\n                            stepValue={1}\r\n                            disabled={props.pageStatus === \"loading\"}\r\n                            setSearchParams={setSearchParams}/>\r\n                    <Table data={cards}\r\n                           model={testModel}\r\n                           disabled={props.pageStatus === \"loading\"}/>\r\n                    <Paginator currentPage={page}\r\n                               itemsTotalCount={cardsTotalCount}\r\n                               pageCount={pageCount}\r\n                               changePage={changePage}\r\n                               changePageCount={changePageCount}\r\n                               disabled={props.pageStatus === \"loading\"}\r\n                               itemsName={\"cards\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Cards\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Cards from \"./Cards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {\r\n    CardsStateType,\r\n    changeCardsPageAC, changeCardsPageCountAC, createCardTC,\r\n    deleteCardTC,\r\n    getCardsTC, setCardsSearchParamsAC, setCardsSortColumnParamsAC, setPackAC, updateCardTC\r\n} from \"../../../n1-main/m2-bll/reducers/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CardsContainer = React.memo(() => {\r\n\r\n    // console.log(\"cards container\")\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        cards, cardsOwner, cardsPack_id, minGrade, maxGrade, page, pageCount, cardsTotalCount, pageStatus, searchParams\r\n        } = useSelector<RootStateType, CardsStateType>(state => state.cards)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.profile.userData?._id)\r\n\r\n\r\n    let {packId} = useParams<{packId: string}>()\r\n    if (cardsPack_id !== packId) {\r\n        dispatch(setPackAC(packId, \"\"))\r\n    }\r\n    // console.log(cardsOwner, userId)\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCardTC(cardId))\r\n    }, [])\r\n    const createCardHandler = useCallback((question: string, answer: string) => {\r\n        dispatch(createCardTC({question, answer}))\r\n    }, [])\r\n    const updateCardHandler = useCallback((cardId: string, question: string, answer: string) => {\r\n        dispatch(updateCardTC({question, _id: cardId, answer}))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changeCardsPageAC(page))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changeCardsPageCountAC(pageCount))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((cardQuestion: string, min: number, max: number) => {\r\n        dispatch(setCardsSearchParamsAC(cardQuestion, min, max))\r\n    }, [])\r\n    const setSortColumnHandler = useCallback((sortCards: string) => {\r\n        dispatch(setCardsSortColumnParamsAC(sortCards))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC())\r\n\r\n    }, [page, pageCount, searchParams, cardsPack_id])\r\n\r\n    if (!cardsPack_id || !cards || pageStatus === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <Cards cards={cards}\r\n               page={page}\r\n               owner={cardsOwner===userId}\r\n               min={minGrade}\r\n               max={maxGrade}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardsTotalCount={cardsTotalCount}\r\n               createCard={createCardHandler}\r\n               deleteCard={deleteCardHandler}\r\n               updateCard={updateCardHandler}\r\n               changePage={changePageHandler}\r\n               setSortColumn={setSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n        />\r\n    );\r\n})\r\n\r\nexport default CardsContainer;\r\n","import React from \"react\";\r\nimport classes from \"./PageNotFound.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../m2-bll/store\";\r\n\r\nexport const PageNotFound = () => {\r\n\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n    const history = useHistory()\r\n\r\n    const buttonHandler = () => {\r\n        if (isLoggedSuccess) {\r\n            history.push('/profile')\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrap}>\r\n            <h2 className={classes.title}>404</h2>\r\n            <h3 className={classes.subtitle}>Sorry, the page not found...</h3>\r\n            <Button btnName={'Go back'} btnType={'green'} onClick={buttonHandler}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport classes from \"./Practice.module.scss\";\r\n\r\n\r\n\r\nconst grades = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r\n\r\ntype PropsType = {\r\n    card: CardType\r\n    gradeCard: (cardId: string, grade: number) => void\r\n    isLoading: boolean\r\n    onNext: () => void\r\n}\r\n\r\nconst Practice: React.FC<PropsType> = React.memo(({card, isLoading, gradeCard, onNext}) => {\r\n\r\n    const [isChecked, setIsChecked] = useState(false)\r\n\r\n    const onGradeButtonHandler = async (grade: number) => {\r\n        await gradeCard(card._id, grade)\r\n        setIsChecked(false)\r\n    }\r\n\r\n    const onNextHandler = () => {\r\n        onNext()\r\n        setIsChecked(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.practice}>\r\n            <div className={classes.practice__container}>\r\n                <div className={classes.card}>\r\n                    <div style={isChecked ? {transform: \"rotateX(180deg)\"} : {}} className={classes.card__inner}>\r\n                        <div className={classes.card__front}\r\n                             onClick={() => setIsChecked(true)}>\r\n                            <div className={classes.card__text}>\r\n                                <div>{card.question}</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className={classes.card__back}>\r\n                            <div className={classes.card__text} onClick={()=>setIsChecked(false)}>\r\n                                <div>{card.answer}</div>\r\n                            </div>\r\n\r\n                            <div className={classes.card__back_bottom}>\r\n                                {grades.map((g, i) => (\r\n                                    <Button onClick={() => onGradeButtonHandler(i+1)}\r\n                                            key={'grade-' + i}\r\n                                            disabled={isLoading}\r\n                                            btnName={g}/>\r\n                                ))}\r\n\r\n                                <div className={classes.card__next_btn} onClick={onNextHandler}>next</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n);\r\n})\r\n\r\nexport default Practice;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport Practice from './Practice';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getPracticeCardsTC, PracticeStateType, setPracticePackAC, updateGradeTC} from \"../../../n1-main/m2-bll/reducers/practice-reducer\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\n\r\n\r\nconst getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    // console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\nconst PracticeContainer: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {cards, cardsPack_id, cardIsLoading} = useSelector<RootStateType, PracticeStateType>(state => state.practice)\r\n    const [card, setCard] = useState<CardType | null>(null)\r\n\r\n    let {packId} = useParams<{ packId: string }>()\r\n    if (cardsPack_id !== packId) {\r\n        dispatch(setPracticePackAC(packId))\r\n    }\r\n\r\n    const gradeCardHandler = useCallback(async (cardId: string, grade: number) => {\r\n        await dispatch(updateGradeTC({card_id: cardId, grade}))\r\n    }, [])\r\n\r\n    const onNextHandler = useCallback(() => {\r\n        if (cards.length) setTimeout(setCard, 300, getCard(cards))\r\n    }, [cards])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getPracticeCardsTC())\r\n        return () => setCard(null)\r\n    }, [cardsPack_id])\r\n\r\n    useEffect(() => {\r\n        if (cards.length) setTimeout(setCard, 300, getCard(cards))\r\n        // return () => {\r\n        //     console.log(\"set\")\r\n        //     setCard(null)\r\n        // }\r\n    },[cards])\r\n\r\n\r\n    if (cardsPack_id !== packId || !card) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Practice card={card}\r\n                  onNext={onNextHandler}\r\n                  gradeCard={gradeCardHandler}\r\n                  isLoading={cardIsLoading}\r\n        />\r\n    );\r\n});\r\n\r\nexport default PracticeContainer;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport ProfileContainer from \"../../../n2-features/f1-auth/a5-profile/ProfileContainer\";\r\nimport LoginContainer from \"../../../n2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RegisterContainer from \"../../../n2-features/f1-auth/a2-register/RegisterContainer\";\r\nimport RestoreContainer from \"../../../n2-features/f1-auth/a3-restore/RestoreContainer\";\r\nimport NewPasswordContainer from \"../../../n2-features/f1-auth/a4-new-password/NewPasswordContainer\";\r\nimport AuthRedirect from \"../common/AuthRedirect/AuthRedirect\";\r\nimport PacksContainer from \"../../../n2-features/f2-cards/c1-packs/PacksContainer\";\r\nimport CardsContainer from \"../../../n2-features/f2-cards/c2-cards/CardsContainer\";\r\nimport {PageNotFound} from \"../common/Page404/PageNotFound\";\r\nimport PracticeContainer from \"../../../n2-features/f3-learn/l1-practice/PracticeContainer\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={\"/profile\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n            <Route path={\"/login\"} render={() => <LoginContainer/>}/>\r\n            <Route path={\"/register\"} render={() => <RegisterContainer/>}/>\r\n            <Route path={\"/restore\"} render={() => <RestoreContainer/>}/>\r\n            <Route path={\"/newPassword/:token\"} render={() => <NewPasswordContainer/>}/>\r\n            <Route path={\"/packs\"} render={() => <AuthRedirect><PacksContainer/></AuthRedirect>}/>\r\n            <Route path={\"/cards/:packId\"} render={() => <AuthRedirect><CardsContainer/></AuthRedirect>}/>\r\n            <Route path={\"/learn/:packId\"} render={() => <AuthRedirect><PracticeContainer/></AuthRedirect>}/>\r\n            <Route exact path={\"/\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n            <Route path={\"*\"} render={() => <PageNotFound/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport classes from \"./Main.module.css\";\r\nimport Routes from \"../Routes/Routes\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <div className={classes.main}>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './Main/Main';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {newPasswordReducer} from \"./reducers/newPassword-reducer\";\r\nimport {profileReducer} from \"./reducers/profileP-reducer\";\r\nimport {registerReducer} from \"./reducers/register-reducer\";\r\nimport {restorePasswordReducer} from \"./reducers/restorePassword-reducer\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {packsReducer} from \"./reducers/packs-reducer\";\r\nimport {cardsReducer} from \"./reducers/cards-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport { practiceReducer } from \"./reducers/practice-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer,\r\n    practice: practiceReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}