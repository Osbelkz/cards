{"version":3,"sources":["n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/NavItem/NavItem.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/Routes/Routes.module.css","n1-main/m1-ui/Header/Header.module.css","n1-main/m1-ui/Main/Main.module.css","n1-main/m1-ui/common/NavItem/NavItem.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/Profile/Profile.tsx","n1-main/m1-ui/Profile/ProfileContainer.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a1-login/LoginContainer.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a2-register/RegisterContainer.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n2-features/f1-auth/a3-restore/RestoreContainer.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n2-features/f1-auth/a4-new-password/NewPasswordContainer.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/login-reducer.ts","n1-main/m2-bll/reducers/newPassword-reducer.ts","n1-main/m2-bll/reducers/profileP-reducer.ts","n1-main/m2-bll/reducers/register-reducer.ts","n1-main/m2-bll/reducers/restorePassword-reducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","NavItem","path","title","to","className","classes","navItem","activeClassName","active","Routes","routes","Header","header","Profile","profile","ProfileContainer","useDispatch","Login","login","LoginContainer","Register","register","RegisterContainer","Restore","restore","RestoreContainer","NewPassword","newPassword","NewPasswordContainer","Button","React","memo","onClick","btnType","btnName","disabled","buttonClasses","button","Input","props","onPressEnter","useCallback","e","key","addData","input","type","onBlur","autoFocus","placeholder","placeHolder","error","input__elem","onChange","currentTarget","value","onKeyPress","Main","main","render","alert","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","state","action","restorePassword","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0cbc42ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2b9yi\",\"input__elem\":\"Input_input__elem__2Zzrh\",\"error\":\"Input_error__25Smj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__3DieS\",\"active\":\"NavItem_active___rzAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ir3Eb\",\"green\":\"Button_green__3fh93\",\"red\":\"Button_red__1bozl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Routes_routes__1uq8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3zo7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2rISc\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.css\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n}\r\n\r\nconst NavItem: React.FC<PropsType> = ({path, title}) => {\r\n    return (\r\n            <NavLink to={path} className={classes.navItem} activeClassName={classes.active}>{title}</NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport classes from \"./Routes.module.css\";\r\nimport NavItem from \"../common/NavItem/NavItem\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <nav className={classes.routes}>\r\n            <NavItem path={\"/profile\"} title={\"Profile\"}/>\r\n            <NavItem path={\"/login\"} title={\"Login\"}/>\r\n            <NavItem path={\"/register\"} title={\"Registration\"}/>\r\n            <NavItem path={\"/restore\"} title={\"Restore password\"}/>\r\n            <NavItem path={\"/newPassword\"} title={\"New password\"}/>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Routes from \"../Routes/Routes\";\r\nimport classes from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={classes.header}>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            Profile page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst ProfileContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Profile/>\r\n    );\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import React from 'react';\r\nimport classes from \"./Login.module.css\";\r\n\r\n\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className={classes.login}>\r\n            Login page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport Login from \"./Login\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst LoginContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Login />\r\n    );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport classes from \"./Register.module.css\";\r\n\r\nconst Register = () => {\r\n    return (\r\n        <div className={classes.register}>\r\n            Registration page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport Register from \"./Register\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst RegisterContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Register />\r\n    );\r\n};\r\n\r\nexport default RegisterContainer;\r\n","import React from 'react';\r\nimport classes from \"./Restore.module.css\";\r\n\r\n\r\n\r\nconst Restore = () => {\r\n    return (\r\n        <div className={classes.restore}>\r\n            Restore password page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Restore;\r\n","import React from 'react';\r\nimport Restore from \"./Restore\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst RestoreContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Restore />\r\n    );\r\n};\r\n\r\nexport default RestoreContainer;\r\n","import React from 'react';\r\nimport classes from \"./NewPassword.module.css\";\r\n\r\nconst NewPassword = () => {\r\n    return (\r\n        <div className={classes.newPassword}>\r\n            New password page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewPassword;\r\n","import React from 'react';\r\nimport NewPassword from \"./NewPassword\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst NewPasswordContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <NewPassword />\r\n    );\r\n};\r\n\r\nexport default NewPasswordContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ntype PropsType = {\r\n    onClick: () => void\r\n    btnName: string\r\n    disabled?: boolean\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const Button = React.memo(({onClick, btnType, btnName, disabled}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses}\r\n                    disabled={disabled}\r\n                    onClick={onClick}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport classes from \"./Input.module.css\";\r\nimport {KeyboardEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    onChange: (text: string) => void\r\n    disabled?: boolean\r\n    value: string\r\n    addData?: () => void\r\n    error?: boolean\r\n    placeHolder?: string\r\n    autoFocus?: boolean\r\n    onBlur?: ()=>void\r\n}\r\n\r\nexport const Input = React.memo( (props: PropsType) => {\r\n\r\n    const onPressEnter = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.addData && props.addData()\r\n        }\r\n    }, [props.addData])\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.input}>\r\n                <input type=\"text\"\r\n                       onBlur={props.onBlur}\r\n                       autoFocus={props.autoFocus}\r\n                       placeholder={props.placeHolder}\r\n                       className={props.error ? `${classes.input__elem} ${classes.error}` : classes.input__elem}\r\n                       onChange={e => props.onChange(e.currentTarget.value)}\r\n                       onKeyPress={onPressEnter}\r\n                       value={props.value}\r\n                       disabled={props.disabled}/>\r\n                {/*<div className={props.error ? classes.input__error : \"\"}>{props.error}</div>*/}\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Header from \"../Header/Header\";\r\nimport classes from \"./Main.module.css\";\r\nimport ProfileContainer from \"../Profile/ProfileContainer\";\r\nimport LoginContainer from \"../../../n2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RegisterContainer from \"../../../n2-features/f1-auth/a2-register/RegisterContainer\";\r\nimport RestoreContainer from \"../../../n2-features/f1-auth/a3-restore/RestoreContainer\";\r\nimport NewPasswordContainer from \"../../../n2-features/f1-auth/a4-new-password/NewPasswordContainer\";\r\nimport {Button} from \"../common/Button/Button\";\r\nimport {Input} from \"../common/Input/Input\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <div className={classes.main}>\r\n            <Header/>\r\n            <br/>\r\n            <Switch>\r\n                <Route path={\"/profile\"} render={() => <ProfileContainer/>}/>\r\n                <Route path={\"/login\"} render={() => <LoginContainer/>}/>\r\n                <Route path={\"/register\"} render={() => <RegisterContainer/>}/>\r\n                <Route path={\"/restore\"} render={() => <RestoreContainer/>}/>\r\n                <Route path={\"/newPassword\"} render={() => <NewPasswordContainer/>}/>\r\n                <Route path={\"*\"} render={() => <ProfileContainer/>}/>\r\n            </Switch>\r\n            <div>\r\n                <br/>\r\n                <div>\r\n                    <div>\r\n                        <h3>Regular</h3>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}/>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}\r\n                                disabled={true}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Green</h3>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}\r\n                                btnType={\"green\"}/>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}\r\n                                btnType={\"green\"}\r\n                                disabled={true}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Red</h3>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}\r\n                                btnType={\"red\"}/>\r\n                        <Button onClick={() => alert(\"clicked\")}\r\n                                btnName={\"Button\"}\r\n                                btnType={\"red\"}\r\n                                disabled={true}/>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <h3>Input</h3>\r\n                    <Input onChange={() => alert(\"was changed\")}\r\n                           value={\"sadf\"}\r\n                           placeHolder={\"input\"}/>\r\n                    <Input onChange={() => alert(\"was changed\")}\r\n                           value={\"\"}\r\n                           placeHolder={\"input\"}\r\n                           disabled={true}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Main/Main';\n\nconst App = () => {\n\n    return (\n        <div className=\"App\">\n            <Main />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nexport type LoginStateType = typeof initialState\r\n\r\nconst initialState = {}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = any\r\n","\r\nexport type NewPasswordStateType = typeof initialState\r\n\r\nconst initialState = {}\r\n\r\nexport const newPasswordReducer = (state = initialState, action: ActionsType): NewPasswordStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = any\r\n","\r\nexport type ProfileStateType = typeof initialState\r\n\r\nconst initialState = {}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = any\r\n","\r\nexport type RegisterStateType = typeof initialState\r\n\r\nconst initialState = {}\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): RegisterStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type ActionsType = any\r\n","\r\nexport type RestorePasswordStateType = typeof initialState\r\n\r\nconst initialState = {}\r\n\r\nexport const restorePasswordReducer = (state = initialState, action: ActionsType): RestorePasswordStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = any\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { loginReducer } from \"./reducers/login-reducer\";\r\nimport { newPasswordReducer } from \"./reducers/newPassword-reducer\";\r\nimport { profileReducer } from \"./reducers/profileP-reducer\";\r\nimport { registerReducer } from \"./reducers/register-reducer\";\r\nimport { restorePasswordReducer } from \"./reducers/restorePassword-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register : registerReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}