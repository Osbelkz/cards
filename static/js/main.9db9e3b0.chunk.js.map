{"version":3,"sources":["n2-features/f1-auth/a1-login/Login.module.scss","n2-features/f3-learn/l1-practice/Practice.module.scss","n2-features/f1-auth/a3-restore/Restore.module.scss","n2-features/f1-auth/a4-new-password/NewPassword.module.scss","n2-features/f1-auth/a2-register/Register.module.scss","n1-main/m1-ui/common/ModalWindows/Modal.module.scss","n1-main/m1-ui/common/Table/GeneralBTN/GeneralBTN.module.scss","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/Slider/Slider.module.scss","n1-main/m1-ui/Header/Nav/Nav.module.css","n2-features/f1-auth/a5-profile/Profile.module.css","n2-features/f2-cards/c1-packs/Packs.module.scss","n1-main/m1-ui/common/Table/Table.module.scss","n2-features/f2-cards/c2-cards/Cards.module.scss","n1-main/m1-ui/common/Paginator/Paginator.module.scss","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.module.scss","n1-main/m1-ui/common/Page404/PageNotFound.module.css","n1-main/m1-ui/common/NavItem/NavItem.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Preloader/Preloader.module.scss","n1-main/m1-ui/common/Search/Search.module.scss","n1-main/m1-ui/common/Table/TableButton/TableButton.module.scss","n1-main/m1-ui/common/ModalWindows/OneInputModal/OneInputModal.module.scss","n1-main/m1-ui/common/ModalWindows/ThreeInputModal/ThreeInputModal.module.scss","n1-main/m1-ui/Main/Main.module.css","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModal.module.scss","n3-assets/Pencil-Outline.svg","n3-assets/Folder-Outline.svg","n3-assets/Fitness_Fill.svg","n3-assets/Trash-Outline.svg","n1-main/m1-ui/common/Checkbox/Checkbox.module.scss","n1-main/m1-ui/common/NavItem/NavItem.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/Header/Nav/Nav.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/reducers/app-reducer.ts","n1-main/m2-bll/reducers/login-reducer.ts","n1-main/m1-ui/Header/Header.tsx","n2-features/f1-auth/a5-profile/Profile.tsx","n2-features/f1-auth/a5-profile/ProfileContainer.tsx","n1-main/m1-ui/common/Input/Input.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a1-login/LoginContainer.tsx","n2-features/f1-auth/a2-register/Register.tsx","n1-main/m2-bll/reducers/register-reducer.ts","n2-features/f1-auth/a2-register/RegisterContainer.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n1-main/m2-bll/reducers/restorePassword-reducer.ts","n2-features/f1-auth/a3-restore/RestoreContainer.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m2-bll/reducers/newPassword-reducer.ts","n2-features/f1-auth/a4-new-password/NewPasswordContainer.tsx","n1-main/m1-ui/common/Preloader/Preloader.tsx","n1-main/m1-ui/common/AuthRedirect/AuthRedirect.tsx","n1-main/m1-ui/common/Table/Table.tsx","n1-main/m1-ui/common/Slider/Slider.tsx","n1-main/m1-ui/common/Search/Search.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n1-main/m1-ui/common/ColumnSorting/ColumnSorting.tsx","n1-main/m1-ui/common/ModalWindows/Modal.tsx","n1-main/m1-ui/common/Table/TableButton/TableButton.tsx","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModal.tsx","n1-main/m1-ui/common/ModalWindows/QuestionModal/QuestionModalContainer.tsx","n1-main/m1-ui/common/ModalWindows/OneInputModal/OneInputModal.tsx","n1-main/m1-ui/common/Table/GeneralBTN/GeneralBTN.tsx","n1-main/m1-ui/common/Table/PackButtonsBlock.tsx","n1-main/m1-ui/common/Table/AddPackBlock.tsx","n1-main/m1-ui/common/Checkbox/Checkbox.tsx","n2-features/f2-cards/c1-packs/Packs.tsx","n1-main/m3-dal/packs-api.ts","n1-main/m2-bll/reducers/packs-reducer.ts","n1-main/m2-bll/utils.ts","n2-features/f2-cards/c1-packs/PacksContainer.tsx","n1-main/m1-ui/common/ModalWindows/ThreeInputModal/ThreeInputModal.tsx","n1-main/m1-ui/common/Table/CardButtonsBlock.tsx","n1-main/m1-ui/common/Table/AddCardBlock.tsx","n2-features/f2-cards/c2-cards/Cards.tsx","n1-main/m3-dal/cards-api.ts","n1-main/m2-bll/reducers/cards-reducer.ts","n2-features/f2-cards/c2-cards/CardsContainer.tsx","n1-main/m1-ui/common/Page404/PageNotFound.tsx","n2-features/f3-learn/l1-practice/Practice.tsx","n1-main/m2-bll/reducers/practice-reducer.tsx","n2-features/f3-learn/l1-practice/PracticeContainer.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","NavItem","path","title","to","className","classes","navItem","activeClassName","active","Button","React","memo","btnType","btnName","rest","buttonClasses","button","NavLogOut","logOut","NavLogIn","logout","logIn","links","onClick","instance","axios","create","baseURL","withCredentials","authAPI","post","data","delete","value","email","from","message","authMe","createAsyncThunk","param","a","dispatch","rejectWithValue","res","setProfileUserData","userData","setValueIsLoggedSuccess","isLoggedSuccess","error","response","appSlice","createSlice","name","initialState","initApp","reducers","setInitApp","state","action","payload","setAppError","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","logInUserInApp","password","rememberMe","setTimeout","setErrorText","logoutUserInApp","arg","loginSlice","isLoading","Header","useDispatch","useSelector","login","logoutHandler","useCallback","profile","profile__container","profile__title","profile__info","_id","created","publicCardPacksCount","ProfileContainer","Input","label","errorCondition","errorText","input","input__label","input__elem","input__error","inputs__error_text","Login","handleOnSubmit","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","toLowerCase","trim","login__container","login__form","handleSubmit","login__title","login__inputs","placeholder","touched","getFieldProps","type","login__checkbox","id","checkbox","checked","htmlFor","login__buttons","disabled","isValid","resetForm","infoTextRed","loading","LoginContainer","Register","status","password2","register","register__container","register__form","register__title","register__inputs","register__buttons","register__error","register__loading","addUserTC","registerSlice","RegisterContainer","onSubmitHandler","Restore","isSentSuccess","textAfterRequest","restore","restore__container","restore__form","restore__title","restore__inputs","restore__buttons","infoTextGreen","restoreTC","info","restorePasswordSlice","RestoreContainer","restorePassword","NewPassword","isOk","isSetNewPassword","token","useParams","password1","newPassword","newPassword__container","newPassword__form","newPassword__title","newPassword__inputs","newPassword__buttons","setNewPassword","resetPasswordToken","newPasswordSlice","NewPasswordContainer","Preloader","container","ldsFacebook","AuthRedirect","props","app","useEffect","children","Table","model","table","table__loading","table__row_header","map","m","index","dataItem","dataIndex","table__row_data","key","modelIndex","render","Slider","leftMin","min","maxValue","leftMax","max","doubleRange","rangeNum","style","left","minValue","step","stepValue","range","onChange","e","currentTarget","setMin","setMax","Search","setSearchParams","useState","searchValue","setSearchValue","inputOnChangeHandler","onSearchClick","uniSearch","slider","Paginator","currentPage","pageCount","changePageCount","changePage","itemsName","itemsTotalCount","pageNumber","setPageNumber","pageAmount","Math","ceil","pageSetHandler","paginator","leftBlock","rightBlock","onBlur","onKeyPress","ColumnSorting","pageStatus","up","down","Modal","setActive","modal","modalContent","modalContentActive","stopPropagation","TableButton","QuestionModal","text","setAnswerY","setAnswerN","questionModal","right","QuestionModalContainer","activate","setActivate","OneInputModal","closeButton","inputModal","marginLeft","setValues","GeneralBTN","svg","editSVG","openSVG","trainSVG","green","removeSVG","red","src","alt","PackButtonsBlock","updatePack","choosePack","startLearn","deletePack","owner","pack","showEditModal","setShowEditModal","showDeletePackModal","setShowDeletePackModal","cardsCount","user_id","AddPackBlock","createPack","showCreatePackModal","setShowCreatePackModal","Checkbox","Packs","packs","userId","page","setPacksSortColumn","cardPacksTotalCount","searchParams","packName","setGettingMyPacks","sortCardsCount","sort","testModel","useMemo","i","width","paddingLeft","whiteSpace","d","moment","format","display","alignItems","user_name","paddingRight","textAlign","minHeight","packs__container","packs__title","packs__body","packsApi","params","get","cardsPack","put","getPacks","selectedPage","getState","sortPacks","cardPacks","maxCardsCount","minCardsCount","packsSlice","getMyPacks","changePagePacks","changePageCountPacks","setUserIdAC","find","useActions","bindActionCreators","PacksContainer","history","useHistory","deletePackHandler","createPackHandler","updatePackHandler","changePageHandler","changePageCountHandler","setSearchParamsHandler","setPacksSortColumnHandler","choosePackHandler","packId","push","startLearnHandler","checkboxValue","ThreeInputModal","firstInputValue","secondInputValue","thirdInputValue","console","log","question","answer","comment","CardButtonsBlock","deleteCard","updateCard","card","showDeleteModal","setShowDeleteModal","comments","AddCardBlock","createCard","showCreateModal","setShowCreateModal","Cards","cards","setSortColumn","cardsTotalCount","cardQuestion","sortGrade","grade","toFixed","cardsApi","getCards","cardsPack_id","sortCards","minGrade","maxGrade","packUserId","cardId","cardsSlice","cardsOwner","cardAnswer","setPack","changeCardsPage","changeCardsPageCount","setCardsSearchParams","setCardsSortColumnParams","CardsContainer","deleteCardHandler","createCardHandler","updateCardHandler","setSortColumnHandler","PageNotFound","wrap","subtitle","grades","Practice","gradeCard","onNext","isChecked","setIsChecked","onGradeButtonHandler","practice","practice__container","transform","card__inner","card__front","card__text","card__back","card__back_bottom","g","card__next_btn","getPracticeCards","updateGrade","updatedGrade","card_id","shots","practiceSlice","cardIsLoading","setPracticePackId","getCard","sum","reduce","acc","rand","random","newSum","PracticeContainer","setCard","gradeCardHandler","onNextHandler","Routes","exact","Main","main","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9db9e3b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__wZFJO\",\"login__container\":\"Login_login__container__2RiFi\",\"login__form\":\"Login_login__form__1oQF8\",\"login__inputs\":\"Login_login__inputs__ltC67\",\"login__checkbox\":\"Login_login__checkbox__3DmST\",\"login__buttons\":\"Login_login__buttons__vdiUC\",\"loading\":\"Login_loading__31U9z\",\"checkbox\":\"Login_checkbox__DfSwd\",\"infoTextRed\":\"Login_infoTextRed__1QnOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"practice\":\"Practice_practice__1lW-o\",\"practice__container\":\"Practice_practice__container__2vbk_\",\"practice__title\":\"Practice_practice__title__1Pa1D\",\"card\":\"Practice_card__1fHzN\",\"card__inner\":\"Practice_card__inner__3I_Qa\",\"card__front\":\"Practice_card__front__3nePh\",\"card__back\":\"Practice_card__back__3-eua\",\"card__next_btn\":\"Practice_card__next_btn__2CDSY\",\"card__text\":\"Practice_card__text__1Cekt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restore\":\"Restore_restore__Qt9OF\",\"restore__container\":\"Restore_restore__container__DbDYU\",\"restore__form\":\"Restore_restore__form__1RfxB\",\"restore__inputs\":\"Restore_restore__inputs__AIHLA\",\"restore__buttons\":\"Restore_restore__buttons__3URYh\",\"infoTextGreen\":\"Restore_infoTextGreen__3SE_5\",\"infoTextRed\":\"Restore_infoTextRed__1H9hi\",\"loading\":\"Restore_loading__xj32h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__3DqU1\",\"newPassword__container\":\"NewPassword_newPassword__container__m-yCZ\",\"newPassword__form\":\"NewPassword_newPassword__form__2OlrG\",\"newPassword__inputs\":\"NewPassword_newPassword__inputs__34B_D\",\"newPassword__buttons\":\"NewPassword_newPassword__buttons__11RvK\",\"infoTextRed\":\"NewPassword_infoTextRed__3ZAHA\",\"infoTextGreen\":\"NewPassword_infoTextGreen__1mFv-\",\"loading\":\"NewPassword_loading__3hwTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__2OoZ1\",\"register__container\":\"Register_register__container__20Y9Z\",\"register__form\":\"Register_register__form__tCvBa\",\"register__inputs\":\"Register_register__inputs__WISn5\",\"register__buttons\":\"Register_register__buttons__1xdWp\",\"register__error\":\"Register_register__error__1lW52\",\"register__loading\":\"Register_register__loading__2Href\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1HKqi\",\"modalContent\":\"Modal_modalContent__3u9Ne\",\"modalContentActive\":\"Modal_modalContentActive__3sorC\",\"active\":\"Modal_active__EvCwF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GeneralBTN_button__313Ge\",\"green\":\"GeneralBTN_green__S8XQZ\",\"red\":\"GeneralBTN_red__zHUK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2b9yi\",\"input__label\":\"Input_input__label__1lDak\",\"input__elem\":\"Input_input__elem__2Zzrh\",\"input__error\":\"Input_input__error__2PMc0\",\"inputs__error_text\":\"Input_inputs__error_text__3FrbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doubleRange\":\"Slider_doubleRange__FWpuu\",\"rangeNum\":\"Slider_rangeNum__3-whB\",\"range\":\"Slider_range__2pAqR\",\"range2\":\"Slider_range2__1YSEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logOut\":\"Nav_logOut__2whTu\",\"logIn\":\"Nav_logIn__3jg9I\",\"links\":\"Nav_links__2xOKb\",\"button\":\"Nav_button__3ETpC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1-5kW\",\"profile__container\":\"Profile_profile__container__32E_8\",\"profile__title\":\"Profile_profile__title__184h-\",\"profile__info\":\"Profile_profile__info__205Db\",\"profile__buttons\":\"Profile_profile__buttons__ZYrOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__4Z6yr\",\"packs__container\":\"Packs_packs__container__10omq\",\"packs__title\":\"Packs_packs__title__2-FHM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2tyvk\",\"table__loading\":\"Table_table__loading__qsfzN\",\"table__row_header\":\"Table_table__row_header__3I7da\",\"table__row_data\":\"Table_table__row_data__3i-oQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Cards_packs__167TP\",\"packs__container\":\"Cards_packs__container__1nr1B\",\"packs__title\":\"Cards_packs__title__1LFQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2-To7\",\"leftBlock\":\"Paginator_leftBlock__2JUGx\",\"rightBlock\":\"Paginator_rightBlock__2ATkU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColumnSorting_container__zEKkb\",\"up\":\"ColumnSorting_up__2wXZ2\",\"down\":\"ColumnSorting_down__204t9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PageNotFound_wrap__20qaz\",\"title\":\"PageNotFound_title__1japc\",\"subtitle\":\"PageNotFound_subtitle__1u3wU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__3DieS\",\"active\":\"NavItem_active___rzAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ir3Eb\",\"green\":\"Button_green__3fh93\",\"red\":\"Button_red__1bozl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__2_C5R\",\"ldsFacebook\":\"Preloader_ldsFacebook__RYldd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniSearch\":\"Search_uniSearch__2Iavf\",\"slider\":\"Search_slider__1Od3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"TableButton_button__imyMp\",\"green\":\"TableButton_green__3URIo\",\"red\":\"TableButton_red__2SmU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeButton\":\"OneInputModal_closeButton__3EBwW\",\"inputModal\":\"OneInputModal_inputModal__30rtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeButton\":\"ThreeInputModal_closeButton__22RAh\",\"inputModal\":\"ThreeInputModal_inputModal__39AW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2rISc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionModal\":\"QuestionModal_questionModal__cV3J1\"};","module.exports = __webpack_public_path__ + \"static/media/Pencil-Outline.042251b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/Folder-Outline.bbf08363.svg\";","module.exports = __webpack_public_path__ + \"static/media/Fitness_Fill.5812c2c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Trash-Outline.d76ce237.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__tAs8d\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.css\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n}\r\n\r\nconst NavItem: React.FC<PropsType> = ({path, title}) => {\r\n\r\n    return (\r\n            <NavLink to={path} className={classes.navItem} activeClassName={classes.active}>{title}</NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const Button = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport NavItem from \"../../common/NavItem/NavItem\";\r\nimport classes from \"./Nav.module.css\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\nexport const NavLogOut = () => {\r\n    return <nav className={classes.logOut}>\r\n        <NavItem path={\"/login\"} title={\"Login\"}/>\r\n        <NavItem path={\"/register\"} title={\"Registration\"}/>\r\n    </nav>\r\n}\r\n\r\ntype NavLogInPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport const NavLogIn = ({logout}: NavLogInPropsType) => {\r\n    return <nav className={classes.logIn}>\r\n        <div className={classes.links}>\r\n            <NavItem path={\"/profile\"} title={\"Profile\"}/>\r\n            <NavItem path={\"/packs\"} title={\"Packs\"} />\r\n        </div>\r\n        <div className={classes.button}>\r\n            <Button onClick={logout} btnName={\"Logout\"} btnType={\"red\"}/>\r\n        </div>\r\n    </nav>\r\n}\r\n","import axios from \"axios\"\r\n\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<UserDataType>(\"/auth/me\")\r\n    },\r\n    logInUserInApp(data: RequestLogInType) {\r\n        return  instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n    logoutUserInApp() {\r\n        return  instance.delete<UserDataType>(`/auth/me`)\r\n    },\r\n    setNewPassword(data: RequestNewPasswordType) {\r\n        return instance.post<NewPasswordResponseType>(`/auth/set-new-password`, data)\r\n    },\r\n    register (data: RequestRegisterType) {\r\n        return instance.post<RegisterResponseType>(\"/auth/register\", data)\r\n    },\r\n    getLinkForResetPassword(value: string) {\r\n        return  instance.post<NewPasswordResponseType>(`/auth/forgot`, {\r\n            email: value,\r\n            from: \"admin\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                    password recovery link: \r\n                    <a href=\"https://osbelkz.github.io/cards#/newPassword/$token$\"> \r\n                    link</a>\r\n                </div>` // после полной заливки на ghp, заменить ссылку на страницу new password on ghp\r\n        })\r\n    }\r\n}\r\n\r\nexport type RequestRegisterType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type RequestLogInType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type RequestNewPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type RequestResetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    \"addedUser\": UserDataType\r\n}\r\n\r\ntype NewPasswordResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    avatar: null | string\r\n}\r\n\r\ntype ErrorType = {\r\n    error: string\r\n    email: string\r\n    in: string\r\n}\r\n","import {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {setProfileUserData, setValueIsLoggedSuccess } from \"./login-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {RootStateType} from \"../store\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nexport const authMe = createAsyncThunk<\r\n    undefined,\r\n    undefined,\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"app/authMe\",\r\n    async (param, {dispatch,rejectWithValue}) => {\r\n        try {\r\n            const res = await authAPI.me()\r\n            dispatch(setProfileUserData({userData: res.data}))\r\n            dispatch(setValueIsLoggedSuccess({isLoggedSuccess: true}))\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        error: \"\",\r\n        initApp: \"idle\" as StatusType\r\n    },\r\n    reducers: {\r\n        setInitApp: (state, action: PayloadAction<{ initApp: StatusType }>) => {\r\n            state.initApp = action.payload.initApp\r\n        },\r\n        setAppError: (state, action: PayloadAction<{error: string}>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(authMe.pending, (state, action) => {\r\n                state.initApp = \"loading\"\r\n                state.error = \"\"\r\n            })\r\n            .addCase(authMe.fulfilled, (state, action) => {\r\n                state.initApp = \"succeeded\"\r\n            })\r\n            .addCase(authMe.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.initApp = \"failed\"\r\n                    state.error = action.payload\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const {setInitApp, setAppError} = appSlice.actions\r\n\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n","import {authAPI, UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {setAppError, setInitApp} from \"./app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {RootStateType} from \"../store\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nconst initialState = {\r\n    userData: null as UserDataType | null,\r\n    isLoading: false,\r\n    isLoggedSuccess: false,\r\n    error: \"\"\r\n}\r\n\r\nexport const logInUserInApp = createAsyncThunk<\r\n    { userData: UserDataType },\r\n    { email: string, password: string, rememberMe: boolean },\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"login/logInUserInApp\",\r\n    async ({email, password, rememberMe}, {rejectWithValue, dispatch}) => {\r\n        try {\r\n            const response = await authAPI.logInUserInApp({email, password, rememberMe})\r\n            dispatch(setInitApp({initApp: \"succeeded\"}))\r\n            return {userData: response.data}\r\n        } catch (e) {\r\n            setTimeout(dispatch, 5000, setErrorText({error: \"\"}))\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : (e.message + ', more details in the console'))\r\n        }\r\n    })\r\n\r\nexport const logoutUserInApp = createAsyncThunk<\r\n    undefined,\r\n    undefined,\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"login/logoutUserInAppTC\",\r\n    async (arg, {rejectWithValue, dispatch}) => {\r\n        dispatch(setInitApp({initApp: \"loading\"}))\r\n        dispatch(setAppError({error: \"\"}))\r\n        try {\r\n            await authAPI.logoutUserInApp()\r\n            dispatch(setInitApp({initApp: \"succeeded\"}))\r\n        } catch (e) {\r\n            dispatch(setInitApp({initApp: \"failed\"}))\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const loginSlice = createSlice({\r\n    name: \"login\",\r\n    initialState,\r\n    reducers: {\r\n        setProfileUserData: (state, action: PayloadAction<{userData: UserDataType}>) => {\r\n            state.userData = action.payload.userData\r\n        },\r\n        setValueIsLoggedSuccess: (state, action: PayloadAction<{ isLoggedSuccess: boolean }>) => {\r\n            state.isLoggedSuccess = action.payload.isLoggedSuccess\r\n        },\r\n        setErrorText: (state, action: PayloadAction<{error: string}>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(logInUserInApp.pending, (state, action) => {\r\n                state.isLoading = true\r\n                state.error = \"\"\r\n            })\r\n            .addCase(logInUserInApp.fulfilled, (state, action) => {\r\n                state.userData = action.payload.userData\r\n                state.isLoggedSuccess = true\r\n                state.isLoading = false\r\n            })\r\n            .addCase(logInUserInApp.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.isLoading = false\r\n                    state.error = action.payload\r\n                }\r\n            })\r\n            .addCase(logoutUserInApp.fulfilled, (state, action) => {\r\n                state.userData = null\r\n                state.isLoggedSuccess = false\r\n            })\r\n            .addCase(logoutUserInApp.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.error = action.payload\r\n                }\r\n            })\r\n    }\r\n})\r\nexport const {setValueIsLoggedSuccess, setProfileUserData, setErrorText} = loginSlice.actions\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../m2-bll/store\";\r\nimport {UserDataType} from \"../../m3-dal/auth-api\";\r\nimport {NavLogIn, NavLogOut} from \"./Nav/Nav\";\r\nimport {logoutUserInApp} from \"../../m2-bll/reducers/login-reducer\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.login.userData)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutUserInApp())\r\n    }, [])\r\n\r\n    if(!userData) return <NavLogOut />\r\n\r\n    return <NavLogIn logout={logoutHandler}/>\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\nimport NavItem from '../../../n1-main/m1-ui/common/NavItem/NavItem';\r\n\r\n\r\ntype PropsType = {\r\n    userData: UserDataType\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({userData}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.profile__container}>\r\n                <div className={classes.profile__title}>\r\n                    <h3>Profile page</h3>\r\n                </div>\r\n\r\n                <div className={classes.profile__info}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>Id:</th>\r\n                            <td>{userData._id}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Username:</th>\r\n                            <td>{userData.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Email:</th>\r\n                            <td>{userData.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Added:</th>\r\n                            <td>{userData.created}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Packs of cards:</th>\r\n                            <td>{userData.publicCardPacksCount}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Profile);\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { UserDataType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\nconst ProfileContainer = () => {\r\n    const userData = useSelector<RootStateType, UserDataType | null>(state => state.login.userData)\r\n\r\n    if(!userData) return <div></div>\r\n\r\n    return <Profile userData={userData}/>\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import React, {InputHTMLAttributes} from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\ninterface PropsType extends InputHTMLAttributes<HTMLInputElement> {\r\n    label?: string\r\n    errorText?: string\r\n    errorCondition?: boolean\r\n}\r\n\r\nexport const Input = React.memo(\r\n    ({label, errorCondition, errorText, ...rest }: PropsType) => {\r\n\r\n    return (\r\n            <div className={classes.input}>\r\n                <p className={classes.input__label}>{label}</p>\r\n                <input className={`${classes.input__elem} ${errorCondition ? classes.input__error : \"\"}`}\r\n                       {...rest}/>\r\n                {errorCondition ? <div\r\n                    className={classes.inputs__error_text}>{errorText}</div> : null}\r\n            </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport classes from \"./Login.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\n\r\ntype RestorePropsType = {\r\n    isLoggedSuccess: boolean,\r\n    isLoading: boolean,\r\n    error: string,\r\n    handleOnSubmit: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Login: React.FC<RestorePropsType> = React.memo(({error, isLoading, handleOnSubmit, isLoggedSuccess}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required!\"\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Too short password, min 7 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.email.toLowerCase().trim(), values.password, values.rememberMe)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <div className={classes.login__container}>\r\n            <form className={classes.login__form} onSubmit={formik.handleSubmit}>\r\n                <div className={classes.login__title}>\r\n                    <h3>Login page</h3>\r\n                </div>\r\n                <div className={classes.login__inputs}>\r\n                <Input\r\n                    label={\"Email\"}\r\n                    placeholder={\"Please, put your email\"}\r\n                    errorCondition={!!formik.errors.email && formik.touched.email}\r\n                    errorText={formik.errors.email}\r\n                    {...formik.getFieldProps(\"email\")}/>\r\n                <Input\r\n                    label={\"Password\"}\r\n                    type={\"password\"}\r\n                    placeholder={\"Please, put your password\"}\r\n                    errorCondition={!!formik.errors.password && formik.touched.password}\r\n                    errorText={formik.errors.password}\r\n                    {...formik.getFieldProps(\"password\")}/>\r\n                <div className={classes.login__checkbox}>\r\n                    <input\r\n                        id={\"remember\"}\r\n                        className={classes.checkbox}\r\n                        type={\"checkbox\"}\r\n                        checked={formik.values.rememberMe}\r\n                        {...formik.getFieldProps(\"rememberMe\")}/>\r\n                    <label htmlFor={\"remember\"}>remember me</label>\r\n                </div>\r\n\r\n                </div>\r\n                <div className={classes.login__buttons}>\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        btnName={\"Login\"}\r\n                        disabled={!formik.isValid || (isLoading) || !formik.values.email}\r\n                        btnType={\"green\"}\r\n                    />\r\n                    <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                </div>\r\n                <NavItem path={\"/restore\"} title={\"Forgot your password?\"}/>\r\n                {error && <div className={classes.infoTextRed}>{error}</div>}\r\n                {isLoading && <div className={classes.loading}>...Loading</div>}\r\n            </form>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Login;\r\n","import React, {useCallback} from 'react';\r\nimport Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {logInUserInApp} from \"../../../n1-main/m2-bll/reducers/login-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype LoginStateType = {\r\n    isLoading: boolean\r\n    isLoggedSuccess: boolean\r\n    error: string\r\n}\r\n\r\nconst LoginContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {isLoggedSuccess, isLoading, error } = useSelector<RootStateType, LoginStateType>(state => state.login)\r\n\r\n    const handleOnSubmit = useCallback((email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(logInUserInApp({email, password, rememberMe}))\r\n    }, []\r\n    )\r\n\r\n    if (isLoggedSuccess) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            isLoading={isLoading}\r\n            isLoggedSuccess={isLoggedSuccess}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport {Input} from '../../../n1-main/m1-ui/common/Input/Input';\r\nimport classes from \"./Register.module.scss\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {RequestRegisterType} from \"../../../n1-main/m3-dal/auth-api\";\r\nimport { StatusType } from '../../../n1-main/m2-bll/reducers/app-reducer';\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: RequestRegisterType) => void\r\n    error: string\r\n    status: StatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    password2?: string\r\n}\r\n\r\nconst Register: React.FC<PropsType> = React.memo(({status, error, onSubmit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 7) {\r\n                errors.password = \"Must be 7 or more characters\"\r\n            }\r\n            if (values.password !== values.password2) {\r\n                errors.password2 = \"Passwords does not match\"\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            onSubmit({email: values.email, password: values.password})\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.register}>\r\n            <div className={classes.register__container}>\r\n                <form className={classes.register__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.register__title}>\r\n                        <h3>Registration</h3>\r\n                    </div>\r\n                    <div className={classes.register__inputs}>\r\n                        <Input label={\"Email\"}\r\n                               errorCondition={!!formik.errors.email && formik.touched.email}\r\n                               placeholder={\"email\"}\r\n                               errorText={formik.errors.email}\r\n                               {...formik.getFieldProps(\"email\")}/>\r\n                        <Input label={\"Password\"}\r\n                               errorCondition={!!formik.errors.password && formik.touched.password}\r\n                               type={\"password\"}\r\n                               placeholder={\"password\"}\r\n                               errorText={formik.errors.password}\r\n                               {...formik.getFieldProps(\"password\")}/>\r\n                        <Input label={\"Repeat password\"}\r\n                               errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                               type={\"password\"}\r\n                               errorText={formik.errors.password2}\r\n                               placeholder={\"confirm password\"}\r\n                               {...formik.getFieldProps(\"password2\")} />\r\n                    </div>\r\n                    <div className={classes.register__buttons}>\r\n                        <Button btnName={\"Join\"} btnType={\"green\"} type={\"submit\"}\r\n                                disabled={!formik.isValid || (status === \"loading\") || !formik.values.email}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                    {error && <div className={classes.register__error}>{error}</div>}\r\n                    {status === \"loading\" && <div className={classes.register__loading}>...Loading</div>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Register;\r\n","import {authAPI, RequestRegisterType} from \"../../m3-dal/auth-api\";\r\nimport {StatusType} from \"./app-reducer\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nexport type RegisterStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    error: \"\",\r\n    status: \"idle\" as StatusType,\r\n}\r\n\r\nexport const addUserTC = createAsyncThunk<undefined, RequestRegisterType, { rejectValue: string }>(\"register/addUser\",\r\n    async (data, {rejectWithValue}) => {\r\n        try {\r\n            await authAPI.register(data)\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const registerSlice = createSlice({\r\n    name: \"register\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(addUserTC.pending, (state, action) => {\r\n                state.status = \"loading\"\r\n                state.error = \"\"\r\n            })\r\n            .addCase(addUserTC.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\"\r\n            })\r\n            .addCase(addUserTC.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.error = action.payload\r\n                    state.status = \"failed\"\r\n                }\r\n            })\r\n    }\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport Register from \"./Register\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addUserTC, RegisterStateType} from \"../../../n1-main/m2-bll/reducers/register-reducer\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { RequestRegisterType } from '../../../n1-main/m3-dal/auth-api';\r\n\r\n\r\nconst RegisterContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {error, status} = useSelector<RootStateType, RegisterStateType>(state => state.register)\r\n\r\n    const onSubmitHandler = useCallback((values: RequestRegisterType) => {\r\n        dispatch(addUserTC(values))\r\n    }, [])\r\n\r\n    if (status===\"succeeded\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <Register onSubmit={onSubmitHandler} error={error} status={status}/>\r\n    );\r\n};\r\n\r\nexport default RegisterContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Restore.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype RestorePropsType = {\r\n    textAfterRequest: string,\r\n    isSentSuccess: boolean,\r\n    isLoading: boolean,\r\n    handleOnSubmit: (email: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst Restore: React.FC<RestorePropsType> = React.memo(({handleOnSubmit, isLoading, isSentSuccess, textAfterRequest}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required!\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.email)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.restore}>\r\n            <div className={classes.restore__container}>\r\n                <form className={classes.restore__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.restore__title}>\r\n                        <h3>Restore password</h3>\r\n                    </div>\r\n                    <div className={classes.restore__inputs}>\r\n                        <Input\r\n                            label={\"Email\"}\r\n                            placeholder={\"Please, put your email\"}\r\n                            errorCondition={!!formik.errors.email && formik.touched.email}\r\n                            errorText={formik.errors.email}\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.restore__buttons}>\r\n                        <Button\r\n                            type={\"submit\"}\r\n                            btnName={\"Send email\"}\r\n                            disabled={!formik.isValid || (isLoading) || !formik.values.email}\r\n                            btnType={\"green\"}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                    {textAfterRequest && <div className={\r\n                        isSentSuccess ? classes.infoTextGreen : classes.infoTextRed\r\n                    }>{textAfterRequest}</div>}\r\n                    {isLoading && <div className={classes.loading}>...Loading</div>}\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Restore;\r\n","import {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nexport type RestorePasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSentSuccess: false,\r\n    textAfterRequest: \"\",\r\n    isLoading: false\r\n}\r\n\r\nexport const restoreTC = createAsyncThunk<string, string, { rejectValue: string }>(\"restore/restoreTC\",\r\n    async (email: string, {rejectWithValue}) => {\r\n        try {\r\n            const response = await authAPI.getLinkForResetPassword(email)\r\n            return response.data.info\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response.data.error)\r\n        }\r\n    })\r\n\r\nexport const restorePasswordSlice = createSlice({\r\n    name: \"restore\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(restoreTC.pending, (state, action) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(restoreTC.fulfilled, (state, action) => {\r\n                state.textAfterRequest = action.payload\r\n                state.isSentSuccess = true\r\n                state.isLoading = false\r\n            })\r\n            .addCase(restoreTC.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.textAfterRequest = action.payload\r\n                    state.isLoading = false\r\n                }\r\n            })\r\n    }\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport Restore from \"./Restore\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {RestorePasswordStateType, restoreTC} from \"../../../n1-main/m2-bll/reducers/restorePassword-reducer\";\r\n\r\nconst RestoreContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {textAfterRequest, isLoading, isSentSuccess} =\r\n        useSelector<RootStateType, RestorePasswordStateType>(state => state.restorePassword)\r\n\r\n    const handleOnSubmit = useCallback((email: string) => {\r\n        dispatch(restoreTC(email))\r\n        }, []\r\n    )\r\n\r\n    return (\r\n        <Restore\r\n            textAfterRequest={textAfterRequest}\r\n            isSentSuccess={isSentSuccess}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RestoreContainer;\r\n","import React from \"react\";\r\nimport classes from \"./NewPassword.module.scss\";\r\nimport {Input} from \"../../../n1-main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport NavItem from \"../../../n1-main/m1-ui/common/NavItem/NavItem\";\r\nimport {useFormik} from \"formik\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\ntype NewPasswordPropsType = {\r\n    isSetNewPassword: boolean\r\n    error: string\r\n    isOk: string\r\n    isLoading: boolean\r\n    handleOnSubmit: (value: string, token: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password1?: string\r\n    password2?: string\r\n}\r\n\r\n\r\nconst NewPassword: React.FC<NewPasswordPropsType> = React.memo(({isLoading, handleOnSubmit, error, isOk, isSetNewPassword}) => {\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password1: \"\",\r\n            password2: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password1) {\r\n                errors.password1 = \"Field is required!\"\r\n            } else if (values.password1.length < 8) {\r\n                errors.password1 = \"Too short password, min 8 symbols\"\r\n            }\r\n            if (!values.password2) {\r\n                errors.password2 = \"Field is required!\"\r\n            } else if (values.password2.length < 8) {\r\n                errors.password2 = \"Too short password, min 8 symbols\"\r\n            } else if (values.password1 !== values.password2) {\r\n                errors.password2 = \"Both fields must be equal!\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.password1, token)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.newPassword}>\r\n            <div className={classes.newPassword__container}>\r\n                <form className={classes.newPassword__form} onSubmit={formik.handleSubmit}>\r\n                    <div className={classes.newPassword__title}>\r\n                        <h3>New password page</h3>\r\n                    </div>\r\n                    <div className={classes.newPassword__inputs}>\r\n                        <Input\r\n                            label={\"New password\"}\r\n                            placeholder={\"Please, put new password\"}\r\n                            errorCondition={!!formik.errors.password1 && formik.touched.password1}\r\n                            errorText={formik.errors.password1}\r\n                            {...formik.getFieldProps(\"password1\")}\r\n\r\n                        />\r\n                        <Input\r\n                            label={\"Repeat new password\"}\r\n                            placeholder={\"Put new password again\"}\r\n                            errorCondition={!!formik.errors.password2 && formik.touched.password2}\r\n                            errorText={formik.errors.password2}\r\n                            {...formik.getFieldProps(\"password2\")}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.newPassword__buttons}>\r\n                        <Button\r\n                            type={\"submit\"}\r\n                            btnName={\"Set new password\"}\r\n                            disabled={!formik.isValid || (isLoading)}\r\n                            btnType={\"green\"}/>\r\n                        <Button btnName={\"Reset\"} type={\"reset\"} onClick={() => formik.resetForm()}/>\r\n                    </div>\r\n                    <NavItem path={\"/login\"} title={\"Login\"}/>\r\n                </form>\r\n                {!isSetNewPassword && error\r\n                    ? <div className={classes.infoTextRed}>{error}</div>\r\n                    : \"\"\r\n                }\r\n                {isSetNewPassword && isOk\r\n                    ? <div className={classes.infoTextGreen}>{isOk}</div>\r\n                    : \"\"\r\n                }\r\n                {isLoading && <div className={classes.loading}>...Loading</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default NewPassword;\r\n","import {authAPI} from \"../../m3-dal/auth-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {RootStateType} from \"../store\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\n\r\nexport type NewPasswordStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSetNewPassword: false,\r\n    error: \"\" ,\r\n    isOk: \"\",\r\n    isLoading: false\r\n}\r\n\r\nexport const setNewPassword = createAsyncThunk<\r\n    { isOk: string },\r\n    { newPassword: string, token: string },\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"newPassword/setNewPassword\",\r\n    async ({newPassword, token}, {rejectWithValue, dispatch}) => {\r\n        try {\r\n            const response = await authAPI.setNewPassword({\r\n                password: newPassword,\r\n                resetPasswordToken: token\r\n            })\r\n            return {isOk: response.data.info}\r\n        } catch (e) {\r\n            setTimeout(dispatch, 5000, newPasswordSlice.actions.setErrorText({error: \"\"}))\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const newPasswordSlice = createSlice({\r\n    name: \"newPassword\",\r\n    initialState,\r\n    reducers: {\r\n        setErrorText: (state, action: PayloadAction<{error: string}>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(setNewPassword.pending, (state, action) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(setNewPassword.fulfilled, (state, action) => {\r\n                state.isSetNewPassword = true\r\n                state.isLoading = false\r\n                state.isOk = action.payload.isOk\r\n            })\r\n            .addCase(setNewPassword.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.isLoading = false\r\n                    state.error = action.payload\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nconst {} = newPasswordSlice.actions\r\n","import React, {useCallback} from 'react';\r\nimport NewPassword from \"./NewPassword\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NewPasswordStateType, setNewPassword} from \"../../../n1-main/m2-bll/reducers/newPassword-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NewPasswordContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isSetNewPassword, isLoading, error, isOk} =\r\n        useSelector<RootStateType, NewPasswordStateType>(state => state.newPassword)\r\n\r\n\r\n    const handleOnSubmit = useCallback((newPassword: string, token: string) => {\r\n        dispatch(setNewPassword({newPassword, token}))\r\n    }, []\r\n    )\r\n\r\n    if (isSetNewPassword) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <NewPassword\r\n            isSetNewPassword={isSetNewPassword}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n            isOk={isOk}\r\n            isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPasswordContainer;\r\n","import React from \"react\";\r\nimport classes from \"./Preloader.module.scss\";\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.ldsFacebook}>\r\n                <div></div><div></div><div></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n//\r\n","import React, {useEffect} from 'react';\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../m2-bll/store\";\r\nimport {authMe, StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\nconst AuthRedirect: React.FC = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initApp = useSelector<RootStateType, StatusType>(state => state.app.initApp)\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n\r\n\r\n    useEffect(() => {\r\n        if (initApp === \"idle\" && !isLoggedSuccess) {\r\n            dispatch(authMe())\r\n        }\r\n    }, [initApp, isLoggedSuccess])\r\n\r\n    if (initApp === \"loading\" || initApp === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthRedirect;\r\n","import React from 'react';\r\nimport classes from \"./Table.module.scss\";\r\n\r\nexport interface ITableModel {\r\n    title: (index: number) => JSX.Element;\r\n    render: (dataItem: any, modelIndex: number, dataIndex: number) => JSX.Element;\r\n}\r\n\r\ninterface ITableProps {\r\n    model: ITableModel[];\r\n    data: any;\r\n    disabled: boolean\r\n}\r\n\r\nconst Table: React.FC<ITableProps> = React.memo(({model, data, disabled}) => {\r\n\r\n    // console.log(\"table\")\r\n\r\n    return (\r\n        <table className={`${classes.table} ${disabled ? classes.table__loading : \"\"}`}>\r\n            <thead>\r\n            <tr className={classes.table__row_header}>\r\n                {model.map((m: ITableModel, index: number) => m.title(index))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {data.map((dataItem: any, dataIndex: number) => (\r\n                <tr className={classes.table__row_data} key={dataItem._id}>\r\n                    {model.map((m, modelIndex) => m.render(dataItem, modelIndex, dataIndex))}\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n})\r\n// just a init commit\r\nexport default Table;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Slider.module.scss\";\r\n\r\ntype SliderPropsType = {\r\n    setMin:(value: number) => void\r\n    setMax:(value: number) => void\r\n    min: number\r\n    max: number\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n    disabled: boolean\r\n}\r\n\r\nexport const Slider: React.FC<SliderPropsType> = React.memo((props) => {\r\n\r\n    const rangeHandler1 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMin(value)\r\n        if (props.max <= value) {\r\n            props.setMax(value)\r\n        }\r\n    }\r\n\r\n    const rangeHandler2 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = +e.currentTarget.value\r\n        props.setMax(value)\r\n        if (props.min >= value) {\r\n            props.setMin(value)\r\n        }\r\n    }\r\n\r\n    let leftMin = props.min / (props.maxValue/100) - 2.5\r\n    let leftMax = props.max / (props.maxValue/100) - 2.5\r\n\r\n    return <div className={classes.doubleRange}>\r\n        <div>\r\n            <div className={classes.rangeNum}\r\n                style={{left: `${leftMin}%`}}>\r\n                {props.min}\r\n            </div>\r\n            <input\r\n                type={\"range\"}\r\n                min={props.minValue}\r\n                max={props.maxValue}\r\n                step={props.stepValue}\r\n                value={props.min}\r\n                className={classes.range}\r\n                onChange={rangeHandler1}\r\n                disabled={props.disabled}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.rangeNum}\r\n            style={{left: `${leftMax}%`}}>\r\n            {props.max}\r\n        </div>\r\n        <input\r\n            type={\"range\"}\r\n            min={props.minValue}\r\n            max={props.maxValue}\r\n            step={props.stepValue}\r\n            value={props.max}\r\n            className={classes.range}\r\n            onChange={rangeHandler2}\r\n            disabled={props.disabled}\r\n        />\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport classes from \"./Search.module.scss\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Slider} from \"../Slider/Slider\";\r\n\r\ntype SearchPropsType = {\r\n    name: string\r\n    label: string\r\n    minValue: number\r\n    maxValue: number\r\n    stepValue: number\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Search: React.FC<SearchPropsType> =\r\n    React.memo(({name, minValue, maxValue, label, stepValue, setSearchParams, disabled}) => {\r\n\r\n\r\n        const [searchValue, setSearchValue] = useState<string>(name)\r\n        const [min, setMin] = useState(minValue)\r\n        const [max, setMax] = useState(maxValue)\r\n\r\n        const inputOnChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            setSearchValue(e.currentTarget.value as string)\r\n        }, [])\r\n\r\n        const onSearchClick = useCallback(() => {\r\n            setSearchParams(searchValue, min, max)\r\n        }, [searchValue, max, min])\r\n\r\n        useEffect(() => {\r\n            setMax(maxValue)\r\n        }, [maxValue])\r\n\r\n        return <div className={classes.uniSearch}>\r\n            <h3>{label}</h3>\r\n            <Input\r\n                value={searchValue}\r\n                onChange={inputOnChangeHandler}\r\n                disabled={disabled}\r\n            />\r\n            <div className={classes.slider}>\r\n                <Slider\r\n                    setMin={setMin}\r\n                    setMax={setMax}\r\n                    min={min}\r\n                    max={max}\r\n                    minValue={minValue}\r\n                    maxValue={maxValue}\r\n                    stepValue={stepValue}\r\n                    disabled={disabled}\r\n                />\r\n            </div>\r\n            <Button\r\n                btnName={\"Search\"}\r\n                onClick={onSearchClick}\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    })\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./Paginator.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    itemsTotalCount: number\r\n    pageCount: number\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    itemsName: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> =\r\n    React.memo(({currentPage, pageCount, changePageCount, changePage, itemsName, itemsTotalCount, disabled}) => {\r\n    const [pageNumber, setPageNumber] = useState(currentPage)\r\n    let pageAmount = Math.ceil(itemsTotalCount / pageCount)\r\n\r\n    const pageCountChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let value = +e.currentTarget.value\r\n        changePageCount(value)\r\n    }\r\n    const onePreviousPage = () => {\r\n        changePage(pageNumber - 1)\r\n        setPageNumber(pageNumber - 1)\r\n    }\r\n    const pageChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPageNumber(+e.currentTarget.value)\r\n    }\r\n\r\n    const pageSetHandler = () => {\r\n        if (pageNumber < 1) {\r\n            changePage(1)\r\n            setPageNumber(1)\r\n        } else if (pageNumber > pageAmount) {\r\n            changePage(pageAmount)\r\n            setPageNumber(pageAmount)\r\n        } else {\r\n            changePage(pageNumber)\r\n        }\r\n    }\r\n    const oneNextPage = () => {\r\n        changePage(pageNumber + 1)\r\n        setPageNumber(pageNumber + 1)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            pageSetHandler()\r\n        }\r\n    }\r\n\r\n    return <div className={classes.paginator}>\r\n        <div className={classes.leftBlock}>\r\n            {`Total ${itemsName}: ${itemsTotalCount}. ${itemsName} per page:`}\r\n            <select onChange={pageCountChangeHandler} value={pageCount} disabled={disabled}>\r\n                <option>10</option>\r\n                <option>20</option>\r\n                <option>50</option>\r\n                <option>100</option>\r\n            </select>\r\n        </div>\r\n        <div className={classes.rightBlock}>\r\n            <Button\r\n                btnName={`Prev`}\r\n                onClick={onePreviousPage}\r\n                disabled={currentPage < 2 || disabled}\r\n            />\r\n            {`Page: `}\r\n            {pageNumber < 1}\r\n            <Input type={\"number\"}\r\n                   value={pageNumber}\r\n                   step={1} min={1}\r\n                   max={pageAmount}\r\n                   onChange={pageChangeHandler}\r\n                   onBlur={pageSetHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   disabled={disabled}\r\n            />\r\n            of {pageAmount}\r\n            <Button\r\n                btnName={`Next`}\r\n                onClick={oneNextPage}\r\n                disabled={currentPage === pageAmount || disabled}\r\n            />\r\n        </div>\r\n    </div>\r\n})\r\n","import React from \"react\";\r\nimport classes from \"./ColumnSorting.module.scss\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype ColumnSortingPropsType = {\r\n    onClick: (value: number) => void\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const ColumnSorting: React.FC<ColumnSortingPropsType> = React.memo(({onClick, pageStatus}) => {\r\n\r\n    const upChangeHandler = () => {\r\n        onClick(1)\r\n    }\r\n    const downChangeHandler = () => {\r\n        onClick(0)\r\n    }\r\n\r\n    return <div className={classes.container}>\r\n        <Button\r\n            btnName={\"⇑\"}\r\n            className={classes.up}\r\n            onClick={upChangeHandler}\r\n            disabled={pageStatus === \"loading\"}\r\n        />\r\n        <Button\r\n            btnName={\"⇓\"}\r\n            className={classes.down}\r\n            onClick={downChangeHandler}\r\n            disabled={pageStatus === \"loading\"}\r\n        />\r\n    </div>\r\n})","import React from \"react\";\r\nimport classes from \"./Modal.module.scss\";\r\n\r\ntype ModalPropsType = {\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = ({active, setActive, children}) => {\r\n    return <div className={active ? `${classes.modal} ${classes.active}` : classes.modal} onClick={() => setActive(false)}>\r\n        <div\r\n            className={active ? `${classes.modalContent} ${classes.modalContentActive}` : classes.modalContent}\r\n            onClick={e => e.stopPropagation()}\r\n        >\r\n            {children}\r\n        </div>\r\n    </div>\r\n}","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./TableButton.module.scss\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string\r\n    btnType?: \"green\" | \"red\"\r\n}\r\n\r\nexport const TableButton = React.memo(({btnType, btnName, ...rest}: PropsType) => {\r\n\r\n    let buttonClasses = `${classes.button} ${classes[btnType as \"green\" | \"red\"]}`\r\n\r\n    return (\r\n            <button className={buttonClasses} {...rest}>\r\n                {btnName}\r\n            </button>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport classes from \"./QuestionModal.module.scss\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {Modal} from \"../Modal\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype QuestionModalPropsType = {\r\n    text: string\r\n    setAnswerY: (value: boolean) => void\r\n    setAnswerN: (value: boolean) => void\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n}\r\n\r\nexport const QuestionModal: React.FC<QuestionModalPropsType> = ({text, setAnswerY, setAnswerN, active, setActive}) => {\r\n    const onYesClickHandler = () => {\r\n        setAnswerY(true)\r\n        setActive(false)\r\n    }\r\n    const onNoClickHandler = () => {\r\n        setAnswerN(false)\r\n        setActive(false)\r\n    }\r\n\r\n    return <div className={classes.questionModal}>\r\n        <Modal active={active} setActive={setActive}>\r\n            {text}\r\n            <TableButton btnName={\"Yes\"} onClick={onYesClickHandler} style={{right: \"20px\"}}/>\r\n            <TableButton btnName={\"No\"} onClick={onNoClickHandler} style={{left: \"20px\"}}/>\r\n        </Modal>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport {QuestionModal} from \"./QuestionModal\";\r\n\r\ntype QuestionModalContainerPropsType = {\r\n    text: string\r\n    activate: boolean\r\n    setActivate: (value: boolean) => void\r\n    setAnswerY: (value: boolean) => void\r\n    setAnswerN: (value: boolean) => void\r\n}\r\n\r\nexport const QuestionModalContainer: React.FC<QuestionModalContainerPropsType> = ({text, setAnswerY, setAnswerN, activate, setActivate}) => {\r\n    return <>\r\n        <QuestionModal\r\n            text={text}\r\n            setAnswerY={setAnswerY}\r\n            setAnswerN={setAnswerN}\r\n            active={activate}\r\n            setActive={setActivate}\r\n        />\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./OneInputModal.module.scss\";\r\nimport {Modal} from \"../Modal\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype InputModalType = {\r\n    value?: string\r\n    placeholder: string\r\n    title: string\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n    handleOnSubmit: (itemName: string) => void\r\n}\r\n\r\nexport const OneInputModal: React.FC<InputModalType> = ({title, placeholder, value, active, setActive, handleOnSubmit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            itemsName: value || \"\",\r\n        },\r\n        onSubmit: values => {\r\n            handleOnSubmit(values.itemsName)\r\n            setActive(false)\r\n        }\r\n    })\r\n\r\n    return <Modal active={active} setActive={setActive}>\r\n            <div className={classes.closeButton}>\r\n                <TableButton\r\n                    btnName={\"X\"}\r\n                    onClick={() => setActive(false)}/>\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.inputModal}>\r\n                <h3>{title}</h3>\r\n                <textarea placeholder={placeholder} {...formik.getFieldProps(\"itemsName\")}/>\r\n                <div>\r\n                    <Button\r\n                        btnName={\"Save\"}\r\n                        btnType={\"green\"}\r\n                        type={\"submit\"}\r\n                    />\r\n                    <Button\r\n                        type={\"reset\"}\r\n                        btnName={\"Reset\"}\r\n                        style={{marginLeft: \"10px\"}}\r\n                        onClick={() => formik.setValues({itemsName: \"\"})}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n}\r\n","import React, {ButtonHTMLAttributes} from \"react\";\r\nimport editSVG from \"../../../../../n3-assets/Pencil-Outline.svg\";\r\nimport openSVG from \"../../../../../n3-assets/Folder-Outline.svg\";\r\nimport trainSVG from \"../../../../../n3-assets/Fitness_Fill.svg\";\r\nimport removeSVG from \"../../../../../n3-assets/Trash-Outline.svg\";\r\nimport classes from \"./GeneralBTN.module.scss\";\r\n\r\ninterface GeneralBTNPropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnType: \"edit\" | \"open\" | \"train\" | \"remove\"\r\n}\r\n\r\nexport const GeneralBTN: React.FC<GeneralBTNPropsType> = React.memo(({btnType, ...props}) => {\r\n    let svg = \"\"\r\n    let buttonClasses = \"\"\r\n\r\n    switch (btnType) {\r\n        case \"edit\":\r\n            svg = editSVG\r\n            buttonClasses = `${classes.button}`\r\n            break\r\n        case \"open\": {\r\n            svg = openSVG\r\n            buttonClasses = `${classes.button}`\r\n            break\r\n        }\r\n        case \"train\": {\r\n            svg = trainSVG\r\n            buttonClasses = `${classes.button} ${classes.green}`\r\n            break\r\n        }\r\n        case \"remove\": {\r\n            svg = removeSVG\r\n            buttonClasses = `${classes.button} ${classes.red}`\r\n            break\r\n        }\r\n    }\r\n\r\n    return <button className={buttonClasses} {...props}>\r\n        <img src={svg} alt=\"\"/>\r\n    </button>;\r\n})","import React, {useState} from \"react\";\r\nimport {QuestionModalContainer} from \"../ModalWindows/QuestionModal/QuestionModalContainer\";\r\nimport {OneInputModal} from \"../ModalWindows/OneInputModal/OneInputModal\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\nimport {CardPackType} from \"../../../m3-dal/packs-api\";\r\nimport {GeneralBTN} from \"./GeneralBTN/GeneralBTN\";\r\n\r\ntype PackButtonsBlockPropsType = {\r\n    updatePack: (name: string, id: string) => void\r\n    choosePack: (packId: string, cardsOwner: string) => void\r\n    startLearn: (packId: string, cardsOwner: string) => void\r\n    deletePack: (id: string) => void\r\n    owner: boolean\r\n    pack: CardPackType\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const PackButtonsBlock: React.FC<PackButtonsBlockPropsType> = React.memo(({\r\n                                                                                     updatePack, choosePack, startLearn,\r\n                                                                                     deletePack, owner,\r\n                                                                                     pageStatus, pack\r\n                                                                                 }) => {\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const [showDeletePackModal, setShowDeletePackModal] = useState(false)\r\n    const {_id, cardsCount, user_id, name} = pack\r\n\r\n    return <>\r\n        <GeneralBTN btnType={\"edit\"} onClick={() => setShowEditModal(true)}\r\n                 disabled={!owner || pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"open\"} onClick={() => choosePack(_id, user_id)}\r\n                    disabled={pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"train\"} onClick={() => startLearn(_id, user_id)}\r\n                  disabled={pageStatus === \"loading\" || cardsCount === 0}/>\r\n        <GeneralBTN btnType={\"remove\"} onClick={() => setShowDeletePackModal(true)}\r\n                   disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <><OneInputModal\r\n                value={name}\r\n                placeholder={\"pack's name\"}\r\n                title={\"Edit pack's name\"}\r\n                active={showEditModal}\r\n                setActive={setShowEditModal}\r\n                handleOnSubmit={(text) => updatePack(text, _id)}/>\r\n            <QuestionModalContainer text={\"Delete this pack?\"}\r\n                                    activate={showDeletePackModal}\r\n                                    setActivate={setShowDeletePackModal}\r\n                                    setAnswerY={() => deletePack(_id)}\r\n                                    setAnswerN={() => {\r\n                                    }}/>\r\n        </>}\r\n    </>\r\n})","import React, {useState} from \"react\";\r\nimport {OneInputModal} from \"../ModalWindows/OneInputModal/OneInputModal\";\r\nimport {TableButton} from \"./TableButton/TableButton\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype AddPackBlockPropsType = {\r\n    createPack: (name: string) => void\r\n    pageStatus: StatusType\r\n}\r\n\r\nexport const AddPackBlock: React.FC<AddPackBlockPropsType> = React.memo(({createPack, pageStatus\r\n                                                                         }) => {\r\n    const [showCreatePackModal, setShowCreatePackModal] = useState(false)\r\n\r\n    return <>\r\n        <TableButton btnName={\"+\"} btnType={\"green\"} onClick={() => setShowCreatePackModal(true)}\r\n                     disabled={pageStatus === \"loading\"}/>\r\n        <OneInputModal title={\"Create pack\"}\r\n                       placeholder={\"please type a pack name\"}\r\n                       active={showCreatePackModal}\r\n                       setActive={setShowCreatePackModal}\r\n                       handleOnSubmit={createPack}\r\n        />\r\n    </>\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport classes from \"./Checkbox.module.scss\";\r\n\r\ntype SortOutOwnPacksPropsType = {\r\n    onChange: (checkboxValue: boolean) => void\r\n    title: string\r\n    checked: boolean\r\n    disabled: boolean\r\n}\r\n\r\nexport const Checkbox: React.FC<SortOutOwnPacksPropsType> = React.memo(\r\n    ({disabled, onChange, title, checked}) => {\r\n    const setCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.checked)\r\n    }\r\n\r\n    return <div>\r\n        <input\r\n            className={classes.checkbox}\r\n            type={\"checkbox\"}\r\n            id={\"customCheckbox\"}\r\n            name={\"customCheckbox\"}\r\n            onChange={setCheckboxHandler}\r\n            disabled={disabled}\r\n            checked={checked}/>\r\n        <label htmlFor={\"customCheckbox\"}>\r\n            <h4>{title}</h4>\r\n        </label>\r\n    </div>\r\n})\r\n","import classes from './Packs.module.scss';\r\nimport React, {useCallback, useMemo} from 'react';\r\nimport {CardPackType} from \"../../../n1-main/m3-dal/packs-api\";\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport {SearchParamsType} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\nimport moment from \"moment\";\r\nimport {PackButtonsBlock} from \"../../../n1-main/m1-ui/common/Table/PackButtonsBlock\";\r\nimport {AddPackBlock} from \"../../../n1-main/m1-ui/common/Table/AddPackBlock\";\r\nimport {Checkbox} from \"../../../n1-main/m1-ui/common/Checkbox/Checkbox\";\r\n\r\ntype PropsType = {\r\n    packs: Array<CardPackType>\r\n    userId: string | undefined\r\n    page: number\r\n    pageCount: number\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n    searchParams: SearchParamsType\r\n    deletePack: (id: string) => void\r\n    createPack: (name: string) => void\r\n    updatePack: (name: string, id: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    choosePack: (packId: string, cardsOwner: string) => void\r\n    startLearn: (packId: string, cardsOwner: string) => void\r\n    setPacksSortColumn: (sortPacks: string) => void\r\n    pageStatus: StatusType\r\n    setGettingMyPacks: (checkboxValue: boolean) => void\r\n}\r\n\r\nconst Packs: React.FC<PropsType> = React.memo((props) => {\r\n    let {\r\n        packs, userId, page, setPacksSortColumn,\r\n        pageCount, cardPacksTotalCount, createPack,\r\n        deletePack, updatePack, changePage, choosePack,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {packName, user_id}, startLearn, setGettingMyPacks\r\n    } = props\r\n\r\n    const sortCardsCount = useCallback((sort: number) => setPacksSortColumn(sort + \"cardsCount\"), [])\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                <div style={{whiteSpace: \"pre\"}}>Name</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    {d.name}\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\"}} key={i}>\r\n                <div>Added</div>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => {\r\n                return <td style={{width: \"15%\"}} key={i}>{moment(d.created).format('Do MMM YY')}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"10%\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                <div>Cards count</div>\r\n                <ColumnSorting onClick={sortCardsCount} pageStatus={pageStatus}/>\r\n            </th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"10%\"}} key={i}>{d.cardsCount}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"25%\"}} key={i}>Owner</th>),\r\n            render: (d: CardPackType, i: number) => (\r\n                <td style={{width: \"25%\"}} key={i}>{d.user_name}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", paddingRight: \"20px\", textAlign: \"right\"}} key={i}>\r\n                    <AddPackBlock createPack={createPack} pageStatus={pageStatus}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardPackType, i: number) => {\r\n                return <td style={{width: \"15%\", textAlign: \"right\", minHeight: \"100%\", display: \"flex\"}} key={i}>\r\n                    <PackButtonsBlock updatePack={updatePack}\r\n                                      choosePack={choosePack}\r\n                                      startLearn={startLearn}\r\n                                      deletePack={deletePack}\r\n                                      owner={userId === d.user_id} pack={d}\r\n                                      pageStatus={pageStatus}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus]);\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n\r\n                <div className={classes.packs__title}>\r\n                    <h3>Packs</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Checkbox\r\n                        onChange={setGettingMyPacks}\r\n                        title={\"show only my packs\"}\r\n                        checked={!!user_id}\r\n                        disabled={pageStatus === \"loading\"}/>\r\n                    <Search\r\n                        name={packName}\r\n                        label={\"Search\"}\r\n                        minValue={min}\r\n                        maxValue={max}\r\n                        stepValue={1}\r\n                        disabled={props.pageStatus === \"loading\"}\r\n                        setSearchParams={setSearchParams}/>\r\n                    <Table\r\n                        data={packs}\r\n                        model={testModel}\r\n                        disabled={props.pageStatus === \"loading\"}/>\r\n                    <Paginator\r\n                        currentPage={page}\r\n                        itemsTotalCount={cardPacksTotalCount}\r\n                        pageCount={pageCount}\r\n                        changePage={changePage}\r\n                        changePageCount={changePageCount}\r\n                        disabled={props.pageStatus === \"loading\"}\r\n                        itemsName={\"packs\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Packs;\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const packsApi = {\r\n    getPacks(params: QueryParamsPacksType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/pack\", {params})\r\n    },\r\n    createPack(cardsPack: CreateCardPackType) {\r\n        return instance.post<{ newCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete<{ deletedCardsPack: CardPackType }>(\"cards/pack\", {params: {id}})\r\n    },\r\n    updatePack(cardsPack: {name: string, _id: string}) {\r\n        return instance.put<{ updatedCardsPack: CardPackType }>(\"/cards/pack\", {cardsPack})\r\n    }\r\n}\r\n\r\ntype QueryParamsPacksType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n\r\n}\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string // папка\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: \"pack\" | \"folder\" // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    cardsCount: number\r\n    more_id: string\r\n    private: boolean\r\n    user_name: string\r\n}\r\n\r\ntype CreateCardPackType = {\r\n    name?: string // если не отправить будет таким\r\n    path?: string // если не отправить будет такой\r\n    grade?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    deckCover?: string // не обязателен\r\n    private?: boolean // если не отправить будет такой\r\n    type?: \"pack\" | \"folder\" // если не отправить будет таким\r\n}\r\n","import {CardPackType, packsApi} from \"../../m3-dal/packs-api\";\r\nimport {RootStateType} from \"../store\";\r\nimport {StatusType} from \"./app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\n\r\n\r\nexport type PacksStateType = typeof initialState\r\nexport type SearchParamsType = typeof initialState.searchParams\r\n\r\n\r\nconst initialState = {\r\n    packs: [] as Array<CardPackType>,\r\n    getMyPacks: false,\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    min: 0,\r\n    max: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        packName: \"\",\r\n        sortPacks: \"\",\r\n        min: 0,\r\n        max: 0,\r\n        user_id: \"\"\r\n    },\r\n    errorText: \"\"\r\n}\r\n\r\nexport const getPacks = createAsyncThunk<\r\n    {packs: CardPackType[], cardPacksTotalCount: number, min: number,\r\n        max: number, page?: number},\r\n    number | undefined,\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"packs/getPacks\",\r\n    async (selectedPage, {getState, rejectWithValue}) => {\r\n        const {page, pageCount,\r\n            searchParams: {packName, min, max, sortPacks, user_id}} = getState().packs\r\n        try {\r\n            const response = await packsApi.getPacks({\r\n                page: selectedPage || page,\r\n                pageCount,\r\n                packName,\r\n                min,\r\n                max,\r\n                sortPacks,\r\n                user_id\r\n            })\r\n            const {cardPacks, maxCardsCount, minCardsCount, cardPacksTotalCount} = response.data\r\n            return {packs: cardPacks, min: minCardsCount, max: maxCardsCount, cardPacksTotalCount, page: selectedPage}\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const deletePack = createAsyncThunk<\r\n    undefined,\r\n    string,\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"packs/deletePack\",\r\n    async (id, {rejectWithValue, dispatch}) => {\r\n    try {\r\n        await packsApi.deletePack(id)\r\n        await dispatch(getPacks())\r\n    } catch (e) {\r\n        const error: ErrorType = e\r\n        return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n    }\r\n})\r\n\r\nexport const createPack = createAsyncThunk<\r\n    undefined,\r\n    string,\r\n    {rejectValue: string, state: RootStateType}\r\n    >(\"packs/createPack\",\r\n    async (name, {rejectWithValue, dispatch}) => {\r\n    try {\r\n        await packsApi.createPack({name})\r\n        await dispatch(getPacks(1))\r\n    } catch (e) {\r\n        const error: ErrorType = e\r\n        return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n    }\r\n})\r\n\r\nexport const updatePack = createAsyncThunk<\r\n    { name: string, _id: string },\r\n    { name: string, _id: string },\r\n    {rejectValue: string}\r\n    >(\"packs/updatePack\",\r\n    async ({name, _id}, {rejectWithValue}) => {\r\n    try {\r\n        await packsApi.updatePack({name, _id})\r\n        return { name, _id }\r\n    } catch (e) {\r\n        const error: ErrorType = e\r\n        return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n    }\r\n})\r\n\r\nexport const packsSlice = createSlice({\r\n    name: \"packs\",\r\n    initialState,\r\n    reducers: {\r\n        changePagePacks: (state, action: PayloadAction<{ page: number }>) => {\r\n            state.page = action.payload.page\r\n        },\r\n        changePageCountPacks: (state, action: PayloadAction<{ pageCount: number }>) => {\r\n            state.pageCount = action.payload.pageCount\r\n        },\r\n        setSearchParams: (state, action: PayloadAction<{ packName: string, min: number, max: number }>) => {\r\n            const {packName, max, min} = action.payload\r\n            state.searchParams.packName = packName\r\n            state.searchParams.min = min\r\n            state.searchParams.max = max\r\n        },\r\n        setPacksSortColumn: (state, action: PayloadAction<{ sortPacks: string }>) => {\r\n            state.searchParams.sortPacks = action.payload.sortPacks\r\n        },\r\n        setUserIdAC: (state, action: PayloadAction<{ user_id: string }>) => {\r\n            state.searchParams.user_id = action.payload.user_id\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(getPacks.pending, (state) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(getPacks.fulfilled, (state, action) => {\r\n                const {packs, cardPacksTotalCount, page, min, max} = action.payload\r\n                state.packs = packs\r\n                state.min = min\r\n                state.max = max\r\n                state.cardPacksTotalCount = cardPacksTotalCount\r\n                if (page) {\r\n                    state.page = page\r\n                }\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(getPacks.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.errorText = action.payload\r\n                    state.pageStatus = \"failed\"\r\n                }\r\n            })\r\n            .addCase(deletePack.pending, (state) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(deletePack.fulfilled, (state) => {\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(deletePack.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.errorText = action.payload\r\n                    state.pageStatus = \"failed\"\r\n                }\r\n            })\r\n            .addCase(createPack.pending, (state) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(createPack.fulfilled, (state) => {\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(createPack.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.errorText = action.payload\r\n                    state.pageStatus = \"failed\"\r\n                }\r\n            })\r\n            .addCase(updatePack.pending, (state) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(updatePack.fulfilled, (state, action) => {\r\n                let pack = state.packs.find(pack => pack._id === action.payload._id)\r\n                if (pack) {\r\n                    pack.name = action.payload.name\r\n                    state.page = 1\r\n                    state.pageStatus = \"succeeded\"\r\n                }\r\n            })\r\n            .addCase(updatePack.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.errorText = action.payload\r\n                    state.pageStatus = \"failed\"\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const {setSearchParams, setPacksSortColumn, changePageCountPacks, changePagePacks, setUserIdAC} = packsSlice.actions\r\n","import { useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\"\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {AppDispatchType} from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Packs from \"./Packs\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {\r\n    changePagePacks,\r\n    changePageCountPacks,\r\n    createPack,\r\n    deletePack,\r\n    getPacks,\r\n    PacksStateType,\r\n    setPacksSortColumn,\r\n    setSearchParams,\r\n    setUserIdAC,\r\n    updatePack,\r\n    packsSlice\r\n} from \"../../../n1-main/m2-bll/reducers/packs-reducer\";\r\n\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useActions} from \"../../../n1-main/m2-bll/utils\";\r\n\r\nconst PacksContainer = React.memo(() => {\r\n\r\n    // console.log(\"packs container\")\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const {packs, min, max, page, pageCount, cardPacksTotalCount, pageStatus, searchParams, getMyPacks} =\r\n        useSelector<RootStateType, PacksStateType>(state => state.packs)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.login.userData?._id)\r\n\r\n    const {} = useActions(packsSlice.actions)\r\n\r\n    const deletePackHandler = useCallback((id: string) => {\r\n        dispatch(deletePack(id))\r\n    }, [])\r\n    const createPackHandler = useCallback((name: string) => {\r\n        dispatch(createPack(name))\r\n    }, [])\r\n    const updatePackHandler = useCallback((name: string, _id: string) => {\r\n        dispatch(updatePack({name, _id}))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changePagePacks({page}))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changePageCountPacks({pageCount}))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((packName: string, min: number, max: number) => {\r\n        dispatch(setSearchParams({packName, min, max}))\r\n    }, [])\r\n    const setPacksSortColumnHandler = useCallback((sortPacks: string) => {\r\n        dispatch(setPacksSortColumn({sortPacks}))\r\n    }, [])\r\n    const choosePackHandler = useCallback((packId: string) => {\r\n        history.push(`/cards/${packId}`)\r\n    }, [])\r\n    const startLearnHandler = useCallback((packId: string) => {\r\n        history.push(`/learn/${packId}`)\r\n    }, [])\r\n    const setGettingMyPacks = (checkboxValue: boolean) => {\r\n        if (checkboxValue) {\r\n            dispatch(setUserIdAC({user_id: userId as string}))\r\n        } else {\r\n            dispatch(setUserIdAC({user_id: \"\"}))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacks())\r\n    }, [page, pageCount, searchParams, getMyPacks])\r\n\r\n    if (!packs || pageStatus === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Packs packs={packs}\r\n               userId={userId}\r\n               page={page}\r\n               min={min}\r\n               max={max}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardPacksTotalCount={cardPacksTotalCount}\r\n               createPack={createPackHandler}\r\n               deletePack={deletePackHandler}\r\n               updatePack={updatePackHandler}\r\n               changePage={changePageHandler}\r\n               choosePack={choosePackHandler}\r\n               startLearn={startLearnHandler}\r\n               setPacksSortColumn={setPacksSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n               setGettingMyPacks={setGettingMyPacks}\r\n        />\r\n    );\r\n})\r\n\r\nexport default PacksContainer;\r\n","import React from \"react\";\r\nimport classes from \"./ThreeInputModal.module.scss\";\r\nimport {Modal} from \"../Modal\";\r\nimport {Button} from \"../../Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {TableButton} from \"../../Table/TableButton/TableButton\";\r\n\r\ntype InputModalType = {\r\n    title: string\r\n    firstInputValue?: string\r\n    secondInputValue?: string\r\n    thirdInputValue?: string\r\n    active: boolean\r\n    setActive: (value: boolean) => void\r\n    handleOnSubmit: (question: string, answer: string, comment: string) => void\r\n}\r\n\r\nexport const ThreeInputModal: React.FC<InputModalType> = ({title, firstInputValue,\r\n                                                              secondInputValue, thirdInputValue,\r\n                                                              active, setActive, handleOnSubmit}) => {\r\n\r\n    console.log(firstInputValue, secondInputValue, thirdInputValue)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: firstInputValue || \"\",\r\n            answer: secondInputValue || \"\",\r\n            comment: thirdInputValue || \"\"\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            handleOnSubmit(values.question, values.answer, values.comment)\r\n            resetForm()\r\n            setActive(false)\r\n        }\r\n    })\r\n\r\n    return <Modal active={active} setActive={setActive}>\r\n            <div className={classes.closeButton}>\r\n                <TableButton\r\n                    btnName={\"X\"}\r\n                    onClick={() => setActive(false)}\r\n                />\r\n            </div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.inputModal}>\r\n                <h3>{title}</h3>\r\n                <textarea placeholder={\"question\"} {...formik.getFieldProps(\"question\")} />\r\n                <textarea  placeholder={\"answer\"} {...formik.getFieldProps(\"answer\")} />\r\n                <textarea  placeholder={\"comment\"} {...formik.getFieldProps(\"comment\")} />\r\n                <div>\r\n                    <Button\r\n                        btnName={\"Save\"}\r\n                        btnType={\"green\"}\r\n                        type={\"submit\"}\r\n                    />\r\n                    <Button\r\n                        btnName={\"Reset\"}\r\n                        type={\"reset\"}\r\n                        style={{marginLeft: \"10px\"}}\r\n                        onClick={() => formik.setValues({question: \"\", answer: \"\", comment: \"\"})}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {QuestionModalContainer} from \"../ModalWindows/QuestionModal/QuestionModalContainer\";\r\nimport {ThreeInputModal} from \"../ModalWindows/ThreeInputModal/ThreeInputModal\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\nimport {CardType} from \"../../../m3-dal/cards-api\";\r\nimport {GeneralBTN} from \"./GeneralBTN/GeneralBTN\";\r\n\r\ntype CardButtonsBlockPropsType = {\r\n    deleteCard: (id: string) => void\r\n    updateCard: (cardId: string, question: string, answer: string) => void\r\n    owner: boolean\r\n    pageStatus: StatusType\r\n    card: CardType\r\n}\r\n\r\nexport const CardButtonsBlock: React.FC<CardButtonsBlockPropsType> = React.memo(({\r\n                                                                                     deleteCard,\r\n                                                                                     updateCard, owner,\r\n                                                                                     pageStatus, card\r\n                                                                                 }) => {\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const {_id, question, answer, comments} = card\r\n\r\n    return <>\r\n        <GeneralBTN btnType={\"edit\"} onClick={() => setShowEditModal(true)}\r\n                 disabled={!owner || pageStatus === \"loading\"}/>\r\n        <GeneralBTN btnType={\"remove\"} onClick={() => setShowDeleteModal(true)}\r\n                   disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <><QuestionModalContainer text={\"Delete this card?\"}\r\n                                    activate={showDeleteModal}\r\n                                    setActivate={setShowDeleteModal}\r\n                                    setAnswerY={() => deleteCard(_id)}\r\n                                    setAnswerN={() => {\r\n                                    }}/>\r\n            <ThreeInputModal title={\"Edit card\"}\r\n                             handleOnSubmit={(question, answer, comment) => updateCard(_id, question, answer)}\r\n                             setActive={setShowEditModal}\r\n                             firstInputValue={question}\r\n                             secondInputValue={answer}\r\n                             thirdInputValue={comments}\r\n                             active={showEditModal}/>\r\n        </>}\r\n    </>\r\n})\r\n","import React, {useState} from \"react\";\r\nimport {ThreeInputModal} from \"../ModalWindows/ThreeInputModal/ThreeInputModal\";\r\nimport {TableButton} from \"./TableButton/TableButton\";\r\nimport {StatusType} from \"../../../m2-bll/reducers/app-reducer\";\r\n\r\ntype AddCardBlockPropsType = {\r\n    createCard: (question: string, answer: string) => void\r\n    pageStatus: StatusType\r\n    owner: boolean\r\n}\r\n\r\nexport const AddCardBlock: React.FC<AddCardBlockPropsType> = ({createCard, pageStatus, owner}) => {\r\n    const [showCreateModal, setShowCreateModal] = useState(false)\r\n\r\n    return <>\r\n        <TableButton btnName={\"+\"} btnType={\"green\"}\r\n                     onClick={() => setShowCreateModal(true)}\r\n                     disabled={!owner || pageStatus === \"loading\"}/>\r\n        {owner && <ThreeInputModal title={\"Create card\"}\r\n                                     handleOnSubmit={createCard}\r\n                                     setActive={setShowCreateModal}\r\n                                     active={showCreateModal}/>}\r\n    </>\r\n}\r\n","import classes from './Cards.module.scss';\r\nimport React, {useCallback, useMemo} from 'react';\r\nimport Table, {ITableModel} from '../../../n1-main/m1-ui/common/Table/Table';\r\nimport {StatusType} from \"../../../n1-main/m2-bll/reducers/app-reducer\";\r\nimport {Search} from \"../../../n1-main/m1-ui/common/Search/Search\";\r\nimport {CardsSearchParamsType} from '../../../n1-main/m2-bll/reducers/cards-reducer';\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {Paginator} from \"../../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {ColumnSorting} from \"../../../n1-main/m1-ui/common/ColumnSorting/ColumnSorting\";\r\nimport moment from \"moment\";\r\nimport {CardButtonsBlock} from \"../../../n1-main/m1-ui/common/Table/CardButtonsBlock\";\r\nimport {AddCardBlock} from \"../../../n1-main/m1-ui/common/Table/AddCardBlock\";\r\n\r\n\r\ntype PropsType = {\r\n    cards: Array<CardType>\r\n    owner: boolean\r\n    page: number\r\n    pageCount: number\r\n    min: number\r\n    max: number\r\n    cardsTotalCount: number\r\n    searchParams: CardsSearchParamsType\r\n    deleteCard: (id: string) => void\r\n    createCard: (question: string, answer: string) => void\r\n    updateCard: (cardId: string, question: string, answer: string) => void\r\n    changePage: (page: number) => void\r\n    changePageCount: (page: number) => void\r\n    setSearchParams: (searchName: string, min: number, max: number) => void\r\n    pageStatus: StatusType\r\n    setSortColumn: (sortCards: string) => void\r\n}\r\n\r\nconst Cards: React.FC<PropsType> = React.memo((props) => {\r\n    let {\r\n        cards, page, owner, setSortColumn,\r\n        pageCount, cardsTotalCount,\r\n        createCard, deleteCard, updateCard, changePage,\r\n        changePageCount, setSearchParams, pageStatus,\r\n        min, max, searchParams: {cardQuestion}\r\n    } = props\r\n\r\n    const sortGrade = useCallback((sort: number) => setSortColumn(sort + \"grade\"), [])\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                <span>Question</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.question}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"30%\"}} key={i}>Answer</th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.answer}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (<th style={{width: \"15%\"}} key={i}>\r\n                <span>Added</span>\r\n            </th>),\r\n            render: (d: CardType, i: number) => {\r\n                return <td style={{width: \"15%\"}} key={i}>{moment(d.created).format('Do MMM YY')}</td>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"15%\", display: \"flex\", alignItems: \"center\"}} key={i}>\r\n                    <div>Grade</div>\r\n                    <ColumnSorting onClick={sortGrade} pageStatus={pageStatus}/>\r\n                </th>),\r\n            render: (d: CardType, i: number) => (\r\n                <td style={{width: \"15%\"}} key={i}>{d.grade.toFixed(2)}</td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\", textAlign: \"right\"}} key={i}>\r\n                    <AddCardBlock createCard={createCard} pageStatus={pageStatus} owner={owner}/>\r\n                </th>\r\n            ),\r\n            render: (d: CardType, i: number) => {\r\n\r\n                return <td style={{width: \"15%\", textAlign: \"right\", minHeight: \"100%\", display: \"flex\"}} key={i}>\r\n                    <CardButtonsBlock\r\n                        deleteCard={deleteCard}\r\n                        updateCard={updateCard}\r\n                        owner={owner}\r\n                        pageStatus={pageStatus}\r\n                        card={d}/>\r\n                </td>\r\n            }\r\n        },\r\n\r\n    ]), [pageStatus, owner])\r\n\r\n    return (\r\n        <div className={classes.packs}>\r\n            <div className={classes.packs__container}>\r\n                <div className={classes.packs__title}>\r\n                    <h3>Cards</h3>\r\n                </div>\r\n                <div className={classes.packs__body}>\r\n                    <Search name={cardQuestion}\r\n                            label={\"Search\"}\r\n                            minValue={min}\r\n                            maxValue={max}\r\n                            stepValue={1}\r\n                            disabled={props.pageStatus === \"loading\"}\r\n                            setSearchParams={setSearchParams}/>\r\n                    <Table data={cards}\r\n                           model={testModel}\r\n                           disabled={props.pageStatus === \"loading\"}/>\r\n                    <Paginator currentPage={page}\r\n                               itemsTotalCount={cardsTotalCount}\r\n                               pageCount={pageCount}\r\n                               changePage={changePage}\r\n                               changePageCount={changePageCount}\r\n                               disabled={props.pageStatus === \"loading\"}\r\n                               itemsName={\"cards\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Cards\r\n","import axios from \"axios\"\r\n\r\nconst BASE_URL = \"https://neko-back.herokuapp.com/2.0\"\r\n// const BASE_URL = \"http://localhost:7542/2.0\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_URL,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsApi = {\r\n    getPack(params: QueryParamsCardsType) {\r\n        return instance.get<ResponsePacksType>(\"/cards/card\", {params})\r\n    },\r\n    createCard(card: CreateCardType) {\r\n        return instance.post<{ newCard: CardType }>(\"/cards/card\", {card})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<{ deletedCard: CardType }>(\"/cards/card\", {params: {id}})\r\n    },\r\n    updateCard(card: UpdateCardType) {\r\n        return instance.put<{ updatedCard: CardType }>(\"/cards/card\", {card})\r\n    },\r\n    gradeCard(card: GradeType) {\r\n        return instance.put<{ updatedGrade: UpdateGrade }>(\"/cards/grade\", card)\r\n    }\r\n}\r\n\r\nexport type GradeType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\n\r\nexport type UpdateGrade = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}\r\ntype QueryParamsCardsType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    sortCards?: string\r\n    min?: number\r\n    max?: number\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n\r\n}\r\n\r\ntype ResponsePacksType = {\r\n    \"cards\": CardType[],\r\n    \"cardsTotalCount\": number,\r\n    \"minGrade\": number,\r\n    \"maxGrade\": number,\r\n    packUserId: string\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n    \"token\": string,\r\n    \"tokenDeathTime\": number\r\n\r\n}\r\nexport type CardType = {\r\n    cardsPack_id: string,\r\n    _id: string\r\n    user_id: string\r\n    more_id: string\r\n    question: string,\r\n    questionImg: \"\"\r\n    questionVideo: \"\"\r\n    answer: string,\r\n    answerImg: \"\"\r\n    answerVideo: \"\"\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    created: string\r\n    updated: string\r\n    type: \"card\"\r\n    __v: number\r\n    comments: string,\r\n}\r\n\r\nexport type CreateCardType = {\r\n    cardsPack_id?: string\r\n    question?: string // если не отправить будет таким\r\n    answer?: string // если не отправить будет таким\r\n    grade?: number // 0..5, не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    answerImg?: string // не обязателен\r\n    questionImg?: string // не обязателен\r\n    questionVideo?: string // не обязателен\r\n    answerVideo?: string // не обязателен\r\n    type?: \"card\"\r\n}\r\nexport type UpdateCardType = {\r\n    question?: string,\r\n    answer?: string,\r\n    _id: string\r\n}\r\n","import {RootStateType} from \"../store\";\r\nimport { StatusType } from \"./app-reducer\";\r\nimport {cardsApi, CardType, CreateCardType, UpdateCardType} from \"../../m3-dal/cards-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nconst initialState = {\r\n    cardsPack_id: \"\" as string,\r\n    cardsOwner: \"\",\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    minGrade: 0,\r\n    maxGrade: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    searchParams: {\r\n        cardQuestion: \"\",\r\n        cardAnswer: \"\",\r\n        sortCards: \"\",\r\n        min: 0,\r\n        max: 0,\r\n    },\r\n    errorText: \"\"\r\n}\r\n\r\nexport const getCards = createAsyncThunk<\r\n    { cards: Array<CardType>, cardsTotalCount: number, minGrade: number, maxGrade: number, pageStatus: StatusType, page: number, packUserId: string },\r\n    { selectedPage?: number },\r\n    { rejectValue: string, state: RootStateType }\r\n    >(\"cards/getCards\",\r\n    async (arg, { rejectWithValue, getState}) => {\r\n        const {cardsPack_id, page, pageCount, searchParams: {cardQuestion, min, max, sortCards}} = getState().cards\r\n        try {\r\n            const response = await cardsApi.getPack({\r\n                cardsPack_id,\r\n                page: arg.selectedPage || page,\r\n                pageCount,\r\n                cardQuestion,\r\n                min,\r\n                max,\r\n                sortCards\r\n            })\r\n            return {cards: response.data.cards,\r\n                cardsTotalCount: response.data.cardsTotalCount,\r\n                minGrade: response.data.minGrade,\r\n                maxGrade: response.data.maxGrade,\r\n                pageStatus: \"succeeded\",\r\n                packUserId: response.data.packUserId,\r\n                page: arg.selectedPage || 1\r\n            }\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const deleteCard = createAsyncThunk<\r\n    undefined,\r\n    string,\r\n    { rejectValue: string, state: RootStateType }\r\n    >(\"cards/deleteCardTC\",\r\n    async (cardId, {rejectWithValue, dispatch}) => {\r\n        try {\r\n            await cardsApi.deleteCard(cardId)\r\n            dispatch(getCards({}))\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const createCard = createAsyncThunk<\r\n    undefined,\r\n    CreateCardType,\r\n    { rejectValue: string, state: RootStateType }\r\n    >(\"cards/createCardTC\",\r\n    async (card, {rejectWithValue, getState, dispatch}) => {\r\n        let {cardsPack_id} = getState().cards\r\n        try {\r\n            await cardsApi.createCard({...card, cardsPack_id: cardsPack_id})\r\n            dispatch(getCards({selectedPage: 1}))\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const updateCard = createAsyncThunk<\r\n    undefined,\r\n    UpdateCardType,\r\n    { rejectValue: string, state: RootStateType }\r\n    >(\"cards/updateCardTC\",\r\n    async (card, {rejectWithValue, dispatch}) => {\r\n        try {\r\n            await cardsApi.updateCard(card)\r\n            dispatch(getCards({selectedPage: 1}))\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const cardsSlice = createSlice({\r\n    name: \"cards\",\r\n    initialState,\r\n    reducers: {\r\n        setPack: (state, action: PayloadAction<{cardsPack_id: string}>) => {\r\n            const {cardsPack_id} = action.payload\r\n            state.cardsPack_id = cardsPack_id\r\n        },\r\n        changeCardsPage: (state, action: PayloadAction<{page: number}>) => {\r\n            state.page = action.payload.page\r\n        },\r\n        changeCardsPageCount: (state, action: PayloadAction<{ pageCount: number }>) => {\r\n            state.pageCount = action.payload.pageCount\r\n        },\r\n        setCardsSearchParams: (state, action: PayloadAction<{cardQuestion: string, min: number, max: number}>) => {\r\n            const {cardQuestion, min, max} = action.payload\r\n            state.searchParams.cardQuestion = cardQuestion\r\n            state.searchParams.min = min\r\n            state.searchParams.max = max\r\n        },\r\n        setCardsSortColumnParams: (state, action: PayloadAction<{ sortCards: string }>) => {\r\n            state.searchParams.sortCards = action.payload.sortCards\r\n            console.log(state.searchParams.sortCards)\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(getCards.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(getCards.fulfilled, (state, action) => {\r\n                state.cards = action.payload.cards\r\n                state.cardsTotalCount = action.payload.cardsTotalCount\r\n                state.minGrade = action.payload.minGrade\r\n                state.maxGrade = action.payload.maxGrade\r\n                state.pageStatus = action.payload.pageStatus\r\n                state.page = action.payload.page\r\n                state.cardsOwner = action.payload.packUserId\r\n            })\r\n            .addCase(getCards.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n            .addCase(deleteCard.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(deleteCard.fulfilled, (state, action) => {\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(deleteCard.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n            .addCase(createCard.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(createCard.fulfilled, (state, action) => {\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(createCard.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n            .addCase(updateCard.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(updateCard.fulfilled, (state, action) => {\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(updateCard.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const {setPack, changeCardsPage, changeCardsPageCount, setCardsSearchParams, setCardsSortColumnParams} = cardsSlice.actions\r\n\r\nexport type CardsStateType = typeof initialState\r\nexport type CardsSearchParamsType = typeof initialState.searchParams\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Cards from \"./Cards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\nimport {\r\n    CardsStateType,\r\n    changeCardsPage,\r\n    changeCardsPageCount,\r\n    createCard,\r\n    deleteCard,\r\n    getCards,\r\n    setCardsSearchParams,\r\n    setCardsSortColumnParams,\r\n    setPack,\r\n    updateCard\r\n} from \"../../../n1-main/m2-bll/reducers/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CardsContainer = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        cards, cardsOwner, cardsPack_id, minGrade, maxGrade, page, pageCount, cardsTotalCount, pageStatus, searchParams\r\n        } = useSelector<RootStateType, CardsStateType>(state => state.cards)\r\n    const userId = useSelector<RootStateType, string | undefined>(state => state.login.userData?._id)\r\n\r\n\r\n    let {packId} = useParams<{packId: string}>()\r\n    if (cardsPack_id !== packId) {\r\n        dispatch(setPack({cardsPack_id: packId}))\r\n    }\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCard(cardId))\r\n    }, [])\r\n    const createCardHandler = useCallback((question: string, answer: string) => {\r\n        dispatch(createCard({question, answer}))\r\n    }, [])\r\n    const updateCardHandler = useCallback((cardId: string, question: string, answer: string) => {\r\n        dispatch(updateCard({question, _id: cardId, answer}))\r\n    }, [])\r\n    const changePageHandler = useCallback((page: number) => {\r\n        dispatch(changeCardsPage({page}))\r\n    }, [])\r\n    const changePageCountHandler = useCallback((pageCount: number) => {\r\n        dispatch(changeCardsPageCount({pageCount}))\r\n    }, [])\r\n    const setSearchParamsHandler = useCallback((cardQuestion: string, min: number, max: number) => {\r\n        dispatch(setCardsSearchParams({cardQuestion, min, max}))\r\n    }, [])\r\n    const setSortColumnHandler = useCallback((sortCards: string) => {\r\n        dispatch(setCardsSortColumnParams({sortCards}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getCards({}))\r\n\r\n    }, [page, pageCount, searchParams, cardsPack_id])\r\n\r\n    if (!cardsPack_id || !cards || pageStatus === \"idle\") {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Cards cards={cards}\r\n               page={page}\r\n               owner={cardsOwner===userId}\r\n               min={minGrade}\r\n               max={maxGrade}\r\n               pageCount={pageCount}\r\n               searchParams={searchParams}\r\n               cardsTotalCount={cardsTotalCount}\r\n               createCard={createCardHandler}\r\n               deleteCard={deleteCardHandler}\r\n               updateCard={updateCardHandler}\r\n               changePage={changePageHandler}\r\n               setSortColumn={setSortColumnHandler}\r\n               changePageCount={changePageCountHandler}\r\n               setSearchParams={setSearchParamsHandler}\r\n               pageStatus={pageStatus}\r\n        />\r\n    );\r\n})\r\n\r\nexport default CardsContainer;\r\n","import React from \"react\";\r\nimport classes from \"./PageNotFound.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../m2-bll/store\";\r\n\r\nexport const PageNotFound = () => {\r\n\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(state => state.login.isLoggedSuccess)\r\n    const history = useHistory()\r\n\r\n    const buttonHandler = () => {\r\n        if (isLoggedSuccess) {\r\n            history.push('/profile')\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrap}>\r\n            <h2 className={classes.title}>404</h2>\r\n            <h3 className={classes.subtitle}>Sorry, the page not found...</h3>\r\n            <Button btnName={'Go back'} btnType={'green'} onClick={buttonHandler}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport {Button} from \"../../../n1-main/m1-ui/common/Button/Button\";\r\nimport classes from \"./Practice.module.scss\";\r\n\r\n\r\n\r\nconst grades = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r\n\r\ntype PropsType = {\r\n    card: CardType\r\n    gradeCard: (cardId: string, grade: number) => void\r\n    isLoading: boolean\r\n    onNext: () => void\r\n}\r\n\r\nconst Practice: React.FC<PropsType> = React.memo(({card, isLoading, gradeCard, onNext}) => {\r\n\r\n    const [isChecked, setIsChecked] = useState(false)\r\n\r\n    const onGradeButtonHandler = async (grade: number) => {\r\n        await gradeCard(card._id, grade)\r\n        setIsChecked(false)\r\n    }\r\n\r\n    const onNextHandler = () => {\r\n        onNext()\r\n        setIsChecked(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.practice}>\r\n            <div className={classes.practice__container}>\r\n                <div className={classes.card}>\r\n                    <div style={isChecked ? {transform: \"rotateX(180deg)\"} : {}} className={classes.card__inner}>\r\n                        <div className={classes.card__front}\r\n                             onClick={() => setIsChecked(true)}>\r\n                            <div className={classes.card__text}>\r\n                                <div>{card.question}</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className={classes.card__back}>\r\n                            <div className={classes.card__text} onClick={()=>setIsChecked(false)}>\r\n                                <div>{card.answer}</div>\r\n                            </div>\r\n\r\n                            <div className={classes.card__back_bottom}>\r\n                                {grades.map((g, i) => (\r\n                                    <Button onClick={() => onGradeButtonHandler(i+1)}\r\n                                            key={'grade-' + i}\r\n                                            disabled={isLoading}\r\n                                            btnName={g}/>\r\n                                ))}\r\n\r\n                                <div className={classes.card__next_btn} onClick={onNextHandler}>next</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n);\r\n})\r\n\r\nexport default Practice;\r\n","import {RootStateType} from \"../store\";\r\nimport {StatusType} from \"./app-reducer\";\r\nimport {cardsApi, CardType, GradeType} from \"../../m3-dal/cards-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { ErrorType } from \"../commonTypes\";\r\n\r\nexport type PracticeStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    cardsPack_id: \"\" as string,\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    pageStatus: \"idle\" as StatusType,\r\n    cardIsLoading: false,\r\n    errorText: \"\"\r\n}\r\n\r\nexport const getPracticeCards = createAsyncThunk<\r\n    { cards: CardType[], cardsTotalCount: number },\r\n    undefined,\r\n    { rejectValue: string, state: RootStateType }\r\n    >(\"practice/getPracticeCards\",\r\n    async (arg, {rejectWithValue, getState}) => {\r\n        const {cardsPack_id} = getState().practice\r\n        try {\r\n            const response = await cardsApi.getPack({cardsPack_id, pageCount: 200})\r\n            return {cards: response.data.cards, cardsTotalCount: response.data.cardsTotalCount}\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const updateGrade = createAsyncThunk<\r\n    { card_id: string, grade: number, shots: number },\r\n    GradeType,\r\n    { rejectValue: string }\r\n    >(\"practice/updateGrade\",\r\n    async (card: GradeType, {rejectWithValue}) => {\r\n        try {\r\n            const response = await cardsApi.gradeCard(card)\r\n            let {data: {updatedGrade: {card_id, grade, shots}}} = response\r\n            return {card_id, grade, shots}\r\n        } catch (e) {\r\n            const error: ErrorType = e\r\n            return rejectWithValue(error.response ? error.response.data.error : \"unknown error\")\r\n        }\r\n    })\r\n\r\nexport const practiceSlice = createSlice({\r\n    name: \"practice\",\r\n    initialState,\r\n    reducers: {\r\n        setPracticePackId: (state, action: PayloadAction<{ cardsPack_id: string }>) => {\r\n            state.cardsPack_id = action.payload.cardsPack_id\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(getPracticeCards.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n            })\r\n            .addCase(getPracticeCards.fulfilled, (state, action) => {\r\n                state.cards = action.payload.cards\r\n                state.cardsTotalCount = action.payload.cardsTotalCount\r\n                state.pageStatus = \"succeeded\"\r\n            })\r\n            .addCase(getPracticeCards.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n            .addCase(updateGrade.pending, (state, action) => {\r\n                state.pageStatus = \"loading\"\r\n                state.cardIsLoading = true\r\n            })\r\n            .addCase(updateGrade.fulfilled, (state, action) => {\r\n                let card = state.cards.find(card => card._id === action.payload.card_id)\r\n                if (card) {\r\n                    card.grade = action.payload.grade\r\n                    card.shots = action.payload.shots\r\n                }\r\n                state.pageStatus = \"succeeded\"\r\n                state.cardIsLoading = false\r\n            })\r\n            .addCase(updateGrade.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.pageStatus = \"failed\"\r\n                    state.errorText = action.payload\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const {setPracticePackId} = practiceSlice.actions\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {CardType} from \"../../../n1-main/m3-dal/cards-api\";\r\nimport Practice from './Practice';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getPracticeCards, PracticeStateType, setPracticePackId, updateGrade} from \"../../../n1-main/m2-bll/reducers/practice-reducer\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/common/Preloader/Preloader\";\r\n\r\n\r\nconst getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    // console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\nconst PracticeContainer: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {cards, cardsPack_id, cardIsLoading} = useSelector<RootStateType, PracticeStateType>(state => state.practice)\r\n    const [card, setCard] = useState<CardType | null>(null)\r\n\r\n    let {packId} = useParams<{ packId: string }>()\r\n    if (cardsPack_id !== packId) {\r\n        dispatch(setPracticePackId({cardsPack_id: packId}))\r\n    }\r\n\r\n    const gradeCardHandler = useCallback(async (cardId: string, grade: number) => {\r\n        await dispatch(updateGrade({card_id: cardId, grade}))\r\n    }, [])\r\n\r\n    const onNextHandler = useCallback(() => {\r\n        if (cards.length) setTimeout(setCard, 300, getCard(cards))\r\n    }, [cards])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getPracticeCards())\r\n        return () => setCard(null)\r\n    }, [cardsPack_id])\r\n\r\n    useEffect(() => {\r\n        if (cards.length) setTimeout(setCard, 300, getCard(cards))\r\n        // return () => {\r\n        //     console.log(\"set\")\r\n        //     setCard(null)\r\n        // }\r\n    },[cards])\r\n\r\n\r\n    if (card?.cardsPack_id !== packId) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <Practice card={card}\r\n                  onNext={onNextHandler}\r\n                  gradeCard={gradeCardHandler}\r\n                  isLoading={cardIsLoading}\r\n        />\r\n    );\r\n});\r\n\r\nexport default PracticeContainer;\r\n","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport ProfileContainer from \"../../../n2-features/f1-auth/a5-profile/ProfileContainer\";\r\nimport LoginContainer from \"../../../n2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RegisterContainer from \"../../../n2-features/f1-auth/a2-register/RegisterContainer\";\r\nimport RestoreContainer from \"../../../n2-features/f1-auth/a3-restore/RestoreContainer\";\r\nimport NewPasswordContainer from \"../../../n2-features/f1-auth/a4-new-password/NewPasswordContainer\";\r\nimport AuthRedirect from \"../common/AuthRedirect/AuthRedirect\";\r\nimport PacksContainer from \"../../../n2-features/f2-cards/c1-packs/PacksContainer\";\r\nimport CardsContainer from \"../../../n2-features/f2-cards/c2-cards/CardsContainer\";\r\nimport {PageNotFound} from \"../common/Page404/PageNotFound\";\r\nimport PracticeContainer from \"../../../n2-features/f3-learn/l1-practice/PracticeContainer\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={\"/profile\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n            <Route path={\"/login\"} render={() => <LoginContainer/>}/>\r\n            <Route path={\"/register\"} render={() => <RegisterContainer/>}/>\r\n            <Route path={\"/restore\"} render={() => <RestoreContainer/>}/>\r\n            <Route path={\"/newPassword/:token\"} render={() => <NewPasswordContainer/>}/>\r\n            <Route path={\"/packs\"} render={() => <AuthRedirect><PacksContainer/></AuthRedirect>}/>\r\n            <Route path={\"/cards/:packId\"} render={() => <AuthRedirect><CardsContainer/></AuthRedirect>}/>\r\n            <Route path={\"/learn/:packId\"} render={() => <AuthRedirect><PracticeContainer/></AuthRedirect>}/>\r\n            <Route exact path={\"/\"} render={() => <AuthRedirect><ProfileContainer/></AuthRedirect>}/>\r\n            <Route path={\"*\"} render={() => <PageNotFound/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport classes from \"./Main.module.css\";\r\nimport Routes from \"../Routes/Routes\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <div className={classes.main}>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './Main/Main';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginSlice} from \"./reducers/login-reducer\";\r\nimport {newPasswordSlice} from \"./reducers/newPassword-reducer\";\r\nimport {registerSlice} from \"./reducers/register-reducer\";\r\nimport {restorePasswordSlice} from \"./reducers/restorePassword-reducer\";\r\nimport {appSlice} from \"./reducers/app-reducer\";\r\nimport {packsSlice} from \"./reducers/packs-reducer\";\r\nimport {cardsSlice} from \"./reducers/cards-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {practiceSlice} from \"./reducers/practice-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginSlice.reducer,\r\n    register: registerSlice.reducer,\r\n    restorePassword: restorePasswordSlice.reducer,\r\n    newPassword: newPasswordSlice.reducer,\r\n    packs: packsSlice.reducer,\r\n    cards: cardsSlice.reducer,\r\n    app: appSlice.reducer,\r\n    practice: practiceSlice.reducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatchType = typeof store.dispatch\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}